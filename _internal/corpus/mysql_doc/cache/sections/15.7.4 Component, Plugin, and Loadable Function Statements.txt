15.7.4 Component, Plugin, and Loadable Function Statements
15.7.4.1 CREATE FUNCTION Statement for Loadable Functions
CREATE [AGGREGATE] FUNCTION [IF NOT EXISTS] function_name
    RETURNS {STRING|INTEGER|REAL|DECIMAL}
    SONAME shared_library_name
This statement loads the loadable function named function_name. (CREATE FUNCTION is also used
to created stored functions; see Section 15.1.17, “CREATE PROCEDURE and CREATE FUNCTION
Statements”.)
A loadable function is a way to extend MySQL with a new function that works like a native (built-in)
MySQL function such as ABS() or CONCAT(). See Adding a Loadable Function.
function_name is the name that should be used in SQL statements to invoke the function. The
RETURNS clause indicates the type of the function's return value. DECIMAL is a legal value after
RETURNS, but currently DECIMAL functions return string values and should be written like STRING
functions.
IF NOT EXISTS prevents an error from occurring if there already exists a loadable function with the
same name. It does not prevent an error from occurring if there already exists a built-in function having
the same name. IF NOT EXISTS is also supported for CREATE FUNCTION statements. See Function
Name Resolution.
The AGGREGATE keyword, if given, signifies that the function is an aggregate (group) function. An
aggregate function works exactly like a native MySQL aggregate function such as SUM() or COUNT().
shared_library_name is the base name of the shared library file containing the code that
implements the function. The file must be located in the plugin directory. This directory is given by the
value of the plugin_dir system variable. For more information, see Section 7.7.1, “Installing and
Uninstalling Loadable Functions”.
CREATE FUNCTION requires the INSERT privilege for the mysql system schema because it adds a
row to the mysql.func system table to register the function.
CREATE FUNCTION also adds the function to the Performance Schema user_defined_functions
table that provides runtime information about installed loadable functions. See Section 29.12.22.11,
“The user_defined_functions Table”.
Note
Like the mysql.func system table, the Performance Schema
user_defined_functions table lists loadable functions installed
using CREATE FUNCTION. Unlike the mysql.func table, the
user_defined_functions table also lists loadable functions installed
automatically by server components or plugins. This difference makes
user_defined_functions preferable to mysql.func for checking which
loadable functions are installed.
During the normal startup sequence, the server loads functions registered in the mysql.func table. If
the server is started with the --skip-grant-tables option, functions registered in the table are not
loaded and are unavailable.
Note
To upgrade the shared library associated with a loadable function, issue a DROP
FUNCTION statement, upgrade the shared library, and then issue a CREATE
FUNCTION statement. If you upgrade the shared library first and then use DROP
FUNCTION, the server may unexpectedly shut down.
15.7.4.2 DROP FUNCTION Statement for Loadable Functions
DROP FUNCTION [IF EXISTS] function_name
This statement drops the loadable function named function_name. (DROP FUNCTION is also
used to drop stored functions; see Section 15.1.29, “DROP PROCEDURE and DROP FUNCTION
Statements”.)
DROP FUNCTION is the complement of CREATE FUNCTION. It requires the DELETE privilege for the
mysql system schema because it removes the row from the mysql.func system table that registers
the function.
DROP FUNCTION also removes the function from the Performance Schema
user_defined_functions table that provides runtime information about installed loadable
functions. See Section 29.12.22.11, “The user_defined_functions Table”.
During the normal startup sequence, the server loads functions registered in the mysql.func table.
Because DROP FUNCTION removes the mysql.func row for the dropped function, the server does
not load the function during subsequent restarts.
DROP FUNCTION cannot be used to drop a loadable function that is installed automatically by
components or plugins rather than by using CREATE FUNCTION. Such a function is also dropped
automatically, when the component or plugin that installed it is uninstalled.
Note
To upgrade the shared library associated with a loadable function, issue a DROP
FUNCTION statement, upgrade the shared library, and then issue a CREATE
FUNCTION statement. If you upgrade the shared library first and then use DROP
FUNCTION, the server may unexpectedly shut down.
15.7.4.3 INSTALL COMPONENT Statement
INSTALL COMPONENT component_name  [, component_name ...
     [SET variable = expr [, variable = expr] ...] 
  
  variable: {
    {GLOBAL | @@GLOBAL.} [component_prefix.]system_var_name
  | {PERSIST | @@PERSIST.} [component_prefix.]system_var_name
}
This statement installs one or more components, which become active immediately. A component
provides services that are available to the server and other components; see Section 7.5, “MySQL
Components”. INSTALL COMPONENT requires the INSERT privilege for the mysql.component
system table because it adds a row to that table to register the component.
Example:
INSTALL COMPONENT 'file://component1', 'file://component2';
A component is named using a URN that begins with file:// and indicates the base name of the
library file that implements the component, located in the directory named by the plugin_dir system
variable. Component names do not include any platform-dependent file name suffix such as .so or
.dll. (These naming details are subject to change because component name interpretation is itself
performed by a service and the component infrastructure makes it possible to replace the default
service implementation with alternative implementations.)
INSTALL COMPONENT permits setting the values of component system variables when you install
one or more components. The SET clause enables you to specify variable values precisely when
they are needed, without the inconvenience or limitations associated with other forms of assignment.
Specifically, you can also set component variables with these alternatives:
• At server startup using options on the command line or in an option file, but doing so involves a
server restart. The values do not take effect until you install the component. You can specify an
invalid variable name for a component on the command line without triggering an error.
• Dynamically while the server is running by means of the SET statement, which enables you to
modify operation of the server without having to stop and restart it. Setting a read-only variable is not
permitted.
The optional SET clause applies a value, or values, only to the component specified in the INSTALL
COMPONENT statement, rather than to all subsequent installations of that component. SET GLOBAL|
PERSIST works for all types of variables, including read-only variables, without having to restart the
server. A component system variable that you set using INSTALL COMPONENT takes precedence over
any conflicting value coming from the command line or an option file.
Example:
INSTALL COMPONENT 'file://component1', 'file://component2' 
    SET GLOBAL component1.var1 = 12 + 3, PERSIST component2.var2 = 'strings';
Omitting PERSIST or GLOBAL is equivalent to specifying GLOBAL.
Specifying PERSIST for any variable in SET silently executes SET PERSIST_ONLY immediately after
INSTALL COMPONENT loads the components, but before updating the mysql.component table.
If SET PERSIST_ONLY fails, then the server unloads all of the previously loaded new components
without persisting anything to mysql.component.
The SET clause accepts only valid variable names of the component being installed and emits an
error message for all invalid names. Subqueries, stored functions, and aggregate functions are not
permitted as part of the value expression. If you install a single component, it is not necessary to prefix
the variable name with the component name.
Note
While specifying a variable value using the SET clause is similar to that of
the command line—it is available immediately at variable registration—
there is a distinct difference in how the SET clause handles invalid numerical
values for boolean variables. For example, if you set a boolean variable to 11
(component1.boolvar = 11), you see the following behavior:
• SET clause yields true
• Command line yields false (11 is neither ON nor 1)
If any error occurs, the statement fails and has no effect. For example, this happens if a component
name is erroneous, a named component does not exist or is already installed, or component
initialization fails.
A loader service handles component loading, which includes adding installed components to the
mysql.component system table that serves as a registry. For subsequent server restarts, any
components listed in mysql.component are loaded by the loader service during the startup
sequence. This occurs even if the server is started with the --skip-grant-tables option.
If a component depends on services not present in the registry and you attempt to install the
component without also installing the component or components that provide the services on which it
depends, an error occurs:
ERROR 3527 (HY000): Cannot satisfy dependency for service 'component_a'
required by component 'component_b'.
To avoid this problem, either install all components in the same statement, or install the dependent
component after installing any components on which it depends.
Note
For keyring components, do not use INSTALL COMPONENT. Instead, configure
keyring component loading using a manifest file. See Section 8.4.4.2, “Keyring
Component Installation”.
15.7.4.4 INSTALL PLUGIN Statement
INSTALL PLUGIN plugin_name SONAME 'shared_library_name'
This statement installs a server plugin. It requires the INSERT privilege for the mysql.plugin system
table because it adds a row to that table to register the plugin.
plugin_name is the name of the plugin as defined in the plugin descriptor structure contained
in the library file (see Plugin Data Structures). Plugin names are not case-sensitive. For maximal
compatibility, plugin names should be limited to ASCII letters, digits, and underscore because they are
used in C source files, shell command lines, M4 and Bourne shell scripts, and SQL environments.
shared_library_name is the name of the shared library that contains the plugin code. The
name includes the file name extension (for example, libmyplugin.so, libmyplugin.dll, or
libmyplugin.dylib).
The shared library must be located in the plugin directory (the directory named by the plugin_dir
system variable). The library must be in the plugin directory itself, not in a subdirectory. By default,
plugin_dir is the plugin directory under the directory named by the pkglibdir configuration
variable, but it can be changed by setting the value of plugin_dir at server startup. For example, set
its value in a my.cnf file:
[mysqld]
plugin_dir=/path/to/plugin/directory
If the value of plugin_dir is a relative path name, it is taken to be relative to the MySQL base
directory (the value of the basedir system variable).
INSTALL PLUGIN loads and initializes the plugin code to make the plugin available for use. A plugin is
initialized by executing its initialization function, which handles any setup that the plugin must perform
before it can be used. When the server shuts down, it executes the deinitialization function for each
plugin that is loaded so that the plugin has a chance to perform any final cleanup.
INSTALL PLUGIN also registers the plugin by adding a line that indicates the plugin name and library
file name to the mysql.plugin system table. During the normal startup sequence, the server loads
and initializes plugins registered in mysql.plugin. This means that a plugin is installed with INSTALL
PLUGIN only once, not every time the server starts. If the server is started with the --skip-grant-
tables option, plugins registered in the mysql.plugin table are not loaded and are unavailable.
A plugin library can contain multiple plugins. For each of them to be installed, use a separate INSTALL
PLUGIN statement. Each statement names a different plugin, but all of them specify the same library
name.
INSTALL PLUGIN causes the server to read option (my.cnf) files just as during server startup. This
enables the plugin to pick up any relevant options from those files. It is possible to add plugin options
to an option file even before loading a plugin (if the loose prefix is used). It is also possible to uninstall
a plugin, edit my.cnf, and install the plugin again. Restarting the plugin this way enables it to the new
option values without a server restart.
For options that control individual plugin loading at server startup, see Section 7.6.1, “Installing and
Uninstalling Plugins”. If you need to load plugins for a single server startup when the --skip-grant-
tables option is given (which tells the server not to read system tables), use the --plugin-load
option. See Section 7.1.7, “Server Command Options”.
To remove a plugin, use the UNINSTALL PLUGIN statement.
For additional information about plugin loading, see Section 7.6.1, “Installing and Uninstalling Plugins”.
To see what plugins are installed, use the SHOW PLUGINS statement or query the
INFORMATION_SCHEMA the PLUGINS table.
If you recompile a plugin library and need to reinstall it, you can use either of the following methods:
• Use UNINSTALL PLUGIN to uninstall all plugins in the library, install the new plugin library file
in the plugin directory, and then use INSTALL PLUGIN to install all plugins in the library. This
procedure has the advantage that it can be used without stopping the server. However, if the plugin
library contains many plugins, you must issue many INSTALL PLUGIN and UNINSTALL PLUGIN
statements.
• Stop the server, install the new plugin library file in the plugin directory, and restart the server.
15.7.4.5 UNINSTALL COMPONENT Statement
UNINSTALL COMPONENT component_name [, component_name ] ...
This statement deactivates and uninstalls one or more components. A component provides services
that are available to the server and other components; see Section 7.5, “MySQL Components”.
UNINSTALL COMPONENT is the complement of INSTALL COMPONENT. It requires the DELETE
privilege for the mysql.component system table because it removes the row from that table that
registers the component. UNINSTALL COMPONENT does not undo persisted variables, including the
variables persisted using INSTALL COMPONENT ... SET PERSIST.
Example:
UNINSTALL COMPONENT 'file://component1', 'file://component2';
For information about component naming, see Section 15.7.4.3, “INSTALL COMPONENT Statement”.
If any error occurs, the statement fails and has no effect. For example, this happens if a component
name is erroneous, a named component is not installed, or cannot be uninstalled because other
installed components depend on it.
A loader service handles component unloading, which includes removing uninstalled components from
the mysql.component system table that serves as a registry. As a result, unloaded components are
not loaded during the startup sequence for subsequent server restarts.
Note
This statement has no effect for keyring components, which are loaded using
a manifest file and cannot be uninstalled. See Section 8.4.4.2, “Keyring
Component Installation”.
15.7.4.6 UNINSTALL PLUGIN Statement
UNINSTALL PLUGIN plugin_name
This statement removes an installed server plugin. UNINSTALL PLUGIN is the complement of
INSTALL PLUGIN. It requires the DELETE privilege for the mysql.plugin system table because it
removes the row from that table that registers the plugin.
plugin_name must be the name of some plugin that is listed in the mysql.plugin table. The
server executes the plugin's deinitialization function and removes the row for the plugin from the
mysql.plugin system table, so that subsequent server restarts do not load and initialize the plugin.
UNINSTALL PLUGIN does not remove the plugin's shared library file.
You cannot uninstall a plugin if any table that uses it is open.
Plugin removal has implications for the use of associated tables. For example, if a full-text parser plugin
is associated with a FULLTEXT index on the table, uninstalling the plugin makes the table unusable.
Any attempt to access the table results in an error. The table cannot even be opened, so you cannot
drop an index for which the plugin is used. This means that uninstalling a plugin is something to do with
care unless you do not care about the table contents. If you are uninstalling a plugin with no intention of
reinstalling it later and you care about the table contents, you should dump the table with mysqldump
and remove the WITH PARSER clause from the dumped CREATE TABLE statement so that you can
reload the table later. If you do not care about the table, DROP TABLE can be used even if any plugins
associated with the table are missing.
For additional information about plugin loading, see Section 7.6.1, “Installing and Uninstalling Plugins”.