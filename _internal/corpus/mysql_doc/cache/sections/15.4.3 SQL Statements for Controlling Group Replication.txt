15.4.3 SQL Statements for Controlling Group Replication
This section provides information about the statements used for controlling group replication.
15.4.3.1 START GROUP_REPLICATION Statement
  START GROUP_REPLICATION
          [USER='user_name']
          [, PASSWORD='user_pass']
          [, DEFAULT_AUTH='plugin_name']
Starts group replication. This statement requires the GROUP_REPLICATION_ADMIN privilege (or
the deprecated SUPER privilege). If super_read_only=ON is set and the member should join as a
primary, super_read_only is set to OFF once Group Replication successfully starts.
A server that participates in a group in single-primary mode should use skip_replica_start=ON.
Otherwise, the server is not allowed to join a group as a secondary.
You can specify user credentials for distributed recovery in the START GROUP_REPLICATION
statement using the USER, PASSWORD, and DEFAULT_AUTH options, as follows:
• USER: The replication user for distributed recovery. For instructions to set up this account, see
Section 20.2.1.3, “User Credentials For Distributed Recovery”. You cannot specify an empty or null
string, or omit the USER option if PASSWORD is specified.
• PASSWORD: The password for the replication user account. The password cannot be encrypted, but it
is masked in the query log.
• DEFAULT_AUTH: The name of the authentication plugin used for the replication user account. If you
do not specify this option, the caching_sha2_password plugin is assumed. This option acts as a
hint to the server, and the donor for distributed recovery overrides it if a different plugin is associated
with the user account on that server. The authentication plugin used by default when you create user
accounts in MySQL 9.1 is the caching SHA-2 authentication plugin (caching_sha2_password).
See Section 8.2.17, “Pluggable Authentication” for more information on authentication plugins.
These credentials are used for distributed recovery on the group_replication_recovery channel.
When you specify user credentials on START GROUP_REPLICATION, the credentials are saved in
memory only, and are removed by a STOP GROUP_REPLICATION statement or server shutdown. You
must issue a START GROUP_REPLICATION statement to provide the credentials again. This method is
therefore not compatible with starting Group Replication automatically on server start, as specified by
the group_replication_start_on_boot system variable.
User credentials specified on START GROUP_REPLICATION take precedence over any user
credentials set for the group_replication_recovery channel using a CHANGE REPLICATION
SOURCE TO. Note that user credentials set using these statements are stored in the replication
metadata repositories, and are used when START GROUP_REPLICATION is specified without
user credentials, including automatic starts if the group_replication_start_on_boot
system variable is set to ON. To gain the security benefits of specifying user credentials on START
GROUP_REPLICATION, ensure that group_replication_start_on_boot is set to OFF (the
default is ON), and clear any user credentials previously set for the group_replication_recovery
channel, following the instructions in Section 20.6.3, “Securing Distributed Recovery Connections”.
While a member is rejoining a replication group, its status can be displayed as OFFLINE or ERROR
before the group completes the compatibility checks and accepts it as a member. When the member is
catching up with the group's transactions, its status is RECOVERING.
15.4.3.2 STOP GROUP_REPLICATION Statement
STOP GROUP_REPLICATION
Stops Group Replication. This statement requires the GROUP_REPLICATION_ADMIN privilege (or
the deprecated SUPER privilege). As soon as you issue STOP GROUP_REPLICATION the member
is set to super_read_only=ON, which ensures that no writes can be made to the member while
Group Replication stops. Any other asynchronous replication channels running on the member are also
stopped. Any user credentials that you specified in the START GROUP_REPLICATION statement when
starting Group Replication on this member are removed from memory, and must be supplied when you
start Group Replication again.
Warning
Use this statement with extreme caution because it removes the server instance
from the group, meaning it is no longer protected by Group Replication's
consistency guarantee mechanisms. To be completely safe, ensure that your
applications can no longer connect to the instance before issuing this statement
to avoid any chance of stale reads.
The STOP GROUP_REPLICATION statement stops asynchronous replication channels on the
group member, but it does not implicitly commit transactions that are in progress on them like STOP
REPLICA does. This is because on a Group Replication group member, an additional transaction
committed during the shutdown operation would leave the member inconsistent with the group and
cause an issue with rejoining. To avoid failed commits for transactions that are in progress while
stopping Group Replication, the STOP GROUP_REPLICATION statement cannot be issued while a
GTID is assigned as the value of the gtid_next system variable.
The group_replication_components_stop_timeout system variable specifies the time for
which Group Replication waits for each of its modules to complete ongoing processes after this
statement is issued. The timeout is used to resolve situations in which Group Replication components
cannot be stopped normally, which can happen if the member is expelled from the group while it is
in an error state, or while a process such as MySQL Enterprise Backup is holding a global lock on
tables on the member. In such situations, the member cannot stop the applier thread or complete the
distributed recovery process to rejoin. STOP GROUP_REPLICATION does not complete until either the
situation is resolved (for example, by the lock being released), or the component timeout expires and
the modules are shut down regardless of their status. The default value is 300 seconds; this means
that Group Replication components are stopped after 5 minutes if the situation is not resolved before
that time, allowing the member to be restarted and rejoin.