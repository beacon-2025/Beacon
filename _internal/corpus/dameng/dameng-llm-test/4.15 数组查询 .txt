-- 创建一些必要的表和记录类型
CREATE TABLE SYSOBJECTS (
    id INT PRIMARY KEY,
    name VARCHAR(50)
);
INSERT INTO SYSOBJECTS (id, name) VALUES (1, 'SYSINDEXES');
INSERT INTO SYSOBJECTS (id, name) VALUES (2, 'SYSCOLUMNS');
SELECT * FROM ARRAY NEW INT[2]{1};
DECLARE
    TYPE rrr IS RECORD (x INT, y INT);
TYPE ccc IS ARRAY rrr[];
c ccc;
BEGIN
    c = NEW rrr[2];
FOR i IN 1..2 LOOP
        c[i].x = i;
c[i].y = i*2;
END LOOP;
SELECT arr.x, arr.y FROM ARRAY c arr;
END;
DECLARE
    TYPE rrr IS RECORD (x INT, y INT);
TYPE ccc IS ARRAY rrr[];
c ccc;
BEGIN
    c = NEW rrr[2];
FOR i IN 1..2 LOOP
        c[i].x = i;
c[i].y = i*2;
END LOOP;
SELECT arr.x, o.name FROM ARRAY c arr, SYSOBJECTS o WHERE arr.x = o.id;
END;
SELECT * FROM ARRAY NEW INT[0]{};
SELECT * FROM ARRAY NEW INT[3]{1, NULL, 3};
DECLARE
    TYPE rrr IS RECORD (x INT, y INT);
TYPE ccc IS ARRAY rrr[];
c ccc;
BEGIN
    c = NEW rrr[2];
FOR i IN 1..2 LOOP
        c[i].x = i;
c[i].y = i*2;
END LOOP;
SELECT arr.x FROM ARRAY c arr;
END;
DECLARE
    TYPE rrr IS RECORD (x INT, y INT);
TYPE ccc IS ARRAY rrr[];
c ccc;
BEGIN
    c = NEW rrr[2];
FOR i IN 1..2 LOOP
        c[i].x = i;
c[i].y = i*2;
END LOOP;
SELECT arr.x, arr.y FROM ARRAY c arr;
END;
SELECT * FROM ARRAY NEW INT[3]{1, 2, 3} WHERE COLUMN_VALUE > 1;
SELECT * FROM ARRAY NEW INT[3]{3, 1, 2} ORDER BY COLUMN_VALUE;
SELECT * FROM ARRAY NEW INT[3]{1, 2, 3} LIMIT 2;
SELECT COLUMN_VALUE, COUNT(*) FROM ARRAY NEW INT[3]{1, 1, 2} GROUP BY COLUMN_VALUE;
SELECT COLUMN_VALUE, COUNT(*) FROM ARRAY NEW INT[3]{1, 1, 2} GROUP BY COLUMN_VALUE HAVING COUNT(*) > 1;
SELECT DISTINCT COLUMN_VALUE FROM ARRAY NEW INT[3]{1, 1, 2};
SELECT * FROM ARRAY NEW INT[2]{1, 2}
UNION
SELECT * FROM ARRAY NEW INT[2]{2, 3};
SELECT * FROM ARRAY NEW INT[2]{1, 2}
UNION ALL
SELECT * FROM ARRAY NEW INT[2]{2, 3};
SELECT * FROM ARRAY NEW INT[2]{1, 2}
INTERSECT
SELECT * FROM ARRAY NEW INT[2]{2, 3};
SELECT * FROM ARRAY NEW INT[2]{1, 2}
EXCEPT
SELECT * FROM ARRAY NEW INT[2]{2, 3};
SELECT * FROM ARRAY NEW INT[3]{1, 2, 3} WHERE COLUMN_VALUE IN (SELECT COLUMN_VALUE FROM ARRAY NEW INT[2]{2, 3});
SELECT a.COLUMN_VALUE, b.COLUMN_VALUE 
FROM ARRAY NEW INT[2]{1, 2} a
JOIN ARRAY NEW INT[2]{2, 3} b ON a.COLUMN_VALUE = b.COLUMN_VALUE;
SELECT a.COLUMN_VALUE, b.COLUMN_VALUE 
FROM ARRAY NEW INT[2]{1, 2} a
LEFT JOIN ARRAY NEW INT[2]{2, 3} b ON a.COLUMN_VALUE = b.COLUMN_VALUE;
SELECT a.COLUMN_VALUE, b.COLUMN_VALUE 
FROM ARRAY NEW INT[2]{1, 2} a
RIGHT JOIN ARRAY NEW INT[2]{2, 3} b ON a.COLUMN_VALUE = b.COLUMN_VALUE;
SELECT a.COLUMN_VALUE, b.COLUMN_VALUE 
FROM ARRAY NEW INT[2]{1, 2} a
FULL JOIN ARRAY NEW INT[2]{2, 3} b ON a.COLUMN_VALUE = b.COLUMN_VALUE;
SELECT a.COLUMN_VALUE, b.COLUMN_VALUE 
FROM ARRAY NEW INT[2]{1, 2} a
CROSS JOIN ARRAY NEW INT[2]{2, 3} b;
SELECT CASE WHEN COLUMN_VALUE = 1 THEN 'One' ELSE 'Other' END AS ValueLabel 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT COALESCE(COLUMN_VALUE, 0) AS Value 
FROM ARRAY NEW INT[3]{1, NULL, 3};
SELECT NULLIF(COLUMN_VALUE, 2) AS Value 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT CAST(COLUMN_VALUE AS VARCHAR) AS Value 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT CONCAT('Value: ', CAST(COLUMN_VALUE AS VARCHAR)) AS ValueLabel 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT SUBSTRING(CAST(COLUMN_VALUE AS VARCHAR), 1, 1) AS FirstChar 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT LENGTH(CAST(COLUMN_VALUE AS VARCHAR)) AS ValueLength 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT TRIM(CAST(COLUMN_VALUE AS VARCHAR)) AS Value 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT UPPER(CAST(COLUMN_VALUE AS VARCHAR)) AS Value 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT LOWER(CAST(COLUMN_VALUE AS VARCHAR)) AS Value 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT ROUND(COLUMN_VALUE, 0) AS RoundedValue 
FROM ARRAY NEW FLOAT[3]{1.2, 2.5, 3.7};
SELECT CEIL(COLUMN_VALUE) AS CeiledValue 
FROM ARRAY NEW FLOAT[3]{1.2, 2.5, 3.7};
SELECT FLOOR(COLUMN_VALUE) AS FlooredValue 
FROM ARRAY NEW FLOAT[3]{1.2, 2.5, 3.7};
SELECT ABS(COLUMN_VALUE) AS AbsoluteValue 
FROM ARRAY NEW INT[3]{-1, 2, -3};
SELECT MOD(COLUMN_VALUE, 2) AS ModValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT POWER(COLUMN_VALUE, 2) AS PowerValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT SQRT(COLUMN_VALUE) AS SqrtValue 
FROM ARRAY NEW FLOAT[3]{1.0, 4.0, 9.0};
SELECT EXP(COLUMN_VALUE) AS ExpValue 
FROM ARRAY NEW FLOAT[3]{1.0, 2.0, 3.0};
SELECT LN(COLUMN_VALUE) AS LnValue 
FROM ARRAY NEW FLOAT[3]{1.0, 2.0, 3.0};
SELECT LOG10(COLUMN_VALUE) AS Log10Value 
FROM ARRAY NEW FLOAT[3]{1.0, 10.0, 100.0};
SELECT SIN(COLUMN_VALUE) AS SinValue 
FROM ARRAY NEW FLOAT[3]{0.0, 1.57, 3.14};
SELECT COS(COLUMN_VALUE) AS CosValue 
FROM ARRAY NEW FLOAT[3]{0.0, 1.57, 3.14};
SELECT TAN(COLUMN_VALUE) AS TanValue 
FROM ARRAY NEW FLOAT[3]{0.0, 1.57, 3.14};
SELECT ASIN(COLUMN_VALUE) AS AsinValue 
FROM ARRAY NEW FLOAT[3]{0.0, 0.5, 1.0};
SELECT ACOS(COLUMN_VALUE) AS AcosValue 
FROM ARRAY NEW FLOAT[3]{0.0, 0.5, 1.0};
SELECT ATAN(COLUMN_VALUE) AS AtanValue 
FROM ARRAY NEW FLOAT[3]{0.0, 0.5, 1.0};
SELECT ATAN2(COLUMN_VALUE, 1) AS Atan2Value 
FROM ARRAY NEW FLOAT[3]{0.0, 0.5, 1.0};
SELECT RAND() AS RandomValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT PI() AS PiValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT DEGREES(COLUMN_VALUE) AS DegreesValue 
FROM ARRAY NEW FLOAT[3]{0.0, 1.57, 3.14};
SELECT RADIANS(COLUMN_VALUE) AS RadiansValue 
FROM ARRAY NEW FLOAT[3]{0.0, 90.0, 180.0};
SELECT GREATEST(COLUMN_VALUE, 2) AS GreatestValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT LEAST(COLUMN_VALUE, 2) AS LeastValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT IFNULL(COLUMN_VALUE, 0) AS Value 
FROM ARRAY NEW INT[3]{1, NULL, 3};
SELECT IF(COLUMN_VALUE > 1, 'Greater', 'LessOrEqual') AS ValueLabel 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT CASE WHEN COLUMN_VALUE > 1 THEN 'Greater' ELSE 'LessOrEqual' END AS ValueLabel 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT CONCAT_WS('-', CAST(COLUMN_VALUE AS VARCHAR), 'Value') AS ValueLabel 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT REPLACE(CAST(COLUMN_VALUE AS VARCHAR), '1', 'One') AS ValueLabel 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT REVERSE(CAST(COLUMN_VALUE AS VARCHAR)) AS ReversedValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT CHAR_LENGTH(CAST(COLUMN_VALUE AS VARCHAR)) AS CharLength 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT POSITION('2' IN CAST(COLUMN_VALUE AS VARCHAR)) AS Position 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT LOCATE('2', CAST(COLUMN_VALUE AS VARCHAR)) AS LocatePosition 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT INSTR(CAST(COLUMN_VALUE AS VARCHAR), '2') AS InstrPosition 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT LPAD(CAST(COLUMN_VALUE AS VARCHAR), 5, '0') AS PaddedValue 
FROM ARRAY NEW INT[3]{1, 2, 3};
SELECT RPAD(CAST(COLUMN_VALUE AS VARCHAR), 5, '0') AS PaddedValue 
FROM ARRAY NEW INT[3]{1, 2, 3}