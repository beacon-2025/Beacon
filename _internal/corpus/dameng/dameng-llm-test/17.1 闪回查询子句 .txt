-- 创建PERSON_TYPE表
CREATE TABLE PERSON.PERSON_TYPE (
    PERSON_TYPEID INT PRIMARY KEY,
    NAME VARCHAR(50)
);
-- 插入初始数据
INSERT INTO PERSON.PERSON_TYPE (PERSON_TYPEID, NAME) VALUES (1, '采购经理');
INSERT INTO PERSON.PERSON_TYPE (PERSON_TYPEID, NAME) VALUES (2, '采购代表');
INSERT INTO PERSON.PERSON_TYPE (PERSON_TYPEID, NAME) VALUES (3, '销售经理');
INSERT INTO PERSON.PERSON_TYPE (PERSON_TYPEID, NAME) VALUES (4, '销售代表');
COMMIT;
-- 插入新数据
INSERT INTO PERSON.PERSON_TYPE (PERSON_TYPEID, NAME) VALUES (5, '防损员');
INSERT INTO PERSON.PERSON_TYPE (PERSON_TYPEID, NAME) VALUES (6, '保洁员');
COMMIT;
-- 闪回查询特定时刻的数据
SELECT * FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 删除数据
DELETE FROM PERSON.PERSON_TYPE WHERE PERSON_TYPEID > 5;
COMMIT;
-- 闪回查询删除前的数据
SELECT * FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:23:00';
-- 修改数据
UPDATE PERSON.PERSON_TYPE SET NAME='保安员' WHERE PERSON_TYPEID=5;
COMMIT;
UPDATE PERSON.PERSON_TYPE SET NAME='收银员' WHERE PERSON_TYPEID=5;
COMMIT;
-- 进行闪回版本查询，确定TRXID
SELECT VERSIONS_ENDTRXID, NAME FROM PERSON.PERSON_TYPE VERSIONS BETWEEN TIMESTAMP '2012-01-01 12:24:00' AND SYSDATE;
-- 根据TRXID确定版本
SELECT * FROM PERSON.PERSON_TYPE WHEN TRXID 322;
-- 创建加密表
CREATE TABLE PERSON.ENCRYPTED_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
) ENCRYPTED;
-- 插入数据
INSERT INTO PERSON.ENCRYPTED_TABLE (ID, DATA) VALUES (1, '加密数据1');
INSERT INTO PERSON.ENCRYPTED_TABLE (ID, DATA) VALUES (2, '加密数据2');
COMMIT;
-- 闪回查询加密表的数据
SELECT * FROM PERSON.ENCRYPTED_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建临时表
CREATE TEMPORARY TABLE PERSON.TEMP_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
);
-- 插入数据
INSERT INTO PERSON.TEMP_TABLE (ID, DATA) VALUES (1, '临时数据1');
INSERT INTO PERSON.TEMP_TABLE (ID, DATA) VALUES (2, '临时数据2');
COMMIT;
-- 闪回查询临时表的数据
SELECT * FROM PERSON.TEMP_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建堆表
CREATE TABLE PERSON.HEAP_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
) ORGANIZATION HEAP;
-- 插入数据
INSERT INTO PERSON.HEAP_TABLE (ID, DATA) VALUES (1, '堆表数据1');
INSERT INTO PERSON.HEAP_TABLE (ID, DATA) VALUES (2, '堆表数据2');
COMMIT;
-- 闪回查询堆表的数据
SELECT * FROM PERSON.HEAP_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建压缩表
CREATE TABLE PERSON.COMPRESSED_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
) COMPRESS;
-- 插入数据
INSERT INTO PERSON.COMPRESSED_TABLE (ID, DATA) VALUES (1, '压缩数据1');
INSERT INTO PERSON.COMPRESSED_TABLE (ID, DATA) VALUES (2, '压缩数据2');
COMMIT;
-- 闪回查询压缩表的数据
SELECT * FROM PERSON.COMPRESSED_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建水平分区表
CREATE TABLE PERSON.PARTITIONED_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
) PARTITION BY RANGE (ID) (
    PARTITION P1 VALUES LESS THAN (100),
    PARTITION P2 VALUES LESS THAN (200)
);
-- 插入数据
INSERT INTO PERSON.PARTITIONED_TABLE (ID, DATA) VALUES (1, '分区数据1');
INSERT INTO PERSON.PARTITIONED_TABLE (ID, DATA) VALUES (101, '分区数据2');
COMMIT;
-- 尝试闪回查询水平分区表的数据（应不支持）
SELECT * FROM PERSON.PARTITIONED_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建列存储表
CREATE TABLE PERSON.COLUMN_STORE_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
) COLUMN STORE;
-- 插入数据
INSERT INTO PERSON.COLUMN_STORE_TABLE (ID, DATA) VALUES (1, '列存储数据1');
INSERT INTO PERSON.COLUMN_STORE_TABLE (ID, DATA) VALUES (2, '列存储数据2');
COMMIT;
-- 尝试闪回查询列存储表的数据（应不支持）
SELECT * FROM PERSON.COLUMN_STORE_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建外部表
CREATE EXTERNAL TABLE PERSON.EXTERNAL_TABLE (
    ID INT PRIMARY KEY,
    DATA VARCHAR(100)
) LOCATION '/path/to/external/table';
-- 插入数据（外部表通常不支持直接插入数据）
-- 尝试闪回查询外部表的数据（应不支持）
SELECT * FROM PERSON.EXTERNAL_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建视图
CREATE VIEW PERSON.VIEW_TABLE AS SELECT * FROM PERSON.PERSON_TYPE;
-- 尝试闪回查询视图的数据（应不支持）
SELECT * FROM PERSON.VIEW_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 创建另一个表
CREATE TABLE PERSON.OTHER_TABLE (
    ID INT PRIMARY KEY,
    DESCRIPTION VARCHAR(100)
);
-- 插入数据
INSERT INTO PERSON.OTHER_TABLE (ID, DESCRIPTION) VALUES (1, '描述1');
INSERT INTO PERSON.OTHER_TABLE (ID, DESCRIPTION) VALUES (2, '描述2');
COMMIT;
-- 闪回查询多个表的联合查询
SELECT * FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45'
UNION ALL
SELECT * FROM PERSON.OTHER_TABLE WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 闪回查询带有WHERE子句的查询
SELECT * FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45' WHERE PERSON_TYPEID = 1;
-- 闪回查询带有ORDER BY子句的查询
SELECT * FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45' ORDER BY PERSON_TYPEID DESC;
-- 闪回查询带有LIMIT子句的查询
SELECT * FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45' LIMIT 2;
-- 闪回查询带有GROUP BY子句的查询
SELECT NAME, COUNT(*) FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45' GROUP BY NAME;
-- 闪回查询带有HAVING子句的查询
SELECT NAME, COUNT(*) FROM PERSON.PERSON_TYPE WHEN TIMESTAMP '2012-01-01 12:22:45' GROUP BY NAME HAVING COUNT(*) > 1;
-- 闪回查询带有JOIN子句的查询
SELECT PT.NAME, OT.DESCRIPTION 
FROM PERSON.PERSON_TYPE PT 
JOIN PERSON.OTHER_TABLE OT ON PT.PERSON_TYPEID = OT.ID 
WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 闪回查询带有子查询的查询
SELECT * FROM PERSON.PERSON_TYPE 
WHERE PERSON_TYPEID IN (SELECT ID FROM PERSON.OTHER_TABLE) 
WHEN TIMESTAMP '2012-01-01 12:22:45';
-- 闪回查询带有CASE表达式的查询
SELECT PERSON_TYPEID, 
       CASE 
           WHEN NAME = '采购经理' THEN '经理' 
           ELSE '其他' 
       END AS ROLE 
FROM PERSON.PERSON_TYPE 
WHEN TIMESTAMP '2012-01-01 12:22:45'