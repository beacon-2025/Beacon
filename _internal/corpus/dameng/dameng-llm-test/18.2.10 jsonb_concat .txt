-- 创建测试表
CREATE TABLE test_table1 (
    id INT PRIMARY KEY,
    json_data1 VARCHAR(255),
    json_data2 CLOB
);
-- 插入测试数据
INSERT INTO test_table1 (id, json_data1, json_data2) VALUES (1, '{"a": 1}', '{"b": 2}');
INSERT INTO test_table1 (id, json_data1, json_data2) VALUES (2, '[1, 2]', '[3, 4]');
INSERT INTO test_table1 (id, json_data1, json_data2) VALUES (3, '1', '"abc"');
INSERT INTO test_table1 (id, json_data1, json_data2) VALUES (4, '{"c": 3}', '[5, 6]');
INSERT INTO test_table1 (id, json_data1, json_data2) VALUES (5, '1', '{"d": 4}');
-- 测试用例 1: 参数<JSONB_exp1>为NULL时，返回NULL
SELECT jsonb_concat(NULL, '1');
-- 测试用例 2: 标量类型数据与标量类型数据的合并结果类型为array
SELECT jsonb_concat('1', '"abc"');
-- 测试用例 3: 不支持标量类型数据与object类型数据进行合并
SELECT jsonb_concat('1', '{"b": 2}');
-- 测试用例 4: object类型数据与object类型数据的合并结果类型为object
SELECT jsonb_concat('{"a": 1}', '{"b": 2}');
-- 测试用例 5: array类型数据与array类型数据的合并结果类型为array
SELECT jsonb_concat('[1, 2]', '[3, 4]');
-- 测试用例 6: object类型数据与array类型数据的合并结果类型为array
SELECT jsonb_concat('{"c": 3}', '[5, 6]');
-- 测试用例 7: 标量类型数据与array类型数据的合并结果类型为array
SELECT jsonb_concat('1', '[3, 4]');
-- 测试用例 8: jsonb_concat函数与jsonb_object_agg函数配合使用
SELECT jsonb_object_agg('a', jsonb_concat('1', '2'));
-- 测试用例 9: 普通字符串作为jsonb_object_agg函数的参数
SELECT jsonb_object_agg('a', '[1, 2]');
-- 测试用例 10: 使用表中的数据进行jsonb_concat操作
SELECT jsonb_concat(json_data1, json_data2) FROM test_table1 WHERE id = 1;
-- 测试用例 11: 使用表中的数据进行jsonb_concat操作，结果为array
SELECT jsonb_concat(json_data1, json_data2) FROM test_table1 WHERE id = 2;
-- 测试用例 12: 使用表中的数据进行jsonb_concat操作，结果为array
SELECT jsonb_concat(json_data1, json_data2) FROM test_table1 WHERE id = 3;
-- 测试用例 13: 使用表中的数据进行jsonb_concat操作，结果为array
SELECT jsonb_concat(json_data1, json_data2) FROM test_table1 WHERE id = 4;
-- 测试用例 14: 使用表中的数据进行jsonb_concat操作，结果为object
SELECT jsonb_concat(json_data1, json_data2) FROM test_table1 WHERE id = 5