-- 创建模式
CREATE SCHEMA TEST_SCHEMA;
-- 创建基表
CREATE TABLE TEST_SCHEMA.TEST_TABLE_1 (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    AGE INT,
    SALARY DECIMAL(10, 2)
);
CREATE TABLE TEST_SCHEMA.TEST_TABLE_2 (
    ID INT PRIMARY KEY,
    DESCRIPTION VARCHAR(100)
);
-- 创建视图
CREATE VIEW TEST_SCHEMA.TEST_VIEW AS SELECT * FROM TEST_SCHEMA.TEST_TABLE_1;
-- 创建 BEFORE INSERT 行级触发器
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_BEFORE_INSERT_ROW
BEFORE INSERT ON TEST_SCHEMA.TEST_TABLE_1
FOR EACH ROW
BEGIN
    :NEW.SALARY := :NEW.SALARY * 1.1;
-- 插入前将薪水增加10%
END;
-- 插入数据以触发触发器
INSERT INTO TEST_SCHEMA.TEST_TABLE_1 (ID, NAME, AGE, SALARY) VALUES (1, 'Alice', 30, 5000.00);
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_1;
-- 创建 AFTER INSERT 语句级触发器
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_AFTER_INSERT_STATEMENT
AFTER INSERT ON TEST_SCHEMA.TEST_TABLE_1
BEGIN
    INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (1, 'New row inserted in TEST_TABLE_1');
END;
-- 插入数据以触发触发器
INSERT INTO TEST_SCHEMA.TEST_TABLE_1 (ID, NAME, AGE, SALARY) VALUES (2, 'Bob', 25, 6000.00);
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_2;
-- 创建 BEFORE UPDATE 行级触发器
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_BEFORE_UPDATE_ROW
BEFORE UPDATE ON TEST_SCHEMA.TEST_TABLE_1
FOR EACH ROW
BEGIN
    :NEW.SALARY := :OLD.SALARY + 1000;
-- 更新前将薪水增加1000
END;
-- 更新数据以触发触发器
UPDATE TEST_SCHEMA.TEST_TABLE_1 SET SALARY = 7000.00 WHERE ID = 1;
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_1;
-- 创建 AFTER UPDATE 语句级触发器
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_AFTER_UPDATE_STATEMENT
AFTER UPDATE ON TEST_SCHEMA.TEST_TABLE_1
BEGIN
    INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (2, 'Row updated in TEST_TABLE_1');
END;
-- 更新数据以触发触发器
UPDATE TEST_SCHEMA.TEST_TABLE_1 SET SALARY = 8000.00 WHERE ID = 2;
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_2;
-- 创建 INSTEAD OF 触发器
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_INSTEAD_OF_UPDATE
INSTEAD OF UPDATE ON TEST_SCHEMA.TEST_VIEW
FOR EACH ROW
BEGIN
    INSERT INTO TEST_SCHEMA.TEST_TABLE_1 (ID, NAME, AGE, SALARY) VALUES (:NEW.ID, :NEW.NAME, :NEW.AGE, :NEW.SALARY);
END;
-- 更新视图以触发触发器
UPDATE TEST_SCHEMA.TEST_VIEW SET SALARY = 9000.00 WHERE ID = 1;
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_1;
-- 创建触发器使用 WHEN 子句
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_WHEN_CONDITION
BEFORE INSERT ON TEST_SCHEMA.TEST_TABLE_1
FOR EACH ROW
WHEN (NEW.AGE > 30)
BEGIN
    :NEW.SALARY := :NEW.SALARY * 1.2;
-- 如果年龄大于30，薪水增加20%
END;
-- 插入数据以触发触发器
INSERT INTO TEST_SCHEMA.TEST_TABLE_1 (ID, NAME, AGE, SALARY) VALUES (3, 'Charlie', 35, 4000.00);
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_1;
-- 创建触发器使用 REFERENCING 子句
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_REFERENCING
BEFORE UPDATE ON TEST_SCHEMA.TEST_TABLE_1
REFERENCING OLD AS OLD_ROW NEW AS NEW_ROW
FOR EACH ROW
BEGIN
    :NEW_ROW.SALARY := :OLD_ROW.SALARY + 500;
-- 更新前将薪水增加500
END;
-- 更新数据以触发触发器
UPDATE TEST_SCHEMA.TEST_TABLE_1 SET SALARY = 8500.00 WHERE ID = 2;
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_1;
-- 创建触发器使用触发器谓词
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_PREDICATE
AFTER INSERT OR UPDATE OR DELETE ON TEST_SCHEMA.TEST_TABLE_1
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (3, 'Insert operation on TEST_TABLE_1');
ELSIF UPDATING THEN
        INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (4, 'Update operation on TEST_TABLE_1');
ELSIF DELETING THEN
        INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (5, 'Delete operation on TEST_TABLE_1');
END IF;
END;
-- 插入数据以触发触发器
INSERT INTO TEST_SCHEMA.TEST_TABLE_1 (ID, NAME, AGE, SALARY) VALUES (4, 'David', 40, 10000.00);
-- 更新数据以触发触发器
UPDATE TEST_SCHEMA.TEST_TABLE_1 SET SALARY = 11000.00 WHERE ID = 4;
-- 删除数据以触发触发器
DELETE FROM TEST_SCHEMA.TEST_TABLE_1 WHERE ID = 4;
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_2;
-- 创建触发器使用 LOCAL 选项
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_LOCAL
AFTER INSERT ON TEST_SCHEMA.TEST_TABLE_1
LOCAL
BEGIN
    INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (6, 'Local trigger fired');
END;
-- 插入数据以触发触发器
INSERT INTO TEST_SCHEMA.TEST_TABLE_1 (ID, NAME, AGE, SALARY) VALUES (5, 'Eve', 28, 5500.00);
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_2;
-- 创建触发器使用 WITH ENCRYPTION 选项
CREATE OR REPLACE TRIGGER TEST_SCHEMA.TRG_ENCRYPTED
AFTER DELETE ON TEST_SCHEMA.TEST_TABLE_1
WITH ENCRYPTION
BEGIN
    INSERT INTO TEST_SCHEMA.TEST_TABLE_2 (ID, DESCRIPTION) VALUES (7, 'Encrypted trigger fired');
END;
-- 删除数据以触发触发器
DELETE FROM TEST_SCHEMA.TEST_TABLE_1 WHERE ID = 5;
-- 查询结果
SELECT * FROM TEST_SCHEMA.TEST_TABLE_2