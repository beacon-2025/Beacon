title,text
3.1 数据库修改语句 ,"```plaintext
ALTER_DATABASE -> 'ALTER' 'DATABASE' MODIFY_DATABASE_STATEMENT
MODIFY_DATABASE_STATEMENT -> RESIZE_LOGFILE | ADD_LOGFILE | ADD_NODE_LOGFILE | RENAME_LOGFILE | MOUNT | SUSPEND | OPEN | NORMAL | PRIMARY | STANDBY | ARCHIVELOG | NOARCHIVELOG | ARCHIVE_CONFIG | ARCHIVELOG_CURRENT
RESIZE_LOGFILE -> 'RESIZE' 'LOGFILE' FILE_PATH 'TO' FILE_SIZE
ADD_LOGFILE -> 'ADD' 'LOGFILE' FILE_ITEM
ADD_NODE_LOGFILE -> 'ADD' 'NODE' 'LOGFILE' FILE_ITEM ',' FILE_ITEM
RENAME_LOGFILE -> 'RENAME' 'LOGFILE' FILE_PATH ',' FILE_PATH 'TO' FILE_PATH ',' FILE_PATH
MOUNT -> 'MOUNT'
SUSPEND -> 'SUSPEND'
OPEN -> 'OPEN' FORCE_OPTION
FORCE_OPTION -> 'FORCE' | ''
NORMAL -> 'NORMAL'
PRIMARY -> 'PRIMARY'
STANDBY -> 'STANDBY'
ARCHIVELOG -> 'ARCHIVELOG'
NOARCHIVELOG -> 'NOARCHIVELOG'
ARCHIVE_CONFIG -> ADD_ARCHIVE | MODIFY_ARCHIVE | DELETE_ARCHIVE
ADD_ARCHIVE -> 'ADD' 'ARCHIVELOG' ARCHIVE_CONFIG_STATEMENT
MODIFY_ARCHIVE -> 'MODIFY' 'ARCHIVELOG' ARCHIVE_CONFIG_STATEMENT
DELETE_ARCHIVE -> 'DELETE' 'ARCHIVELOG' ARCHIVE_CONFIG_STATEMENT
ARCHIVELOG_CURRENT -> 'ARCHIVELOG' 'CURRENT'
FILE_ITEM -> FILE_PATH 'SIZE' FILE_SIZE
ARCHIVE_CONFIG_STATEMENT -> 'DEST' '=' ARCHIVE_DEST ',' 'TYPE' '=' ARCHIVE_TYPE
ARCHIVE_TYPE -> LOCAL_ARCHIVE | REALTIME_ARCHIVE | ASYNC_ARCHIVE | REMOTE_ARCHIVE | TIMELY_ARCHIVE
LOCAL_ARCHIVE -> 'LOCAL' FILE_SPACE_LIMIT ARCH_FLUSH_BUF_SIZE HANG_FLAG
REALTIME_ARCHIVE -> 'REALTIME'
ASYNC_ARCHIVE -> 'ASYNC' 'TIMER_NAME' '=' TIMER_NAME ARCH_SEND_DELAY
REMOTE_ARCHIVE -> 'REMOTE' 'INCOMING_PATH' '=' REMOTE_ARCHIVE_PATH FILE_SPACE_LIMIT ARCH_FLUSH_BUF_SIZE
TIMELY_ARCHIVE -> 'TIMELY'
FILE_SPACE_LIMIT -> 'FILE_SIZE' '=' FILE_SIZE 'SPACE_LIMIT' '=' SPACE_LIMIT
ARCH_FLUSH_BUF_SIZE -> 'ARCH_FLUSH_BUF_SIZE' '=' BUF_SIZE
HANG_FLAG -> 'HANG_FLAG' '=' HANG_FLAG_VALUE
ARCH_SEND_DELAY -> 'ARCH_SEND_DELAY' '=' SEND_TIME
FILE_PATH -> 'file_path_value'
FILE_SIZE -> 'file_size_value'
ARCHIVE_DEST -> 'archive_dest_value'
TIMER_NAME -> 'timer_name_value'
REMOTE_ARCHIVE_PATH -> 'remote_archive_path_value'
BUF_SIZE -> 'buf_size_value'
HANG_FLAG_VALUE -> '0' | '1'
SEND_TIME -> 'send_time_value'
SPACE_LIMIT -> 'space_limit_value'
```"
3.2管理用户 ,"```text
S -> MANAGE_USER
MANAGE_USER -> '3.2' '管理用户'
```"
3.2.1 用户定义语句 ,"```plaintext
CREATE_USER -> 'CREATE' 'USER' 'user_name_1' 'IDENTIFIED' AUTH_MODE PASSWORD_POLICY_OPTION LOCK_CLAUSE ENCRYPT_KEY_CLAUSE SPACE_LIMIT_CLAUSE READ_ONLY_CLAUSE RESOURCE_LIMIT_CLAUSE ALLOW_IP_CLAUSE NOT_ALLOW_IP_CLAUSE ALLOW_TIME_CLAUSE NOT_ALLOW_TIME_CLAUSE TABLESPACE_CLAUSE INDEX_TABLESPACE_CLAUSE
AUTH_MODE -> DATABASE_AUTH_MODE | EXTERNAL_AUTH_MODE
DATABASE_AUTH_MODE -> 'BY' 'password_value' HASH_OPTION
HASH_OPTION -> 'HASH' 'WITH' 'hash_algorithm_value' SALT_OPTION
SALT_OPTION -> 'NO' 'SALT' | ''
HASH_ALGORITHM -> 'MD5' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512'
EXTERNAL_AUTH_MODE -> 'EXTERNALLY' | 'EXTERNALLY' 'AS' 'user_DN_value'
PASSWORD_POLICY_OPTION -> 'PASSWORD_POLICY' 'password_policy_value' | ''
LOCK_CLAUSE -> 'ACCOUNT' 'LOCK' | 'ACCOUNT' 'UNLOCK' | ''
ENCRYPT_KEY_CLAUSE -> 'ENCRYPT' 'BY' 'password_value' | ''
SPACE_LIMIT_CLAUSE -> 'DISKSPACE' 'LIMIT' 'space_size_value' | 'DISKSPACE' 'UNLIMITED' | ''
READ_ONLY_CLAUSE -> 'READ' 'ONLY' | 'NOT' 'READ' 'ONLY' | ''
RESOURCE_LIMIT_CLAUSE -> 'DROP' 'PROFILE' | 'PROFILE' 'profile_name_1' | 'LIMIT' RESOURCE_SETTINGS | ''
RESOURCE_SETTINGS -> RESOURCE_SETTING | RESOURCE_SETTING ',' RESOURCE_SETTING
RESOURCE_SETTING -> 'SESSION_PER_USER' PARAMETER_SETTING | 'CONNECT_IDLE_TIME' PARAMETER_SETTING | 'CONNECT_TIME' PARAMETER_SETTING | 'CPU_PER_CALL' PARAMETER_SETTING | 'CPU_PER_SESSION' PARAMETER_SETTING | 'MEM_SPACE' PARAMETER_SETTING | 'READ_PER_CALL' PARAMETER_SETTING | 'READ_PER_SESSION' PARAMETER_SETTING | 'FAILED_LOGIN_ATTEMPS' PARAMETER_SETTING | 'PASSWORD_LIFE_TIME' PARAMETER_SETTING | 'PASSWORD_REUSE_TIME' PARAMETER_SETTING | 'PASSWORD_REUSE_MAX' PARAMETER_SETTING | 'PASSWORD_LOCK_TIME' PARAMETER_SETTING | 'PASSWORD_GRACE_TIME' PARAMETER_SETTING
PARAMETER_SETTING -> 'parameter_value' | 'UNLIMITED' | 'DEFAULT'
ALLOW_IP_CLAUSE -> 'ALLOW_IP' IP_ITEM | ''
NOT_ALLOW_IP_CLAUSE -> 'NOT_ALLOW_IP' IP_ITEM | ''
IP_ITEM -> 'ip_value' | 'network_segment_value'
ALLOW_TIME_CLAUSE -> 'ALLOW_DATETIME' TIME_ITEM | ''
NOT_ALLOW_TIME_CLAUSE -> 'NOT_ALLOW_DATETIME' TIME_ITEM | ''
TIME_ITEM -> 'specific_time_value' | 'rule_time_value'
SPECIFIC_TIME_VALUE -> 'specific_date_value' 'specific_time_value' 'TO' 'specific_date_value' 'specific_time_value'
RULE_TIME_VALUE -> 'rule_time_flag_value' 'specific_time_value' 'TO' 'rule_time_flag_value' 'specific_time_value'
RULE_TIME_FLAG_VALUE -> 'MON' | 'TUE' | 'WED' | 'THURS' | 'FRI' | 'SAT' | 'SUN'
TABLESPACE_CLAUSE -> 'DEFAULT' 'TABLESPACE' 'tablespace_name_1' | ''
INDEX_TABLESPACE_CLAUSE -> 'DEFAULT' 'INDEX' 'TABLESPACE' 'tablespace_name_1' | ''
```"
3.2.2 修改用户语句 ,"```plaintext
ALTER_USER -> 'ALTER' 'USER' 'user_name_1' USER_OPTIONS
USER_OPTIONS -> IDENTIFIED_CLAUSE PASSWORD_POLICY_CLAUSE LOCK_CLAUSE ENCRYPT_CLAUSE DISKSPACE_CLAUSE READONLY_CLAUSE RESOURCE_LIMIT_CLAUSE ALLOW_IP_CLAUSE NOT_ALLOW_IP_CLAUSE ALLOW_TIME_CLAUSE NOT_ALLOW_TIME_CLAUSE TABLESPACE_CLAUSE INDEX_TABLESPACE_CLAUSE SCHEMA_CLAUSE | USER_AGENT_CLAUSE
IDENTIFIED_CLAUSE -> 'IDENTIFIED' AUTHENTICATION_MODE | ''
AUTHENTICATION_MODE -> DATABASE_AUTHENTICATION | EXTERNAL_AUTHENTICATION
DATABASE_AUTHENTICATION -> 'BY' 'password_value' HASH_OPTION
HASH_OPTION -> 'HASH' 'WITH' 'engine_name_1' '.' HASH_ALGORITHM SALT_OPTION | ''
HASH_ALGORITHM -> 'MD5' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512'
SALT_OPTION -> 'SALT' | 'NO' 'SALT' | ''
EXTERNAL_AUTHENTICATION -> 'EXTERNALLY' | 'EXTERNALLY' 'AS' 'user_dn_value'
PASSWORD_POLICY_CLAUSE -> 'PASSWORD_POLICY' 'policy_option' | ''
LOCK_CLAUSE -> 'ACCOUNT' 'LOCK' | 'ACCOUNT' 'UNLOCK' | ''
ENCRYPT_CLAUSE -> 'ENCRYPT' 'BY' 'password_value' | ''
DISKSPACE_CLAUSE -> 'DISKSPACE' 'LIMIT' 'size_value' | 'DISKSPACE' 'UNLIMITED' | ''
READONLY_CLAUSE -> 'READ' 'ONLY' | 'NOT' 'READ' 'ONLY' | ''
RESOURCE_LIMIT_CLAUSE -> 'LIMIT' 'resource_option' | ''
ALLOW_IP_CLAUSE -> 'ALLOW_IP' IP_ITEM | ''
NOT_ALLOW_IP_CLAUSE -> 'NOT_ALLOW_IP' IP_ITEM | ''
IP_ITEM -> 'ip_value' | 'network_value'
ALLOW_TIME_CLAUSE -> 'ALLOW_DATETIME' TIME_ITEM | ''
NOT_ALLOW_TIME_CLAUSE -> 'NOT_ALLOW_DATETIME' TIME_ITEM | ''
TIME_ITEM -> SPECIFIC_TIME | RULE_TIME
SPECIFIC_TIME -> 'date_value' 'time_value' 'TO' 'date_value' 'time_value'
RULE_TIME -> RULE_FLAG 'time_value' 'TO' RULE_FLAG 'time_value'
RULE_FLAG -> 'MON' | 'TUE' | 'WED' | 'THURS' | 'FRI' | 'SAT' | 'SUN'
TABLESPACE_CLAUSE -> 'DEFAULT' 'TABLESPACE' 'tablespace_name_1' | ''
INDEX_TABLESPACE_CLAUSE -> 'DEFAULT' 'INDEX' 'TABLESPACE' 'tablespace_name_1' | ''
SCHEMA_CLAUSE -> 'ON' 'SCHEMA' 'schema_name_1' | ''
USER_AGENT_CLAUSE -> 'GRANT' | 'REVOKE' 'CONNECT' 'THROUGH' 'proxy_user_name_1'
```"
3.2.3 用户删除语句 ,"```plaintext
DROP_USER -> 'DROP' 'USER' IF_EXISTS USER_NAME DROP_OPTION
IF_EXISTS -> 'IF EXISTS' | ''
USER_NAME -> 'username_1'
DROP_OPTION -> 'RESTRICT' | 'CASCADE' | ''
```"
3.3 管理模式 ,"```text
管理模式 -> '管理模式'
```"
3.3.1 模式定义语句 ,"```plaintext
S -> SCHEMA_DEFINITION_1 | SCHEMA_DEFINITION_2
SCHEMA_DEFINITION_1 -> 'CREATE' 'SCHEMA' 'schema_name_1' AUTHORIZATION_OPTION DDL_GRANT_CLAUSE
SCHEMA_DEFINITION_2 -> 'CREATE' 'SCHEMA' 'AUTHORIZATION' 'user_name_1' DDL_GRANT_CLAUSE
AUTHORIZATION_OPTION -> 'AUTHORIZATION' 'user_name_1' | ''
DDL_GRANT_CLAUSE -> BASE_TABLE_DEFINITION | DOMAIN_DEFINITION | BASE_TABLE_MODIFICATION | INDEX_DEFINITION | VIEW_DEFINITION | SEQUENCE_DEFINITION | STORED_PROCEDURE_DEFINITION | STORED_FUNCTION_DEFINITION | TRIGGER_DEFINITION | PRIVILEGE_DEFINITION | FULLTEXT_INDEX_DEFINITION | SYNONYM_DEFINITION | PACKAGE_DEFINITION | PACKAGE_BODY_DEFINITION | CLASS_DEFINITION | CLASS_BODY_DEFINITION | EXTERNAL_LINK_DEFINITION | MATERIALIZED_VIEW_DEFINITION | MATERIALIZED_VIEW_LOG_DEFINITION | COMMENT_DEFINITION
BASE_TABLE_DEFINITION -> 'base_table_definition'
DOMAIN_DEFINITION -> 'domain_definition'
BASE_TABLE_MODIFICATION -> 'base_table_modification'
INDEX_DEFINITION -> 'index_definition'
VIEW_DEFINITION -> 'view_definition'
SEQUENCE_DEFINITION -> 'sequence_definition'
STORED_PROCEDURE_DEFINITION -> 'stored_procedure_definition'
STORED_FUNCTION_DEFINITION -> 'stored_function_definition'
TRIGGER_DEFINITION -> 'trigger_definition'
PRIVILEGE_DEFINITION -> 'privilege_definition'
FULLTEXT_INDEX_DEFINITION -> 'fulltext_index_definition'
SYNONYM_DEFINITION -> 'synonym_definition'
PACKAGE_DEFINITION -> 'package_definition'
PACKAGE_BODY_DEFINITION -> 'package_body_definition'
CLASS_DEFINITION -> 'class_definition'
CLASS_BODY_DEFINITION -> 'class_body_definition'
EXTERNAL_LINK_DEFINITION -> 'external_link_definition'
MATERIALIZED_VIEW_DEFINITION -> 'materialized_view_definition'
MATERIALIZED_VIEW_LOG_DEFINITION -> 'materialized_view_log_definition'
COMMENT_DEFINITION -> 'comment_definition'
```"
3.3.2 设置当前模式语句 ,"```plaintext
SET_SCHEMA -> 'SET' 'SCHEMA' 'schemaname_1'
```"
3.3.3 模式删除语句 ,"```plaintext
DROP_SCHEMA -> 'DROP' 'SCHEMA' IF_EXISTS SCHEMA_NAME DROP_OPTION
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schema_name_1'
DROP_OPTION -> 'RESTRICT' | 'CASCADE' | ''
```"
3.4 管理表空间 ,"```text
S -> MANAGE_TABLESPACE
MANAGE_TABLESPACE -> '3.4' '管理表空间'
```"
3.4.1 表空间定义语句 ,"```plaintext
S -> CREATE_TABLESPACE
CREATE_TABLESPACE -> 'CREATE' 'TABLESPACE' 'tablespace_name_1' DATAFILE_CLAUSE CACHE_CLAUSE ENCRYPT_CLAUSE DFS_CLAUSE
DATAFILE_CLAUSE -> 'DATAFILE' FILE_ITEM | 'DATAFILE' FILE_ITEM ',' FILE_ITEM
FILE_ITEM -> 'filepath_value' MIRROR_CLAUSE SIZE_CLAUSE AUTOEXTEND_CLAUSE
MIRROR_CLAUSE -> 'MIRROR' 'filepath_value' | ''
SIZE_CLAUSE -> 'SIZE' 'filesize_value'
AUTOEXTEND_CLAUSE -> 'AUTOEXTEND' ON_CLAUSE | 'AUTOEXTEND' 'OFF'
ON_CLAUSE -> 'ON' NEXT_CLAUSE MAXSIZE_CLAUSE | 'ON'
NEXT_CLAUSE -> 'NEXT' 'filesize_value' | ''
MAXSIZE_CLAUSE -> 'MAXSIZE' 'filesize_value' | ''
CACHE_CLAUSE -> 'CACHE' '=' 'cachename_value' | ''
ENCRYPT_CLAUSE -> 'ENCRYPT' 'WITH' 'algorithm_name_value' BY_CLAUSE | ''
BY_CLAUSE -> 'BY' 'password_value' | ''
DFS_CLAUSE -> COPY_CLAUSE STRATEGY_CLAUSE | ''
COPY_CLAUSE -> 'COPY' 'copy_num_value' | ''
STRATEGY_CLAUSE -> 'GREAT' | 'MICRO' | ''
```"
3.4.2 修改表空间语句 ,"```plaintext
S -> ALTER_TABLESPACE
ALTER_TABLESPACE -> 'ALTER' 'TABLESPACE' 'tablespace_name_1' TABLESPACE_OPTION
TABLESPACE_OPTION -> ONLINE_OPTION | OFFLINE_OPTION | CORRUPT_OPTION | RENAME_TABLESPACE | RENAME_DATAFILE | ADD_DATAFILE | RESIZE_DATAFILE | AUTOEXTEND_DATAFILE | CACHE_OPTION | OPTIMIZE_DSC

ONLINE_OPTION -> 'ONLINE'
OFFLINE_OPTION -> 'OFFLINE'
CORRUPT_OPTION -> 'CORRUPT'
RENAME_TABLESPACE -> 'RENAME' 'TO' 'tablespace_name_2'
RENAME_DATAFILE -> 'RENAME' 'DATAFILE' 'filepath_1' 'TO' 'filepath_2'
ADD_DATAFILE -> 'ADD' 'DATAFILE' 'filepath_3' 'SIZE' 'filesize_value'
RESIZE_DATAFILE -> 'RESIZE' 'DATAFILE' 'filepath_4' 'TO' 'filesize_value'
AUTOEXTEND_DATAFILE -> 'DATAFILE' 'filepath_5' AUTOEXTEND_CLAUSE
AUTOEXTEND_CLAUSE -> 'AUTOEXTEND' 'ON' 'NEXT' 'filesize_value' 'MAXSIZE' 'filesize_value'
CACHE_OPTION -> 'CACHE' '=' 'cachename_value'
OPTIMIZE_DSC -> 'OPTIMIZE' 'dsc_seqno_value'
```"
3.4.3 表空间删除语句 ,"```nltk
S -> DROP_TABLESPACE
DROP_TABLESPACE -> 'DROP' 'TABLESPACE' IF_EXISTS TABLESPACE_NAME
IF_EXISTS -> 'IF EXISTS' | ''
TABLESPACE_NAME -> 'tablespace_name_1'
```"
3.4.4 表空间失效文件检查 ,"```plaintext
SP_FILE_SYS_CHECK -> 'SP_FILE_SYS_CHECK' '(' ')'
```"
3.4.5 表空间失效文件恢复准备 ,"```nltk
S -> SP_TABLESPACE_PREPARE_RECOVER
SP_TABLESPACE_PREPARE_RECOVER -> 'SP_TABLESPACE_PREPARE_RECOVER' '(' 'tablespace_name_1' ')'
```"
3.4.6 表空间失效文件恢复 ,"```nltk
S -> SP_TABLESPACE_RECOVER
SP_TABLESPACE_RECOVER -> 'SP_TABLESPACE_RECOVER' '(' 'tablespace_name_1' ')'
```"
3.5 管理 HTS表空间 ,"```plaintext
S -> CREATE_HUGE_TABLE | USE_SYSTEM_HUGE_TABLESPACE
CREATE_HUGE_TABLE -> 'CREATE' 'HUGE' 'TABLE' 'IN' 'HTS_name_1'
USE_SYSTEM_HUGE_TABLESPACE -> 'USE' 'SYSTEM' 'HUGE' 'TABLESPACE' 'HMAIN_name_1'
```"
3.5.1 创建 HTS表空间 ,"```plaintext
CREATE_HUGE_TABLESPACE -> 'CREATE' 'HUGE' 'TABLESPACE' 'tablespace_name_1' 'PATH' 'path_value' DFS_REPLICA_CLAUSE
DFS_REPLICA_CLAUSE -> 'dfs_replica_clause' | ''
```"
3.5.2 修改 HTS表空间 ,"```plaintext
S -> ALTER_HUGE_TABLESPACE
ALTER_HUGE_TABLESPACE -> 'ALTER' 'HUGE' 'TABLESPACE' 'tablespace_name_1' 'ADD' 'PATH' 'path_value'
```"
3.5.3 删除 HTS表空间 ,"```nltk
S -> DROP_HUGE_TABLESPACE
DROP_HUGE_TABLESPACE -> 'DROP' 'HUGE' 'TABLESPACE' IF_EXISTS 'tablespace_name_1'
IF_EXISTS -> 'IF EXISTS' | ''
```"
3.6 管理表 ,"```plaintext
MANAGE_TABLE -> '3.6' '管理表'
```"
3.6.1 表定义语句 ,"```plaintext
S -> CREATE_TABLE | CREATE_HUGE_TABLE | CREATE_EXTERNAL_TABLE
CREATE_TABLE -> 'CREATE' TABLE_DEFINITION TABLE_STRUCTURE
TABLE_DEFINITION -> SCHEMA_NAME '.' TABLE_NAME | TABLE_NAME
TABLE_STRUCTURE -> '(' COLUMN_DEFINITION ',' TABLE_CONSTRAINT ')' | '(' COLUMN_DEFINITION ')'
COLUMN_DEFINITION -> COLUMN_NAME DATA_TYPE | COLUMN_NAME DATA_TYPE COLUMN_CONSTRAINT
TABLE_CONSTRAINT -> CONSTRAINT_NAME CONSTRAINT_CLAUSE
CONSTRAINT_CLAUSE -> PRIMARY_KEY | UNIQUE | FOREIGN_KEY | CHECK
PRIMARY_KEY -> 'PRIMARY' 'KEY' '(' COLUMN_NAME ')'
UNIQUE -> 'UNIQUE' '(' COLUMN_NAME ')'
FOREIGN_KEY -> 'FOREIGN' 'KEY' '(' COLUMN_NAME ')' REFERENCES TABLE_NAME '(' COLUMN_NAME ')'
CHECK -> 'CHECK' '(' CONDITION ')'
CREATE_HUGE_TABLE -> 'CREATE' 'HUGE' 'TABLE' TABLE_DEFINITION TABLE_STRUCTURE
CREATE_EXTERNAL_TABLE -> 'CREATE' 'EXTERNAL' 'TABLE' TABLE_DEFINITION TABLE_STRUCTURE 'FROM' FILE_PATH
FILE_PATH -> 'file_path_value'
SCHEMA_NAME -> 'schema_name_1'
TABLE_NAME -> 'table_name_1'
COLUMN_NAME -> 'column_name_1'
DATA_TYPE -> 'data_type_value'
CONSTRAINT_NAME -> 'constraint_name_1'
CONDITION -> 'condition_value'
```"
3.6.2 表修改语句 ,"```plaintext
S -> ALTER_TABLE | CREATE_TABLE | DROP_TABLE | MODIFY_TABLE | ADD_COLUMN | DROP_COLUMN | ADD_CONSTRAINT | DROP_CONSTRAINT | RENAME_TABLE | RENAME_COLUMN | ENABLE_CONSTRAINT | DISABLE_CONSTRAINT | MODIFY_COLUMN | MODIFY_CONSTRAINT | MODIFY_PATH | MODIFY_SPACE_LIMIT | MODIFY_TRIGGER | MODIFY_IDENTITY | MODIFY_DEFAULT | MODIFY_VISIBILITY | MODIFY_NULL | MODIFY_STAT | MODIFY_DELTA | MODIFY_STORAGE | MODIFY_PARTITION | MODIFY_SUBPARTITION | MODIFY_TEMPLATE | MODIFY_MOVEMENT | MODIFY_LOG | MODIFY_ADVANCED_LOG | MODIFY_TABLESPACE | MODIFY_FILE | MODIFY_DIRECTORY | MODIFY_ROW | MODIFY_COUNTER | MODIFY_PARTITION_TEMPLATE | MODIFY_SUBPARTITION_TEMPLATE | MODIFY_PARTITION_NAME | MODIFY_SUBPARTITION_NAME | MODIFY_PARTITION_VALUE | MODIFY_SUBPARTITION_VALUE | MODIFY_PARTITION_SPACE | MODIFY_SUBPARTITION_SPACE | MODIFY_PARTITION_STAT | MODIFY_SUBPARTITION_STAT | MODIFY_PARTITION_DELTA | MODIFY_SUBPARTITION_DELTA | MODIFY_PARTITION_STORAGE | MODIFY_SUBPARTITION_STORAGE | MODIFY_PARTITION_LOG | MODIFY_SUBPARTITION_LOG | MODIFY_PARTITION_ADVANCED_LOG | MODIFY_SUBPARTITION_ADVANCED_LOG | MODIFY_PARTITION_TABLESPACE | MODIFY_SUBPARTITION_TABLESPACE | MODIFY_PARTITION_FILE | MODIFY_SUBPARTITION_FILE | MODIFY_PARTITION_DIRECTORY | MODIFY_SUBPARTITION_DIRECTORY | MODIFY_PARTITION_ROW | MODIFY_SUBPARTITION_ROW | MODIFY_PARTITION_COUNTER | MODIFY_SUBPARTITION_COUNTER

ALTER_TABLE -> 'ALTER' 'TABLE' TABLE_NAME MODIFY_TABLE_CLAUSE
TABLE_NAME -> SCHEMA_NAME '.' TABLE_NAME_1 | TABLE_NAME_1
SCHEMA_NAME -> 'schema_name_1'
TABLE_NAME_1 -> 'table_name_1'

MODIFY_TABLE_CLAUSE -> MODIFY_COLUMN | ADD_COLUMN | DROP_COLUMN | ADD_CONSTRAINT | DROP_CONSTRAINT | RENAME_COLUMN | ENABLE_CONSTRAINT | DISABLE_CONSTRAINT | MODIFY_CONSTRAINT | MODIFY_PATH | MODIFY_SPACE_LIMIT | MODIFY_TRIGGER | MODIFY_IDENTITY | MODIFY_DEFAULT | MODIFY_VISIBILITY | MODIFY_NULL | MODIFY_STAT | MODIFY_DELTA | MODIFY_STORAGE | MODIFY_PARTITION | MODIFY_SUBPARTITION | MODIFY_TEMPLATE | MODIFY_MOVEMENT | MODIFY_LOG | MODIFY_ADVANCED_LOG | MODIFY_TABLESPACE | MODIFY_FILE | MODIFY_DIRECTORY | MODIFY_ROW | MODIFY_COUNTER | MODIFY_PARTITION_TEMPLATE | MODIFY_SUBPARTITION_TEMPLATE | MODIFY_PARTITION_NAME | MODIFY_SUBPARTITION_NAME | MODIFY_PARTITION_VALUE | MODIFY_SUBPARTITION_VALUE | MODIFY_PARTITION_SPACE | MODIFY_SUBPARTITION_SPACE | MODIFY_PARTITION_STAT | MODIFY_SUBPARTITION_STAT | MODIFY_PARTITION_DELTA | MODIFY_SUBPARTITION_DELTA | MODIFY_PARTITION_STORAGE | MODIFY_SUBPARTITION_STORAGE | MODIFY_PARTITION_LOG | MODIFY_SUBPARTITION_LOG | MODIFY_PARTITION_ADVANCED_LOG | MODIFY_SUBPARTITION_ADVANCED_LOG | MODIFY_PARTITION_TABLESPACE | MODIFY_SUBPARTITION_TABLESPACE | MODIFY_PARTITION_FILE | MODIFY_SUBPARTITION_FILE | MODIFY_PARTITION_DIRECTORY | MODIFY_SUBPARTITION_DIRECTORY | MODIFY_PARTITION_ROW | MODIFY_SUBPARTITION_ROW | MODIFY_PARTITION_COUNTER | MODIFY_SUBPARTITION_COUNTER

MODIFY_COLUMN -> 'MODIFY' COLUMN_NAME COLUMN_DEFINITION
COLUMN_NAME -> 'column_name_1'
COLUMN_DEFINITION -> 'column_definition_1'

ADD_COLUMN -> 'ADD' 'COLUMN' COLUMN_NAME COLUMN_DEFINITION
DROP_COLUMN -> 'DROP' 'COLUMN' COLUMN_NAME RESTRICT_OPTION
RESTRICT_OPTION -> 'RESTRICT' | 'CASCADE'

ADD_CONSTRAINT -> 'ADD' 'CONSTRAINT' CONSTRAINT_NAME TABLE_CONSTRAINT_CLAUSE
CONSTRAINT_NAME -> 'constraint_name_1'
TABLE_CONSTRAINT_CLAUSE -> 'table_constraint_clause_1'

DROP_CONSTRAINT -> 'DROP' 'CONSTRAINT' CONSTRAINT_NAME RESTRICT_OPTION
RENAME_COLUMN -> 'RENAME' 'COLUMN' COLUMN_NAME 'TO' COLUMN_NAME
ENABLE_CONSTRAINT -> 'ENABLE' 'CONSTRAINT' CONSTRAINT_NAME
DISABLE_CONSTRAINT -> 'DISABLE' 'CONSTRAINT' CONSTRAINT_NAME RESTRICT_OPTION
MODIFY_CONSTRAINT -> 'MODIFY' 'CONSTRAINT' CONSTRAINT_NAME 'TO' TABLE_CONSTRAINT_CLAUSE
MODIFY_PATH -> 'MODIFY' 'PATH' 'external_table_file_path'
MODIFY_SPACE_LIMIT -> 'MODIFY' 'SPACE_LIMIT' 'space_limit_clause'
MODIFY_TRIGGER -> 'ENABLE' 'ALL' 'TRIGGERS' | 'DISABLE' 'ALL' 'TRIGGERS'
MODIFY_IDENTITY -> 'DROP' 'IDENTITY' | 'ADD' 'COLUMN' COLUMN_NAME 'IDENTITY' 'identity_clause'
MODIFY_DEFAULT -> 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'DEFAULT' 'default_value' | 'ALTER' 'COLUMN' COLUMN_NAME 'DROP' 'DEFAULT'
MODIFY_VISIBILITY -> 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'VISIBLE' | 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'NOT' 'VISIBLE'
MODIFY_NULL -> 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'NULL' | 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'NOT' 'NULL'
MODIFY_STAT -> 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'STAT' 'NONE' | 'ALTER' 'COLUMN' COLUMN_NAME 'SET' 'STAT'
MODIFY_DELTA -> 'WITH' 'DELTA' | 'WITHOUT' 'DELTA'
MODIFY_STORAGE -> 'MODIFY' 'STORAGE' 'storage_clause'
MODIFY_PARTITION -> 'MODIFY' 'PARTITION' PARTITION_NAME PARTITION_CLAUSE
PARTITION_NAME -> 'partition_name_1'
PARTITION_CLAUSE -> 'partition_clause_1'
MODIFY_SUBPARTITION -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME SUBPARTITION_CLAUSE
SUBPARTITION_NAME -> 'subpartition_name_1'
SUBPARTITION_CLAUSE -> 'subpartition_clause_1'
MODIFY_TEMPLATE -> 'SET' 'SUBPARTITION' 'TEMPLATE' 'partition_template_description'
MODIFY_MOVEMENT -> 'ENABLE' 'ROW' 'MOVEMENT' | 'DISABLE' 'ROW' 'MOVEMENT'
MODIFY_LOG -> 'ADD' 'LOGIC' 'LOG' | 'DROP' 'LOGIC' 'LOG'
MODIFY_ADVANCED_LOG -> 'WITHOUT' 'ADVANCED' 'LOG' | 'TRUNCATE' 'ADVANCED' 'LOG'
MODIFY_TABLESPACE -> 'MOVE' 'TABLESPACE' 'tablespace_name'
MODIFY_FILE -> 'LOCATION' 'file_name'
MODIFY_DIRECTORY -> 'DEFAULT' 'DIRECTORY' 'directory_name'
MODIFY_ROW -> 'ENABLE' 'USING' 'LONG' 'ROW'
MODIFY_COUNTER -> 'WITH' 'COUNTER' | 'WITHOUT' 'COUNTER'
MODIFY_PARTITION_TEMPLATE -> 'MODIFY' 'PARTITION' 'TEMPLATE' 'partition_template_description'
MODIFY_SUBPARTITION_TEMPLATE -> 'MODIFY' 'SUBPARTITION' 'TEMPLATE' 'partition_template_description'
MODIFY_PARTITION_NAME -> 'RENAME' 'PARTITION' PARTITION_NAME 'TO' PARTITION_NAME
MODIFY_SUBPARTITION_NAME -> 'RENAME' 'SUBPARTITION' SUBPARTITION_NAME 'TO' SUBPARTITION_NAME
MODIFY_PARTITION_VALUE -> 'MODIFY' 'PARTITION' PARTITION_NAME 'ADD' 'VALUES' 'partition_value' | 'MODIFY' 'PARTITION' PARTITION_NAME 'DROP' 'VALUES' 'partition_value'
MODIFY_SUBPARTITION_VALUE -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'ADD' 'VALUES' 'subpartition_value' | 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'DROP' 'VALUES' 'subpartition_value'
MODIFY_PARTITION_SPACE -> 'MODIFY' 'PARTITION' PARTITION_NAME 'SPACE_LIMIT' 'space_limit_clause'
MODIFY_SUBPARTITION_SPACE -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'SPACE_LIMIT' 'space_limit_clause'
MODIFY_PARTITION_STAT -> 'MODIFY' 'PARTITION' PARTITION_NAME 'SET' 'STAT' 'NONE' | 'MODIFY' 'PARTITION' PARTITION_NAME 'SET' 'STAT'
MODIFY_SUBPARTITION_STAT -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'SET' 'STAT' 'NONE' | 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'SET' 'STAT'
MODIFY_PARTITION_DELTA -> 'MODIFY' 'PARTITION' PARTITION_NAME 'WITH' 'DELTA' | 'MODIFY' 'PARTITION' PARTITION_NAME 'WITHOUT' 'DELTA'
MODIFY_SUBPARTITION_DELTA -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'WITH' 'DELTA' | 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'WITHOUT' 'DELTA'
MODIFY_PARTITION_STORAGE -> 'MODIFY' 'PARTITION' PARTITION_NAME 'STORAGE' 'storage_clause'
MODIFY_SUBPARTITION_STORAGE -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'STORAGE' 'storage_clause'
MODIFY_PARTITION_LOG -> 'MODIFY' 'PARTITION' PARTITION_NAME 'ADD' 'LOGIC' 'LOG' | 'MODIFY' 'PARTITION' PARTITION_NAME 'DROP' 'LOGIC' 'LOG'
MODIFY_SUBPARTITION_LOG -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'ADD' 'LOGIC' 'LOG' | 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'DROP' 'LOGIC' 'LOG'
MODIFY_PARTITION_ADVANCED_LOG -> 'MODIFY' 'PARTITION' PARTITION_NAME 'WITHOUT' 'ADVANCED' 'LOG' | 'MODIFY' 'PARTITION' PARTITION_NAME 'TRUNCATE' 'ADVANCED' 'LOG'
MODIFY_SUBPARTITION_ADVANCED_LOG -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'WITHOUT' 'ADVANCED' 'LOG' | 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'TRUNCATE' 'ADVANCED' 'LOG'
MODIFY_PARTITION_TABLESPACE -> 'MODIFY' 'PARTITION' PARTITION_NAME 'MOVE' 'TABLESPACE' 'tablespace_name'
MODIFY_SUBPARTITION_TABLESPACE -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'MOVE' 'TABLESPACE' 'tablespace_name'
MODIFY_PARTITION_FILE -> 'MODIFY' 'PARTITION' PARTITION_NAME 'LOCATION' 'file_name'
MODIFY_SUBPARTITION_FILE -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'LOCATION' 'file_name'
MODIFY_PARTITION_DIRECTORY -> 'MODIFY' 'PARTITION' PARTITION_NAME 'DEFAULT' 'DIRECTORY' 'directory_name'
MODIFY_SUBPARTITION_DIRECTORY -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'DEFAULT' 'DIRECTORY' 'directory_name'
MODIFY_PARTITION_ROW -> 'MODIFY' 'PARTITION' PARTITION_NAME 'ENABLE' 'USING' 'LONG' 'ROW'
MODIFY_SUBPARTITION_ROW -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'ENABLE' 'USING' 'LONG' 'ROW'
MODIFY_PARTITION_COUNTER -> 'MODIFY' 'PARTITION' PARTITION_NAME 'WITH' 'COUNTER' | 'MODIFY' 'PARTITION' PARTITION_NAME 'WITHOUT' 'COUNTER'
MODIFY_SUBPARTITION_COUNTER -> 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'WITH' 'COUNTER' | 'MODIFY' 'SUBPARTITION' SUBPARTITION_NAME 'WITHOUT' 'COUNTER'
```"
3.6.3 基表删除语句  ,"```  
S -> DROP_TABLE  
DROP_TABLE -> 'DROP' 'TABLE' IF_EXISTS SCHEMA_NAME '.' TABLE_NAME DROP_OPTION  
IF_EXISTS -> 'IF EXISTS' | ''  
SCHEMA_NAME -> 'schemaname_1'  
TABLE_NAME -> 'tablename_1'  
DROP_OPTION -> 'RESTRICT' | 'CASCADE' | ''  
```"
3.6.4 基表数据删除语句 ,"```  
S -> TRUNCATE_TABLE  
TRUNCATE_TABLE -> 'TRUNCATE' 'TABLE' SCHEMA_NAME '.' TABLE_NAME PARTITION_OPTION CASCADE_OPTION  
SCHEMA_NAME -> 'schemaname_1'  
TABLE_NAME -> 'tablename_1'  
PARTITION_OPTION -> 'PARTITION' PARTITION_NAME | '(' PARTITION_NAME ')' | ''  
PARTITION_NAME -> 'partitionname_1'  
CASCADE_OPTION -> 'CASCADE' | ''  
```"
3.6.5 事务型 HUGE表数据重整 ,"```
S -> ALTER_TABLE_REBUILD_SECTION
ALTER_TABLE_REBUILD_SECTION -> 'ALTER' 'TABLE' TABLE_NAME 'REBUILD' 'SECTION'
TABLE_NAME -> SCHEMA_NAME '.' 'table_name_1' | 'table_name_1'
SCHEMA_NAME -> 'schemaname'
```"
3.7 管理索引 ,"```plaintext
MANAGE_INDEX -> '3.7' '管理索引'
```"
3.7.1 索引定义语句 ,"```plaintext
S -> CREATE_INDEX
CREATE_INDEX -> 'CREATE' OR_REPLACE_OPTION INDEX_TYPE_OPTION 'INDEX' 'index_name_1' 'ON' SCHEMA_TABLE_NAME '(' INDEX_COLUMN_DEFINITION ')' STORAGE_OPTION CLUSTER_OPTION GLOBAL_OPTION NOT_PARTIAL_OPTION NOSORT_OPTION SPATIAL_OPTION REVERSE_OPTION ONLINE_OPTION UNUSABLE_OPTION
OR_REPLACE_OPTION -> 'OR' 'REPLACE' | ''
INDEX_TYPE_OPTION -> 'UNIQUE' | 'BITMAP' | 'SPATIAL' | ''
SCHEMA_TABLE_NAME -> 'schema_name_1' '.' 'table_name_1' | 'table_name_1'
INDEX_COLUMN_DEFINITION -> 'index_column_1' ',' 'index_column_2' | 'index_column_1'
STORAGE_OPTION -> 'STORAGE' '(' STORAGE_ITEMS ')' | ''
STORAGE_ITEMS -> STORAGE_ITEM | STORAGE_ITEM ',' STORAGE_ITEMS
STORAGE_ITEM -> 'INITIAL' 'initial_size_value' | 'NEXT' 'next_size_value' | 'MINEXTENTS' 'minextents_size_value' | 'ON' 'tablespace_name_1' | 'FILLFACTOR' 'fillfactor_value' | 'BRANCH' 'branch_count_value' | 'BRANCH' '(' 'branch_count_value' ',' 'nobranch_count_value' ')' | 'NOBRANCH' | 'CLUSTERBTR' | 'SECTION' 'section_count_value' | 'STAT' 'NONE'
CLUSTER_OPTION -> 'CLUSTER' | ''
GLOBAL_OPTION -> 'GLOBAL' | ''
NOT_PARTIAL_OPTION -> 'NOT' 'PARTIAL' | ''
NOSORT_OPTION -> 'NOSORT' | ''
SPATIAL_OPTION -> 'SPATIAL' | ''
REVERSE_OPTION -> 'REVERSE' | ''
ONLINE_OPTION -> 'ONLINE' | ''
UNUSABLE_OPTION -> 'UNUSABLE' | ''
```"
3.7.2 索引修改语句 ,"```plaintext
S -> ALTER_INDEX
ALTER_INDEX -> 'ALTER' 'INDEX' INDEX_NAME MODIFY_INDEX_CLAUSE
INDEX_NAME -> SCHEMA_NAME '.' 'index_name_1' | 'index_name_1'
SCHEMA_NAME -> 'schemaname_1'
MODIFY_INDEX_CLAUSE -> RENAME_TO | INVISIBLE | VISIBLE | UNUSABLE | REBUILD_CLAUSE | MONITORING_USAGE
RENAME_TO -> 'RENAME' 'TO' INDEX_NAME
INVISIBLE -> 'INVISIBLE'
VISIBLE -> 'VISIBLE'
UNUSABLE -> 'UNUSABLE'
REBUILD_CLAUSE -> 'REBUILD' REBUILD_OPTIONS
REBUILD_OPTIONS -> NOSORT | ONLINE | REBUILD_METHOD | NOSORT ONLINE | NOSORT REBUILD_METHOD | ONLINE REBUILD_METHOD | NOSORT ONLINE REBUILD_METHOD
NOSORT -> 'NOSORT'
ONLINE -> 'ONLINE'
REBUILD_METHOD -> SHARE | SHARE_ASYNCHRONOUS | EXCLUSIVE
SHARE -> 'SHARE'
SHARE_ASYNCHRONOUS -> 'SHARE' 'ASYNCHRONOUS' ASYNC_TASK_NUM
ASYNC_TASK_NUM -> 'async_task_num_value'
EXCLUSIVE -> 'EXCLUSIVE'
MONITORING_USAGE -> 'MONITORING' 'USAGE' | 'NOMONITORING' 'USAGE'
```"
3.7.3 索引删除语句 ,"```plaintext
DROP_INDEX -> 'DROP' 'INDEX' IF_EXISTS SCHEMA_NAME '.' INDEX_NAME
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1' | ''
INDEX_NAME -> 'indexname_1'
```"
3.8 管理位图连接索引 ,"```nltk
S -> '管理' '位图' '连接' '索引'
```"
3.8.1 位图连接索引定义语句 ,"```plaintext
S -> CREATE_BITMAP_INDEX
CREATE_BITMAP_INDEX -> 'CREATE' OR_REPLACE 'BITMAP' 'INDEX' 'index_name_1' 'ON' BITMAP_JOIN_INDEX_CLAUSE STORAGE_CLAUSE
OR_REPLACE -> 'OR REPLACE' | ''
BITMAP_JOIN_INDEX_CLAUSE -> SCHEMA_NAME '.' 'table_name_1' '(' INDEX_COLUMN_DEFINITION ',' INDEX_COLUMN_DEFINITION ')' 'FROM' SCHEMA_NAME '.' 'base_table_name_1' 'table_alias_1' ',' SCHEMA_NAME '.' 'base_table_name_2' 'table_alias_2' 'WHERE' 'condition_exp_1'
SCHEMA_NAME -> 'schemaname_1' | ''
INDEX_COLUMN_DEFINITION -> SCHEMA_NAME '.' 'table_name_2' 'index_exp_1' ASC_DESC
ASC_DESC -> 'ASC' | 'DESC'
STORAGE_CLAUSE -> 'STORAGE' '(' 'storage_option_1' ')' | ''
```"
3.8.2 位图连接索引删除语句 ,"```nltk
S -> DROP_INDEX
DROP_INDEX -> 'DROP' 'INDEX' IF_EXISTS SCHEMA_NAME_INDEX_NAME
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME_INDEX_NAME -> 'schema_name_1' '.' 'index_name_1' | 'index_name_1'
```"
3.9 管理全文索引 ,"```plaintext
S -> MANAGE_FULLTEXT_INDEX
MANAGE_FULLTEXT_INDEX -> '管理全文索引'
```"
3.9.1 全文索引定义语句 ,"```plaintext
CREATE_CONTEXT_INDEX -> 'CREATE' 'CONTEXT' 'INDEX' 'index_name_1' 'ON' 'schemaname_1' '.' 'tablename_1' '(' 'index_column_1' ')' 'LEXER' 'lexer_option' 'SYNC' 'sync_option'
index_name_1 -> 'indexname'
schemaname_1 -> 'schemaname'
tablename_1 -> 'tablename'
index_column_1 -> 'index_column'
lexer_option -> 'CHINESE_LEXER' | 'CHINESE_VGRAM_LEXER' | 'CHINESE_FP_LEXER' | 'ENGLISH_LEXER' | 'DEFAULT_LEXER'
sync_option -> 'TRANSACTION' | ''
```"
3.9.2 全文索引修改语句 ,"```plaintext
ALTER_CONTEXT_INDEX -> 'ALTER' 'CONTEXT' 'INDEX' 'index_name_1' 'ON' SCHEMA_TABLE ACTION ONLINE_OPTION LEXER_OPTION
SCHEMA_TABLE -> 'schema_name_1' '.' 'table_name_1' | 'table_name_1'
ACTION -> 'REBUILD' | 'INCREMENT' | 'OPTIMIZE'
ONLINE_OPTION -> 'ONLINE' | ''
LEXER_OPTION -> 'LEXER' 'lexer_option' | ''
```"
3.9.3 全文索引删除语句 ,"```nltk
DROP_CONTEXT_INDEX -> 'DROP' 'CONTEXT' 'INDEX' IF_EXISTS INDEX_NAME 'ON' SCHEMA_NAME '.' TABLE_NAME
IF_EXISTS -> 'IF' 'EXISTS' | ''
INDEX_NAME -> 'index_name_1'
SCHEMA_NAME -> 'schema_name_1'
TABLE_NAME -> 'table_name_1'
```"
3.10 管理空间索引 ,"```plaintext
S -> SPATIAL_INDEX_CONDITION | SPATIAL_QUERY_EXAMPLE
SPATIAL_INDEX_CONDITION -> SPATIAL_FUNCTION_CONDITION SPATIAL_COLUMN_CONDITION SPATIAL_DATA_CONDITION ST_DISTANCE_CONDITION OTHER_FUNCTION_CONDITION
SPATIAL_FUNCTION_CONDITION -> 'DMGEO.ST_WITHIN' | 'DMGEO.ST_DISTANCE' | 'DMGEO.ST_DISJOINT' | 'DMGEO.ST_EQUALS' | 'DMGEO.ST_TOUCHES' | 'DMGEO.ST_OVERLAPS' | 'DMGEO.ST_CROSSES' | 'DMGEO.ST_INTERSECTS' | 'DMGEO.ST_CONTAINS' | 'DMGEO.ST_RELATE'
SPATIAL_COLUMN_CONDITION -> '空间函数的第一个参数必须是空间索引的列'
SPATIAL_DATA_CONDITION -> '空间函数中与之比较的空间数据必须是常量或固定的值'
ST_DISTANCE_CONDITION -> '对于ST_DISTANCE，仅支持<和<=某个常量值的条件'
OTHER_FUNCTION_CONDITION -> '对于其他的返回1和0表示TRUE和FALSE的函数，只支持缺省比较条件或=1的比较条件'

SPATIAL_QUERY_EXAMPLE -> QUERY_WITHIN_EXAMPLE | QUERY_DISTANCE_EXAMPLE
QUERY_WITHIN_EXAMPLE -> 'SELECT * FROM testgeo WHERE DMGEO.ST_WITHIN(geo, DMGEO.ST_GEOMFromText(string_value, int_value)) = 1' | 'SELECT * FROM testgeo WHERE DMGEO.ST_WITHIN(geo, DMGEO.ST_GEOMFromText(string_value, int_value))'
QUERY_DISTANCE_EXAMPLE -> 'SELECT * FROM testgeo WHERE DMGEO.ST_DISTANCE(geo, DMGEO.ST_GEOMFromText(string_value, int_value)) < int_value'
```"
3.11 管理数组索引 ,"```plaintext
MANAGE_ARRAY_INDEX -> '管理数组索引'
ARRAY_INDEX -> '数组索引'
OBJECT_COLUMN -> '对象列'
SINGLE_ARRAY_MEMBER -> '单个数组成员'
CREATE_INDEX -> '创建索引'

MANAGE_ARRAY_INDEX -> ARRAY_INDEX '指在' OBJECT_COLUMN '上' CREATE_INDEX
OBJECT_COLUMN -> '只包含' SINGLE_ARRAY_MEMBER '的' OBJECT_COLUMN
```"
3.11.1 数组索引定义语句 ,"```plaintext
CREATE_ARRAY_INDEX -> 'CREATE' 'ARRAY' 'INDEX' 'index_name_1' 'ON' 'schema_name_1' '.' 'table_name_1' '(' 'index_column_definition' ')'
```"
3.11.2 数组索引修改语句 ,"```
ARRAY_INDEX_MODIFICATION -> INDEX_USAGE
INDEX_USAGE -> '普通索引用法'
ARRAY_INDEX_FEATURE -> '不支持' 'NOSORT' '和' 'ONLINE' '用法'
```"
3.11.3 数组索引使用 ,"```plaintext
CONTAINS -> 'CONTAINS' '(' INDEX_COLUMN_NAME ',' VAL_LIST ')' | 'CONTAINS' '(' INDEX_COLUMN_NAME ',' ARR_VAR_EXP ')'
VAL_LIST -> VAL | VAL ',' VAL
VAL -> 'val_value'
ARR_VAR_EXP -> 'arr_var_exp_value'
INDEX_COLUMN_NAME -> 'index_column_name_1'

CREATE_TYPE -> 'CREATE' 'TYPE' TYPE_NAME 'IS' ARRAY_TYPE '(' SIZE ')' 'OF' DATA_TYPE
TYPE_NAME -> 'ARR_NUM1' | 'ARR_NUM2' | 'ARR_NUM3' | 'ARR_NUM4'
ARRAY_TYPE -> 'VARRAY' | 'TABLE' | 'ARRAY'
SIZE -> '1024' | '3'
DATA_TYPE -> 'NUMBER'

CREATE_CLASS -> 'CREATE' 'CLASS' CLASS_NAME 'AS' VAR_TYPE TYPE_NAME 'END'
CLASS_NAME -> 'CLS1'
VAR_TYPE -> 'V'

CREATE_TABLE -> 'CREATE' 'TABLE' TABLE_NAME '(' COLUMN_NAME COLUMN_TYPE ')'
TABLE_NAME -> 'TEST'
COLUMN_NAME -> 'C1'
COLUMN_TYPE -> 'CLS1'

INSERT_INTO -> 'INSERT' 'INTO' TABLE_NAME 'VALUES' '(' CLASS_NAME '(' TYPE_NAME '(' VAL_LIST ')' ')' ')'

CREATE_ARRAY_INDEX -> 'CREATE' 'ARRAY' 'INDEX' INDEX_NAME 'ON' TABLE_NAME '(' COLUMN_NAME ')'
INDEX_NAME -> 'IDX'

SELECT -> 'SELECT' '*' 'FROM' TABLE_NAME 'WHERE' CONTAINS

DECLARE -> 'DECLARE' VAR_NAME TYPE_NAME
VAR_NAME -> 'X'
BEGIN -> 'BEGIN' ASSIGNMENT SELECT 'END'
ASSIGNMENT -> VAR_NAME ':=' ARRAY_INITIALIZATION | VAR_NAME '[' INDEX ']' ':=' VAL
ARRAY_INITIALIZATION -> 'NEW' DATA_TYPE '[' SIZE ']' | TYPE_NAME '(' ')' | TYPE_NAME '(' VAL_LIST ')'
INDEX -> '1' | '2' | '3'
```"
3.11.4 数组索引删除语句 ,"```plaintext
ARRAY_INDEX_DELETE_STATEMENT -> ARRAY_INDEX_DELETE_STATEMENT
ARRAY_INDEX_DELETE_STATEMENT -> 'ARRAY_INDEX_DELETE_STATEMENT'
```"
3.12 管理序列 ,"```plaintext
MANAGE_SEQUENCE -> '3.12' '管理序列'
```"
3.12.1 序列定义语句 ,"```plaintext
CREATE_SEQUENCE -> 'CREATE' 'SEQUENCE' SCHEMA_NAME '.' SEQUENCE_NAME SEQUENCE_OPTION_LIST ';'
SCHEMA_NAME -> 'schemaname_1'
SEQUENCE_NAME -> 'sequencename_1'
SEQUENCE_OPTION_LIST -> SEQUENCE_OPTION | SEQUENCE_OPTION SEQUENCE_OPTION_LIST
SEQUENCE_OPTION -> INCREMENT_BY | START_WITH | MAXVALUE | NOMAXVALUE | MINVALUE | NOMINVALUE | CYCLE | NOCYCLE | CACHE | NOCACHE | ORDER | NOORDER | GLOBAL | LOCAL
INCREMENT_BY -> 'INCREMENT' 'BY' 'increment_value'
START_WITH -> 'START' 'WITH' 'initial_value'
MAXVALUE -> 'MAXVALUE' 'max_value'
NOMAXVALUE -> 'NOMAXVALUE'
MINVALUE -> 'MINVALUE' 'min_value'
NOMINVALUE -> 'NOMINVALUE'
CYCLE -> 'CYCLE'
NOCYCLE -> 'NOCYCLE'
CACHE -> 'CACHE' 'cache_value'
NOCACHE -> 'NOCACHE'
ORDER -> 'ORDER'
NOORDER -> 'NOORDER'
GLOBAL -> 'GLOBAL'
LOCAL -> 'LOCAL'
```"
3.12.2 序列修改语句 ,"```plaintext
ALTER_SEQUENCE -> 'ALTER' 'SEQUENCE' SCHEMA_NAME '.' SEQUENCE_NAME SEQUENCE_MODIFY_OPTION_LIST
SCHEMA_NAME -> 'schemaname_name_1'
SEQUENCE_NAME -> 'sequencename_name_1'
SEQUENCE_MODIFY_OPTION_LIST -> SEQUENCE_MODIFY_OPTION | SEQUENCE_MODIFY_OPTION SEQUENCE_MODIFY_OPTION
SEQUENCE_MODIFY_OPTION -> INCREMENT_BY | MAXVALUE | NOMAXVALUE | MINVALUE | NOMINVALUE | CYCLE | NOCYCLE | CACHE | NOCACHE | ORDER | NOORDER | CURRENT_VALUE
INCREMENT_BY -> 'INCREMENT' 'BY' 'increment_value'
MAXVALUE -> 'MAXVALUE' 'maxvalue_value'
NOMAXVALUE -> 'NOMAXVALUE'
MINVALUE -> 'MINVALUE' 'minvalue_value'
NOMINVALUE -> 'NOMINVALUE'
CYCLE -> 'CYCLE'
NOCYCLE -> 'NOCYCLE'
CACHE -> 'CACHE' 'cachevalue_value'
NOCACHE -> 'NOCACHE'
ORDER -> 'ORDER'
NOORDER -> 'NOORDER'
CURRENT_VALUE -> 'CURRENT' 'VALUE' 'currentvalue_value'
```"
3.12.3 序列删除语句 ,"```nltk
DROP_SEQUENCE -> 'DROP' 'SEQUENCE' IF_EXISTS SCHEMA_NAME '.' SEQUENCE_NAME
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1'
SEQUENCE_NAME -> 'sequencename_1'
```"
3.13 管理 SQL域 ,"```plaintext
S -> CREATE_DOMAIN | DROP_DOMAIN | GRANT_DOMAIN | USE_DOMAIN_IN_TABLE
CREATE_DOMAIN -> 'CREATE' 'DOMAIN' 'domain_name_1' 'AS' DATA_TYPE DOMAIN_CONSTRAINT DEFAULT_CLAUSE
DROP_DOMAIN -> 'DROP' 'DOMAIN' 'domain_name_1'
GRANT_DOMAIN -> 'GRANT' 'DOMAIN' 'domain_name_1' 'TO' 'user_name_1'
USE_DOMAIN_IN_TABLE -> 'CREATE' 'TABLE' 'table_name_1' '(' COLUMN_DEFINITION ')'
COLUMN_DEFINITION -> 'column_name_1' 'domain_name_1'
DATA_TYPE -> 'data_type_value'
DOMAIN_CONSTRAINT -> 'domain_constraint_value'
DEFAULT_CLAUSE -> 'DEFAULT' 'default_value'
```"
3.13.1 创建 DOMAIN ,"```plaintext
CREATE_DOMAIN -> 'CREATE' 'DOMAIN' DOMAIN_NAME 'AS' DATA_TYPE DEFAULT_CLAUSE DOMAIN_CONSTRAINT
DOMAIN_NAME -> 'domain_name_1'
DATA_TYPE -> 'data_type_value'
DEFAULT_CLAUSE -> 'DEFAULT' 'default_value' | ''
DOMAIN_CONSTRAINT -> CONSTRAINT_NAME_DEFINITION CHECK_CONSTRAINT_DEFINITION | ''
CONSTRAINT_NAME_DEFINITION -> 'CONSTRAINT' 'constraint_name_1' | ''
CHECK_CONSTRAINT_DEFINITION -> 'CHECK' '(' 'condition_value' ')'
```"
3.13.2 使用 DOMAIN ,"```plaintext
S -> CREATE_TABLE_WITH_DOMAIN
CREATE_TABLE_WITH_DOMAIN -> 'CREATE' 'TABLE' 'table_name_1' '(' 'ID' 'domain_name_1' ')'
```"
3.13.3 删除 DOMAIN ,"```plaintext
S -> DROP_DOMAIN
DROP_DOMAIN -> 'DROP' 'DOMAIN' IF_EXISTS DOMAIN_NAME DROP_BEHAVIOR
IF_EXISTS -> 'IF EXISTS' | ''
DOMAIN_NAME -> 'domain_name_1'
DROP_BEHAVIOR -> 'RESTRICT' | 'CASCADE' | ''
```"
3.14 管理上下文 ,"```plaintext
CONTEXT -> 'CONTEXT' NAMESPACE NAME_VALUE
NAMESPACE -> 'NAMESPACE'
NAME_VALUE -> 'NAME' 'name_value' 'VALUE' 'value_value'
DBMS_SESSION -> 'DBMS_SESSION' 'package_name_1'
SYS_CONTEXT -> 'SYS_CONTEXT' 'function_name_1'
SESSION_ATTRIBUTES -> 'SESSION' 'ID' 'id_value' | 'SCHEMA' 'schema_name_1' | 'USER' 'user_name_1'
```"
3.14.1创建上下文 ,"```plaintext
CREATE_CONTEXT -> 'CREATE' OR_REPLACE 'CONTEXT' NAMESPACE 'USING' SCHEMA_NAME '.' PACKAGE_NAME
OR_REPLACE -> 'OR REPLACE' | ''
NAMESPACE -> 'namespace_name_1'
SCHEMA_NAME -> 'schemaname_name_1'
PACKAGE_NAME -> 'packagename_name_1'

SYS_CONTEXT -> 'SYS_CONTEXT' '(' 'namespace_value' ',' 'parameter_value' ',' 'length_value' ')'
namespace_value -> 'namespace_name_1'
parameter_value -> 'parameter_name_1'
length_value -> 'int_value'

USERENV_ATTRIBUTES -> 'CURRENT_SCHEMA' | 'CURRENT_SCHEMAID' | 'CURRENT_USER' | 'CURRENT_USERID' | 'DB_NAME' | 'HOST' | 'INSTANCE_NAME' | 'IP_ADDRESS' | 'ISDBA' | 'LANG' | 'LANGUAGE' | 'NETWORK_PROTOCOL' | 'SERVER_HOST' | 'SESSION_USER' | 'SESSION_USERID' | 'SID'
```"
3.14.2删除上下文 ,"```plaintext
DROP_CONTEXT -> 'DROP' 'CONTEXT' IF_EXISTS_OPTION NAMESPACE
IF_EXISTS_OPTION -> 'IF' 'EXISTS' | ''
NAMESPACE -> 'namespace_name_1'
```"
3.15 管理目录 ,"```plaintext
S -> '3.15' '管理目录'
```"
3.15.1创建目录 ,"```  
CREATE_DIRECTORY -> 'CREATE' OR_REPLACE 'DIRECTORY' 'directory_name_1' 'AS' 'dir_path_value'  
OR_REPLACE -> 'OR' 'REPLACE' | ''  
```"
3.15.2删除目录 ,"```plaintext
S -> DROP_DIRECTORY
DROP_DIRECTORY -> 'DROP' 'DIRECTORY' IF_EXISTS 'directory_name_1'
IF_EXISTS -> 'IF EXISTS' | ''
```"
3.16 设置当前会话 ,"```plaintext
S -> SET_SESSION
SET_SESSION -> 'SET' 'SESSION' SESSION_OPTION
SESSION_OPTION -> 'session_option'
```"
3.16.1时区信息 ,"```plaintext
S -> SET_TIME_ZONE
SET_TIME_ZONE -> 'SET' 'TIME' 'ZONE' TIMEZONE
TIMEZONE -> 'LOCAL' | TIMEZONE_VALUE | INTERVAL_TIMEZONE
TIMEZONE_VALUE -> 'timezone_value'
INTERVAL_TIMEZONE -> 'INTERVAL' TIMEZONE_VALUE INTERVAL_TYPE
INTERVAL_TYPE -> 'interval_type'
```"
3.16.2日期串语言 ,"```plaintext
S -> ALTER_SESSION_SET_NLS_DATE_LANGUAGE
ALTER_SESSION_SET_NLS_DATE_LANGUAGE -> 'ALTER' 'SESSION' 'SET' 'NLS_DATE_LANGUAGE' '=' LANGUAGE
LANGUAGE -> 'AMERICAN' | 'ENGLISH' | 'SIMPLIFIED CHINESE'
```"
3.16.3日期串格式 ,"```plaintext
ALTER_SESSION -> 'ALTER' 'SESSION' 'SET' DATE_FORMAT_TYPE '=' DATE_FORMAT_VALUE
DATE_FORMAT_TYPE -> 'NLS_DATE_FORMAT' | 'NLS_TIMESTAMP_FORMAT' | 'NLS_TIMESTAMP_TZ_FORMAT' | 'NLS_TIME_FORMAT' | 'NLS_TIME_TZ_FORMAT'
DATE_FORMAT_VALUE -> 'date_format_value'
```"
3.16.4自然语言排序方式 ,"```plaintext
ALTER_SESSION -> 'ALTER' 'SESSION' 'SET' 'NLS_SORT' '=' SORT_OPTION
SORT_OPTION -> 'BINARY' | 'SCHINESE_PINYIN_M' | 'SCHINESE_STROKE_M' | 'SCHINESE_RADICAL_M' | 'THAI_CI_AS' | 'KOREAN_M'
```"
3.17 注释语句 ,"```plaintext
COMMENT_ON -> 'COMMENT' 'ON' OBJECT_NAME 'IS' COMMENT_STRING
OBJECT_NAME -> TABLE_DEFINITION | VIEW_DEFINITION | COLUMN_DEFINITION
TABLE_DEFINITION -> 'TABLE' TABLE_NAME
VIEW_DEFINITION -> 'VIEW' VIEW_NAME
COLUMN_DEFINITION -> TABLE_NAME '.' COLUMN_NAME | VIEW_NAME '.' COLUMN_NAME
TABLE_NAME -> SCHEMA_NAME '.' 'table_name_1' | 'table_name_1'
VIEW_NAME -> SCHEMA_NAME '.' 'view_name_1' | 'view_name_1'
COLUMN_NAME -> 'column_name_1'
SCHEMA_NAME -> 'schema_name_1'
COMMENT_STRING -> 'comment_string_value'
```"
3.18 设置 INI参数 ,"```plaintext
INI_PARAMETER -> MANUAL_PARAMETER | STATIC_PARAMETER | DYNAMIC_PARAMETER
MANUAL_PARAMETER -> 'READ ONLY'
STATIC_PARAMETER -> 'IN FILE'
DYNAMIC_PARAMETER -> 'SYS' | 'SESSION'

PARAMETER_MODIFICATION -> MANUAL_MODIFICATION | STATIC_MODIFICATION | DYNAMIC_MODIFICATION
MANUAL_MODIFICATION -> '服务器运行过程中' '手动参数不能被修改'
STATIC_MODIFICATION -> '静态参数只能通过修改' 'dm.ini文件' '进行修改' '修改后重启服务器才能生效' '为系统级参数' '生效后会影响所有的会话'
DYNAMIC_MODIFICATION -> '动态参数可在' 'dm.ini文件' '和' '内存' '同时修改' '修改后即时生效' '其中' 'SYS为系统级参数' '修改后会影响所有的会话' 'SESSION为会话级参数' '服务器运行过程中被修改时' '之前创建的会话不受影响' '只有新创建的会话使用新的参数值'
```"
3.18.1设置参数值 ,"```plaintext
ALTER_SYSTEM -> 'ALTER' 'SYSTEM' 'SET' PARAMETER_NAME '=' PARAMETER_VALUE DEFERRED_OPTION MODIFY_OPTION
PARAMETER_NAME -> 'parameter_name_1'
PARAMETER_VALUE -> 'parameter_value'
DEFERRED_OPTION -> 'DEFERRED' | ''
MODIFY_OPTION -> 'MEMORY' | 'BOTH' | 'SPFILE'
```"
3.18.2设置仅对当前会话起作用 ,"```
S -> ALTER_SESSION
ALTER_SESSION -> 'ALTER' 'SESSION' 'SET' PARAMETER_NAME '=' PARAMETER_VALUE PURGE_OPTION
PARAMETER_NAME -> 'parameter_name_1'
PARAMETER_VALUE -> 'parameter_value_1'
PURGE_OPTION -> 'PURGE' | ''
```"
3.19 修改系统语句 ,"```plaintext
ALTER_SYSTEM -> 'ALTER' 'SYSTEM' MODIFY_SYSTEM_STATEMENT
MODIFY_SYSTEM_STATEMENT -> 'SWITCH' 'LOGFILE' | 'ARCHIVE' 'LOG' 'CURRENT'
```"
3.20 设置列、索引生成统计信息 ,"```
STAT -> 'STAT' PERCENT 'ON' STAT_OBJECT GLOBAL_OPTION
PERCENT -> 'percent_value'
STAT_OBJECT -> TABLE_STAT | INDEX_STAT
TABLE_STAT -> SCHEMA_NAME '.' TABLE_NAME '(' COLUMN_NAME ')'
INDEX_STAT -> 'INDEX' SCHEMA_NAME '.' INDEX_NAME
SCHEMA_NAME -> 'schemaname_1'
TABLE_NAME -> 'tablename_1'
COLUMN_NAME -> 'column_name_1' | 'column_name_1' ',' 'column_name_2'
INDEX_NAME -> 'index_name_1'
GLOBAL_OPTION -> 'GLOBAL' | ''
```"
3.21 设置表生成统计信息 ,"```
STAT_ON -> 'STAT' 'ON' TABLE_NAME GLOBAL_OPTION
TABLE_NAME -> SCHEMA_NAME '.' 'table_name_1' | 'table_name_1'
SCHEMA_NAME -> 'schemaname_1'
GLOBAL_OPTION -> 'GLOBAL' | ''
```"
3.22 管理 PROFILE ,"```plaintext
S -> MANAGE_PROFILE
MANAGE_PROFILE -> 'CREATE' 'PROFILE' 'profile_name_1' | 'ALTER' 'PROFILE' 'profile_name_1' | 'DROP' 'PROFILE' 'profile_name_1' | 'GRANT' 'DDL' 'TO' 'user_name_1' | 'ASSOCIATE' 'PROFILE' 'WITH' 'user_name_1'
```"
3.22.1 创建 PROFILE ,"```plaintext
CREATE_PROFILE -> 'CREATE' 'PROFILE' 'profile_name_1' LIMIT_OPTION
LIMIT_OPTION -> 'LIMIT' RESOURCE_SETTINGS | ''
RESOURCE_SETTINGS -> 'resource_settings_value'
```"
3.22.2 修改 PROFILE ,"```plaintext
S -> ALTER_PROFILE
ALTER_PROFILE -> 'ALTER' 'PROFILE' PROFILE_NAME 'LIMIT' RESOURCE_SETTINGS
PROFILE_NAME -> 'profile_name_1'
RESOURCE_SETTINGS -> 'resource_settings_value'
```"
3.22.3 删除 PROFILE ,"```plaintext
DROP_PROFILE -> 'DROP' 'PROFILE' IF_EXISTS 'profile_name_1' RESTRICT_OR_CASCADE
IF_EXISTS -> 'IF' 'EXISTS' | ''
RESTRICT_OR_CASCADE -> 'RESTRICT' | 'CASCADE' | ''

QUERY_EXPRESSION -> SIMPLE_SELECT | SELECT_CLAUSE ORDER_BY_CLAUSE LIMIT_CONDITION FOR_UPDATE_CLAUSE | SELECT_CLAUSE ORDER_BY_CLAUSE FOR_UPDATE_CLAUSE LIMIT_CONDITION | SELECT_CLAUSE LIMIT_CONDITION ORDER_BY_CLAUSE FOR_UPDATE_CLAUSE | SELECT_CLAUSE FOR_UPDATE_CLAUSE LIMIT_CONDITION | SELECT_CLAUSE LIMIT_CONDITION FOR_UPDATE_CLAUSE
SIMPLE_SELECT -> QUERY_EXP_WITH | SELECT_CLAUSE UNION_OR_EXCEPT_OR_MINUS_OR_INTERSECT SELECT_CLAUSE
SELECT_CLAUSE -> SIMPLE_SELECT | '(' QUERY_EXPRESSION ')' | '(' SELECT_CLAUSE ')'
ORDER_BY_CLAUSE -> 'ORDER' 'BY' ORDER_BY_LIST
ORDER_BY_LIST -> ORDER_BY_ITEM | ORDER_BY_ITEM ',' ORDER_BY_ITEM
ORDER_BY_ITEM -> EXP ASC_OR_DESC NULLS_FIRST_OR_LAST
EXP -> UNSIGNED_INTEGER | COLUMN_REFERENCE | VALUE_EXPRESSION
FOR_UPDATE_CLAUSE -> 'FOR' 'READ' 'ONLY' | 'FOR' 'UPDATE' OF_SELECT_LIST NOWAIT_OR_WAIT_OR_SKIP
LIMIT_CONDITION -> LIMIT_CLAUSE | ROW_LIMIT_CLAUSE
LIMIT_CLAUSE -> 'LIMIT' RECORD_COUNT | 'LIMIT' RECORD_COUNT ',' RECORD_COUNT | 'LIMIT' RECORD_COUNT 'OFFSET' OFFSET
ROW_LIMIT_CLAUSE -> 'OFFSET' OFFSET 'ROW' | 'OFFSET' OFFSET 'ROWS' FETCH_CLAUSE
FETCH_CLAUSE -> 'FETCH' FIRST_OR_NEXT SIZE PERCENT_OR_NOT ROW_OR_ROWS ONLY_OR_WITH_TIES
QUERY_EXP_WITH -> WITH_CLAUSE 'SELECT' HINT_CLAUSE ALL_OR_DISTINCT_OR_UNIQUE TOP_CLAUSE SELECT_LIST BULK_OR_SINGLE_INTO_NULL SELECT_TAIL
SELECT_LIST -> SCHEMA_NAME '.' '*' | VALUE_EXPRESSION AS_COLUMN_ALIAS | SELECT_LIST ',' SELECT_LIST
WITH_CLAUSE -> WITH_FUNCTION_CLAUSE WITH_CTE_CLAUSE
HINT_CLAUSE -> '/*+' HINT '*/'
TOP_CLAUSE -> 'TOP' N | 'TOP' N1 ',' N2 | 'TOP' N 'PERCENT' | 'TOP' N 'WITH' 'TIES' | 'TOP' N 'PERCENT' 'WITH' 'TIES'
BULK_OR_SINGLE_INTO_NULL -> BULK_OR_SINGLE_INTO VARIABLE_NAME | BULK_OR_SINGLE_INTO VARIABLE_NAME ',' VARIABLE_NAME
BULK_OR_SINGLE_INTO -> 'INTO' | 'BULK' 'COLLECT' 'INTO'
SELECT_TAIL -> FROM_CLAUSE WHERE_CLAUSE GROUP_BY_CLAUSE HAVING_CLAUSE
FROM_CLAUSE -> 'FROM' TABLE_REFERENCE | 'FROM' TABLE_REFERENCE ',' TABLE_REFERENCE
TABLE_REFERENCE -> ORDINARY_TABLE | JOIN_TABLE
ORDINARY_TABLE -> ORDINARY_TABLE_1 | ORDINARY_TABLE_2 | ORDINARY_TABLE_3 | 'ARRAY' ARRAY
ORDINARY_TABLE_1 -> OBJECT_NAME SAMPLE_CLAUSE PIVOT_CLAUSE UNPIVOT_CLAUSE FLASHBACK_QUERY AS_ALIAS
ORDINARY_TABLE_2 -> '(' QUERY_EXPRESSION ')' AS_TABLE_ALIAS PIVOT_CLAUSE UNPIVOT_CLAUSE FLASHBACK_QUERY
ORDINARY_TABLE_3 -> SCHEMA_NAME '.' BASE_TABLE_NAME '(' SELECT_COLUMN ')' AS_TABLE_ALIAS PIVOT_CLAUSE UNPIVOT_CLAUSE FLASHBACK_QUERY
OBJECT_NAME -> LOCAL_OBJECT | INDEX | PARTITION_TABLE
LOCAL_OBJECT -> SCHEMA_NAME '.' BASE_TABLE_NAME | SCHEMA_NAME '.' VIEW_NAME
INDEX -> SCHEMA_NAME '.' BASE_TABLE_NAME 'INDEX' INDEX_NAME
PARTITION_TABLE -> SCHEMA_NAME '.' BASE_TABLE_NAME 'PARTITION' '(' PARTITION_NAME ')' | SCHEMA_NAME '.' BASE_TABLE_NAME 'PARTITION' 'FOR' '(' EXPRESSION ')' | SCHEMA_NAME '.' BASE_TABLE_NAME 'SUBPARTITION' '(' SUBPARTITION_NAME ')' | SCHEMA_NAME '.' BASE_TABLE_NAME 'SUBPARTITION' 'FOR' '(' EXPRESSION ')'
SELECT_COLUMN -> COLUMN_NAME | SELECT_COLUMN ',' COLUMN_NAME
DERIVED_LIST -> '(' COLUMN_NAME ')' | DERIVED_LIST ',' '(' COLUMN_NAME ')'
SAMPLE_CLAUSE -> 'SAMPLE' '(' EXPRESSION ')' | 'SAMPLE' '(' EXPRESSION ')' 'SEED' '(' EXPRESSION ')' | 'SAMPLE' 'BLOCK' '(' EXPRESSION ')' | 'SAMPLE' 'BLOCK' '(' EXPRESSION ')' 'SEED' '(' EXPRESSION ')'
FLASHBACK_QUERY -> FLASHBACK_QUERY_CLAUSE | FLASHBACK_VERSION_QUERY_CLAUSE
FLASHBACK_QUERY_CLAUSE -> 'WHEN' 'TIMESTAMP' TIME_EXP | 'WHEN' 'TRXID' TRXID
FLASHBACK_VERSION_QUERY_CLAUSE -> 'VERSIONS' 'BETWEEN' 'TIMESTAMP' TIME_EXP1 'AND' TIME_EXP2 | 'VERSIONS' 'BETWEEN' 'TRXID' TRXID1 'AND' TRXID2
JOIN_TABLE -> CROSS_JOIN | QUALIFIED_JOIN
CROSS_JOIN -> TABLE_REFERENCE 'CROSS' 'JOIN' ORDINARY_TABLE | TABLE_REFERENCE 'CROSS' 'JOIN' '(' JOIN_TABLE ')'
QUALIFIED_JOIN -> TABLE_REFERENCE PARTITION_BY_CLAUSE NATURAL JOIN_TYPE 'JOIN' ORDINARY_TABLE PARTITION_BY_CLAUSE
JOIN_TYPE -> INNER | OUTER_JOIN_TYPE 'OUTER'
OUTER_JOIN_TYPE -> 'LEFT' | 'RIGHT' | 'FULL'
JOIN_CONDITION -> 'ON' SEARCH_CONDITION | 'USING' '(' JOIN_COLUMN_NAME ')'
WHERE_CLAUSE -> 'WHERE' SEARCH_CONDITION | 'WHERE' 'CURRENT' 'OF' CURSOR_NAME
HIERARCHICAL_QUERY_CLAUSE -> 'CONNECT' 'BY' NOCYCLE JOIN_CONDITION 'START' 'WITH' START_CONDITION | 'START' 'WITH' START_CONDITION 'CONNECT' 'BY' NOCYCLE JOIN_CONDITION
GROUP_BY_CLAUSE -> 'GROUP' 'BY' GROUP_BY_ITEM | 'GROUP' 'BY' GROUP_BY_ITEM ',' GROUP_BY_ITEM
GROUP_BY_ITEM -> GROUPING_ITEM | ROLLUP_ITEM | CUBE_ITEM | GROUPING_SETS_ITEM
GROUPING_ITEM -> VALUE_EXPRESSION
ROLLUP_ITEM -> 'ROLLUP' '(' GROUPING_ITEM ')'
CUBE_ITEM -> 'CUBE' '(' GROUPING_ITEM ')'
GROUPING_SETS_ITEM -> 'GROUPING' 'SETS' '(' GROUP_ITEM ')'
GROUP_ITEM -> GROUPING_ITEM | '(' GROUPING_ITEM ')' | '(' ')'
HAVING_CLAUSE -> 'HAVING' SEARCH_CONDITION
PARTITION_BY_CLAUSE -> 'PARTITION' 'BY' '(' TABLE_COLUMN_NAME ')'
PIVOT_CLAUSE -> 'PIVOT' 'XML' '(' AGGREGATE_FUNCTION ')' PIVOT_FOR_CLAUSE 'IN' '(' PIVOT_IN_CLAUSE ')'
PIVOT_FOR_CLAUSE -> 'FOR' COLUMN_NAME | 'FOR' '(' COLUMN_NAME ')'
PIVOT_IN_CLAUSE -> EXPRESSION 'AS' ALIAS | PIVOT_IN_CLAUSE ',' EXPRESSION 'AS' ALIAS | 'SELECT' SELECT_CLAUSE | 'ANY'
UNPIVOT_CLAUSE -> 'UNPIVOT' INCLUDE_NULLS_CLAUSE '(' UNPIVOT_VAL_COL_LIST ')' PIVOT_FOR_CLAUSE 'IN' '(' UNPIVOT_IN_CLAUSE ')'
INCLUDE_NULLS_CLAUSE -> 'INCLUDE' 'NULLS' | 'EXCLUDE' 'NULLS'
UNPIVOT_VAL_COL_LIST -> EXPRESSION | '(' EXPRESSION ')'
UNPIVOT_IN_CLAUSE -> COLUMN_NAME 'AS' ALIAS | '(' COLUMN_NAME ')' 'AS' '(' ALIAS ')' | '(' COLUMN_NAME ')' 'AS' ALIAS
```"
4.1 单表查询 ,"```nltk
S -> SELECT_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_REFERENCE
COLUMN_LIST -> '*' | 'column_name_1'
TABLE_REFERENCE -> TABLE_NAME | VIEW_NAME
TABLE_NAME -> 'table_name_1'
VIEW_NAME -> 'view_name_1'
```"
4.1.1 简单查询 ,"```
S -> SELECT_QUERY | CREATE_TABLE | INSERT_INTO | SELECT_MINUS | SELECT_INTERSECT
SELECT_QUERY -> 'SELECT' DISTINCT_OPTION COLUMN_LIST 'FROM' TABLE_NAME
DISTINCT_OPTION -> 'DISTINCT' | 'ALL' | ''
COLUMN_LIST -> 'NAME' ',' 'AUTHOR' ',' 'NOWPRICE' | '*'
TABLE_NAME -> 'PRODUCTION.PRODUCT' | 'PERSON.PERSON'

CREATE_TABLE -> 'CREATE' 'TABLE' TABLE_NAME '(' COLUMN_DEFINITION ')'
COLUMN_DEFINITION -> 'A' 'INT'

INSERT_INTO -> 'INSERT' 'INTO' TABLE_NAME 'VALUES' '(' VALUE ')'
VALUE -> '5' | '6' | '7' | '8'

SELECT_MINUS -> 'SELECT' '*' 'FROM' 'TT' 'MINUS' 'SELECT' '*' 'FROM' 'KK'
SELECT_INTERSECT -> 'SELECT' '*' 'FROM' 'TT' 'INTERSECT' 'SELECT' '*' 'FROM' 'KK'
```"
4.1.2 带条件查询 ,"```plaintext
S -> SELECT_QUERY
SELECT_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME WHERE_CLAUSE
COLUMN_LIST -> COLUMN | COLUMN ',' COLUMN
COLUMN -> 'NAME' | 'AUTHOR' | 'PUBLISHER' | 'NOWPRICE' | 'ADDRESSID' | 'ADDRESS1' | 'CITY' | 'POSTALCODE' | 'SEX' | 'PHONE' | 'EMAIL' | 'COMMENTS'
TABLE_NAME -> 'PRODUCTION.PRODUCT' | 'PERSON.ADDRESS' | 'PERSON.PERSON' | 'PRODUCTION.PRODUCT_REVIEW'
WHERE_CLAUSE -> 'WHERE' CONDITION
CONDITION -> COMPARISON_CONDITION | BETWEEN_CONDITION | IN_CONDITION | LIKE_CONDITION | NULL_CONDITION | LOGIC_CONDITION
COMPARISON_CONDITION -> COLUMN COMPARISON_OPERATOR VALUE
COMPARISON_OPERATOR -> '=' | '>' | '<' | '>=' | '<=' | '<>'
VALUE -> '10' | '20' | '15' | '7' | '中华书局' | '人民文学出版社' | '___关山%202' | '%洪山%' | '43__7_' | '%汉阳_' | '洪山%' | '%C1*_501' | '%曹雪芹%'
BETWEEN_CONDITION -> COLUMN 'BETWEEN' VALUE 'AND' VALUE
IN_CONDITION -> COLUMN 'IN' '(' VALUE_LIST ')'
VALUE_LIST -> VALUE | VALUE ',' VALUE
LIKE_CONDITION -> COLUMN 'LIKE' VALUE ESCAPE_OPTION
ESCAPE_OPTION -> 'ESCAPE' ESCAPE_CHAR | ''
ESCAPE_CHAR -> '*'
NULL_CONDITION -> COLUMN 'IS' 'NULL' | COLUMN 'IS' 'NOT' 'NULL'
LOGIC_CONDITION -> CONDITION LOGIC_OPERATOR CONDITION
LOGIC_OPERATOR -> 'AND' | 'OR' | 'NOT'
```"
4.1.3 集函数 ,"```plaintext
AGGREGATE_FUNCTION -> COUNT_FUNC | DISTINCT_FUNC | COMPLETE_FUNC | VARIANCE_FUNC | COVARIANCE_FUNC | FIRST_VALUE_FUNC | AREA_MAX_FUNC | FIRST_LAST_FUNC | LISTAGG_FUNC | MEDIAN_FUNC | WM_CONCAT_FUNC
COUNT_FUNC -> 'COUNT' '(' '*' ')'
DISTINCT_FUNC -> 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT' '(' 'DISTINCT' 'column_name_1' ')'
COMPLETE_FUNC -> 'AVG' | 'MAX' | 'MIN' | 'COUNT' | 'SUM' '(' 'ALL' 'value_expression_1' ')'
VARIANCE_FUNC -> 'VAR_POP' | 'VAR_SAMP' | 'VARIANCE' | 'STDDEV_POP' | 'STDDEV_SAMP' | 'STDDEV'
COVARIANCE_FUNC -> 'COVAR_POP' | 'COVAR_SAMP' | 'CORR'
FIRST_VALUE_FUNC -> 'FIRST_VALUE' '(' 'column_name_1' ')'
AREA_MAX_FUNC -> 'AREA_MAX' '(' 'expression_1' ',' 'low_value_1' ',' 'high_value_1' ')'
FIRST_LAST_FUNC -> 'AVG' | 'MAX' | 'MIN' | 'COUNT' | 'SUM' '(' 'ALL' 'value_expression_1' ')' 'KEEP' '(' 'DENSE_RANK' 'FIRST' | 'LAST' 'ORDER_BY_CLAUSE' ')'
LISTAGG_FUNC -> 'LISTAGG' | 'LISTAGG2' '(' 'expression_1' ',' 'expression_2' ')' 'WITHIN' 'GROUP' '(' 'ORDER_BY_CLAUSE' ')'
MEDIAN_FUNC -> 'MEDIAN' '(' 'expression_1' ')'
WM_CONCAT_FUNC -> 'WM_CONCAT' '(' 'expression_1' ')'
ORDER_BY_CLAUSE -> 'ORDER' 'BY' 'column_name_1' 'ASC' | 'DESC'
```"
4.1.4 分析函数 ,"```plaintext
S -> ANALYTIC_FUNCTION | ANALYTIC_FUNCTION_WITH_CLAUSE
ANALYTIC_FUNCTION -> FUNCTION_NAME '(' ARGUMENTS ')' OVER '(' ANALYTIC_CLAUSE ')'
ANALYTIC_FUNCTION_WITH_CLAUSE -> FUNCTION_NAME '(' ARGUMENTS ')' KEEP_CLAUSE OVER '(' PARTITION_BY_CLAUSE ')'

FUNCTION_NAME -> 'COUNT' | 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'VAR_POP' | 'VAR_SAMP' | 'VARIANCE' | 'STDDEV' | 'STDDEV_POP' | 'STDDEV_SAMP' | 'CORR' | 'COVAR_POP' | 'COVAR_SAMP' | 'FIRST_VALUE' | 'LAST_VALUE' | 'LAG' | 'LEAD' | 'NTILE' | 'RANK' | 'DENSE_RANK' | 'ROW_NUMBER' | 'PERCENT_RANK' | 'CUME_DIST' | 'RATIO_TO_REPORT' | 'PERCENTILE_CONT' | 'PERCENTILE_DISC' | 'LISTAGG' | 'WM_CONCAT' | 'NTH_VALUE'

ARGUMENTS -> ARGUMENT | ARGUMENT ',' ARGUMENT
ARGUMENT -> 'argument_value'

KEEP_CLAUSE -> 'KEEP' '(' DENSE_RANK_ORDER ')'
DENSE_RANK_ORDER -> 'DENSE_RANK' 'FIRST' | 'DENSE_RANK' 'LAST'

ANALYTIC_CLAUSE -> PARTITION_BY_CLAUSE ORDER_BY_CLAUSE WINDOW_CLAUSE
PARTITION_BY_CLAUSE -> 'PARTITION' 'BY' PARTITION_EXPR
PARTITION_EXPR -> 'partition_expr_value'

ORDER_BY_CLAUSE -> 'ORDER' 'BY' ORDER_EXPR
ORDER_EXPR -> 'order_expr_value'

WINDOW_CLAUSE -> 'ROWS' WINDOW_RANGE | 'RANGE' WINDOW_RANGE
WINDOW_RANGE -> 'UNBOUNDED' 'PRECEDING' | 'CURRENT' 'ROW' | 'value_expr' 'PRECEDING' | 'value_expr' 'FOLLOWING' | 'BETWEEN' WINDOW_RANGE 'AND' WINDOW_RANGE

LAG_LEAD_FUNCTION -> 'LAG' '(' ARGUMENT ',' 'offset_value' ',' 'default_value' ')' | 'LEAD' '(' ARGUMENT ',' 'offset_value' ',' 'default_value' ')'

FIRST_LAST_VALUE_FUNCTION -> 'FIRST_VALUE' '(' ARGUMENT ')' | 'LAST_VALUE' '(' ARGUMENT ')'

PERCENTILE_FUNCTION -> 'PERCENTILE_CONT' '(' ARGUMENT ')' 'WITHIN' 'GROUP' '(' ORDER_BY_CLAUSE ')' | 'PERCENTILE_DISC' '(' ARGUMENT ')' 'WITHIN' 'GROUP' '(' ORDER_BY_CLAUSE ')'

LISTAGG_FUNCTION -> 'LISTAGG' '(' ARGUMENT ',' 'separator_value' ')' 'WITHIN' 'GROUP' '(' ORDER_BY_CLAUSE ')'

NTH_VALUE_FUNCTION -> 'NTH_VALUE' '(' ARGUMENT ',' 'nth_value' ')' 'FROM' 'FIRST' | 'NTH_VALUE' '(' ARGUMENT ',' 'nth_value' ')' 'FROM' 'LAST'

WM_CONCAT_FUNCTION -> 'WM_CONCAT' '(' ARGUMENT '||' ARGUMENT ')'
```"
4.1.5 情况表达式 ,"```plaintext
CASE_EXPRESSION -> SIMPLE_CASE | SEARCH_CASE
SIMPLE_CASE -> 'CASE' VALUE_EXPRESSION SIMPLE_WHEN_CLAUSE ELSE_CLAUSE 'END'
SEARCH_CASE -> 'CASE' SEARCH_WHEN_CLAUSE ELSE_CLAUSE 'END'
SIMPLE_WHEN_CLAUSE -> 'WHEN' VALUE_EXPRESSION 'THEN' RESULT
SEARCH_WHEN_CLAUSE -> 'WHEN' SEARCH_CONDITION 'THEN' RESULT
RESULT -> VALUE_EXPRESSION | 'NULL'
VALUE_EXPRESSION -> 'valueexp'
SEARCH_CONDITION -> 'searchcondition'
ELSE_CLAUSE -> 'ELSE' RESULT | ''
```"
4.2 连接查询 ,"```nltk
S -> CONNECTION_QUERY
CONNECTION_QUERY -> 'FROM' 'table_name_1' 'table_name_2' JOIN_TYPE
JOIN_TYPE -> 'CROSS JOIN' | 'NATURAL JOIN' | 'INNER JOIN' | 'OUTER JOIN'
```"
4.2.1 交叉连接 ,"```plaintext
S -> CROSS_JOIN_QUERY | FILTERED_JOIN_QUERY
CROSS_JOIN_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 'CROSS JOIN' TABLE_NAME_2
FILTERED_JOIN_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 ',' TABLE_NAME_2 'WHERE' JOIN_CONDITION 'AND' FILTER_CONDITION

COLUMN_LIST -> COLUMN_NAME_1 ',' COLUMN_NAME_2
COLUMN_NAME_1 -> 'T1.HAIRDATE'
COLUMN_NAME_2 -> 'T2.SALESLASTYEAR'
TABLE_NAME_1 -> 'RESOURCES.EMPLOYEE T1'
TABLE_NAME_2 -> 'SALES.SALESPERSON T2'

JOIN_CONDITION -> 'T1.PERSONID = T2.PERSONID'
FILTER_CONDITION -> 'T1.SEX = \'M\''
```"
4.2.2 自然连接(NATURAL  JOIN) ,"```plaintext
S -> SELECT_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_REFERENCE 'NATURAL JOIN' TABLE_REFERENCE
COLUMN_LIST -> COLUMN | COLUMN ',' COLUMN
COLUMN -> 'T1.HAIRDATE' | 'T2.SALESLASTYEAR'
TABLE_REFERENCE -> 'RESOURCES.EMPLOYEE' 'T1' | 'SALES.SALESPERSON' 'T2'
```"
4.2.3 JOIN … USING ,"```plaintext
S -> SELECT_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'JOIN' TABLE_NAME 'USING' '(' COLUMN_NAME ')'
COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_NAME
TABLE_NAME -> 'RESOURCES.EMPLOYEE' | 'SALES.SALESPERSON'
COLUMN_NAME -> 'HAIRDATE' | 'SALESLASTYEAR' | 'EMPLOYEEID'
```"
4.2.4 JOIN…ON ,"```plaintext
JOIN_ON_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 'JOIN' TABLE_NAME_2 'ON' CONDITION
COLUMN_LIST -> COLUMN_NAME_1 ',' COLUMN_NAME_2
TABLE_NAME_1 -> 'RESOURCES.EMPLOYEE' 'T1'
TABLE_NAME_2 -> 'SALES.SALESPERSON' 'T2'
CONDITION -> 'T1.EMPLOYEEID' '=' 'T2.EMPLOYEEID'
COLUMN_NAME_1 -> 'T1.HAIRDATE'
COLUMN_NAME_2 -> 'T2.SALESLASTYEAR'
```"
4.2.5 自连接 ,"```
S -> SELF_JOIN_QUERY
SELF_JOIN_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME ALIAS ',' TABLE_NAME ALIAS 'WHERE' CONDITION
COLUMN_LIST -> COLUMN ',' COLUMN ',' COLUMN
COLUMN -> ALIAS '.' COLUMN_NAME
TABLE_NAME -> 'PURCHASING.VENDOR'
ALIAS -> 'T1' | 'T2'
COLUMN_NAME -> 'NAME' | 'ACTIVEFLAG'
CONDITION -> ALIAS '.' COLUMN_NAME '=' ALIAS '.' COLUMN_NAME
```"
4.2.6 内连接(INNER JOIN) ,"```plaintext
INNER_JOIN -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'INNER JOIN' TABLE_NAME 'ON' JOIN_CONDITION
COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_NAME
COLUMN_NAME -> 'T1.NAME' | 'T2.NAME'
TABLE_NAME -> 'PRODUCTION.PRODUCT_CATEGORY' 'T1' | 'PRODUCTION.PRODUCT_SUBCATEGORY' 'T2'
JOIN_CONDITION -> 'T1.PRODUCT_CATEGORYID' '=' 'T2.PRODUCT_CATEGORYID'
```"
4.2.7 外连接(OUTER JOIN) ,"```plaintext
S -> OUTER_JOIN | PARTITION_OUTER_JOIN | CREATE_TABLE | INSERT_DATA | SELECT_STATEMENT
OUTER_JOIN -> LEFT_OUTER_JOIN | RIGHT_OUTER_JOIN | FULL_OUTER_JOIN
LEFT_OUTER_JOIN -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 'LEFT OUTER JOIN' TABLE_NAME_2 'ON' JOIN_CONDITION
RIGHT_OUTER_JOIN -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 'RIGHT OUTER JOIN' TABLE_NAME_2 'ON' JOIN_CONDITION
FULL_OUTER_JOIN -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 'FULL OUTER JOIN' TABLE_NAME_2 'ON' JOIN_CONDITION
PARTITION_OUTER_JOIN -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 'LEFT JOIN' TABLE_NAME_2 'PARTITION BY' '(' PARTITION_COLUMN ')' 'ON' JOIN_CONDITION 'ORDER BY' ORDER_COLUMN_LIST
CREATE_TABLE -> 'CREATE TABLE' TABLE_NAME '(' COLUMN_DEFINITION ')'
INSERT_DATA -> 'INSERT INTO' TABLE_NAME 'VALUES' '(' VALUE_LIST ')'
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME_1 ',' TABLE_NAME_2 'WHERE' JOIN_CONDITION_WITH_PLUS

COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_LIST
TABLE_NAME_1 -> 'table_name_1'
TABLE_NAME_2 -> 'table_name_2'
JOIN_CONDITION -> 'join_condition'
PARTITION_COLUMN -> 'partition_column'
ORDER_COLUMN_LIST -> 'order_column_1' | 'order_column_1' ',' 'order_column_2'
COLUMN_DEFINITION -> 'column_name_1' 'column_type_1' | 'column_name_1' 'column_type_1' ',' 'column_name_2' 'column_type_2'
VALUE_LIST -> 'value_1' | 'value_1' ',' 'value_2'
JOIN_CONDITION_WITH_PLUS -> 'join_condition_with_plus'
```"
4.3 子查询 ,"```nltk
SUBQUERY -> '(' QUERY_EXPRESSION ')'
QUERY_EXPRESSION -> SELECT_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME WHERE_CLAUSE
COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_LIST
TABLE_NAME -> 'table_name_1'
WHERE_CLAUSE -> 'WHERE' CONDITION
CONDITION -> COLUMN_NAME OPERATOR VALUE
OPERATOR -> '=' | '!=' | '>' | '<' | '>=' | '<='
VALUE -> 'value_1' | 'value_2'
COLUMN_NAME -> 'column_name_1' | 'column_name_2'
```"
4.3.1 标量子查询 ,"```plaintext
SCALAR_SUBQUERY -> SELECT 'VALUE IS' '(' SELECT ADDRESS1 FROM PERSON.ADDRESS WHERE ADDRESSID = 'int_value' ')' FROM PERSON.ADDRESS_TYPE
SCALAR_SUBQUERY -> SELECT 'VALUE IS' LEFT '(' SELECT ADDRESS1 FROM PERSON.ADDRESS WHERE ADDRESSID = 'int_value' ')' 'int_value' FROM PERSON.ADDRESS_TYPE
SCALAR_SUBQUERY -> SELECT 'VALUE IS' '(' SELECT ADDRESS1 CITY FROM PERSON.ADDRESS WHERE ADDRESSID = 'int_value' ')' FROM PERSON.ADDRESS_TYPE
SCALAR_SUBQUERY -> SELECT 'VALUE IS' '(' SELECT ADDRESS1 FROM PERSON.ADDRESS ')' FROM PERSON.ADDRESS_TYPE
SCALAR_SUBQUERY -> DELETE FROM SALES.SALESORDER_DETAIL
SCALAR_SUBQUERY -> SELECT 'VALUE IS' '(' SELECT ORDERQTY FROM SALES.SALESORDER_DETAIL ')' FROM SALES.CUSTOMER
SCALAR_SUBQUERY -> UPDATE PRODUCTION.PRODUCT SET PUBLISHER = '(' SELECT NAME FROM PURCHASING.VENDOR WHERE VENDORID = 'int_value' ')' WHERE PRODUCTID = 'int_value'
SCALAR_SUBQUERY -> UPDATE PRODUCTION.PRODUCT_VENDOR SET STANDARDPRICE = '(' SELECT AVG '(' NOWPRICE ')' FROM PRODUCTION.PRODUCT ')' WHERE PRODUCTID = 'int_value'
SCALAR_SUBQUERY -> INSERT INTO PRODUCTION.PRODUCT_CATEGORY '(' NAME ')' VALUES '(' SELECT NAME FROM PRODUCTION.PRODUCT_SUBCATEGORY WHERE PRODUCT_SUBCATEGORYID = 'int_value' ')'
SCALAR_SUBQUERY -> SELECT NAME '(' SELECT MIN '(' STANDARDPRICE ')' FROM PRODUCTION.PRODUCT_VENDOR T1 WHERE T1.VENDORID = T2.VENDORID ')' FROM PURCHASING.VENDOR T2
```"
4.3.2 表子查询 ,"```plaintext
S -> SELECT_QUERY | SELECT_QUERY_WITH_SUBQUERY | SELECT_QUERY_WITH_JOIN
SELECT_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME WHERE_CLAUSE
SELECT_QUERY_WITH_SUBQUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME WHERE_CLAUSE_WITH_SUBQUERY
SELECT_QUERY_WITH_JOIN -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME JOIN_CLAUSE WHERE_CLAUSE

COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_LIST
COLUMN_NAME -> 'column_name_1' | 'column_name_2'

TABLE_NAME -> 'table_name_1' | 'table_name_2'

WHERE_CLAUSE -> 'WHERE' CONDITION
WHERE_CLAUSE_WITH_SUBQUERY -> 'WHERE' COLUMN_NAME 'IN' '(' SELECT_QUERY ')'

CONDITION -> COLUMN_NAME OPERATOR VALUE
OPERATOR -> '=' | '<' | '>' | '<=' | '>=' | '<>' | 'IN' | 'NOT IN' | 'ANY' | 'ALL'
VALUE -> 'value_1' | 'value_2'

JOIN_CLAUSE -> 'JOIN' TABLE_NAME 'ON' JOIN_CONDITION
JOIN_CONDITION -> TABLE_NAME '.' COLUMN_NAME '=' TABLE_NAME '.' COLUMN_NAME

SUBQUERY -> 'SELECT' COLUMN_NAME 'FROM' TABLE_NAME WHERE_CLAUSE
```"
4.3.3 派生表子查询 ,"```nltk
S -> SELECT_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_LIST WHERE_CLAUSE ORDER_BY_CLAUSE
COLUMN_LIST -> COLUMN | COLUMN ',' COLUMN
COLUMN -> 'T1.PRODUCT_CATEGORYID' | 'T1.NAME' | 'T2.NUM'
TABLE_LIST -> TABLE | TABLE ',' TABLE
TABLE -> 'PRODUCTION.PRODUCT_CATEGORY' 'T1' | DERIVED_TABLE
DERIVED_TABLE -> '(' SELECT_STATEMENT ')' 'AS' 'T2' '(' 'PRODUCT_CATEGORYID' ',' 'NUM' ')'
WHERE_CLAUSE -> 'WHERE' 'T1.PRODUCT_CATEGORYID' '=' 'T2.PRODUCT_CATEGORYID'
ORDER_BY_CLAUSE -> 'ORDER' 'BY' 'T2.NUM' 'DESC'
```"
4.3.4 定量比较 ,"```  
S -> ALL_COMPARISON | ANY_SOME_COMPARISON  
ALL_COMPARISON -> SCALAR_EXPRESSION COMPARISON_OPERATOR 'ALL' TABLE_SUBQUERY  
SCALAR_EXPRESSION -> 'scalar_expression'  
COMPARISON_OPERATOR -> '=' | '>' | '<' | '>=' | '<=' | '<>'  
TABLE_SUBQUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME WHERE_CLAUSE  

ANY_SOME_COMPARISON -> SCALAR_EXPRESSION COMPARISON_OPERATOR 'ANY' TABLE_SUBQUERY  
ANY_SOME_COMPARISON -> SCALAR_EXPRESSION COMPARISON_OPERATOR 'SOME' TABLE_SUBQUERY  

COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_LIST  
COLUMN_NAME -> 'column_name_1' | 'column_name_2'  
TABLE_NAME -> 'table_name_1' | 'table_name_2'  
WHERE_CLAUSE -> 'WHERE' CONDITION  
CONDITION -> COLUMN_NAME COMPARISON_OPERATOR VALUE  
VALUE -> 'value_1' | 'value_2'  
```"
4.3.5 带 EXISTS谓词的子查询 ,"```plaintext
EXISTS_PREDICATE -> 'NOT' 'EXISTS' TABLE_SUBQUERY | 'EXISTS' TABLE_SUBQUERY
TABLE_SUBQUERY -> 'SELECT' '*' 'FROM' 'RESOURCES.EMPLOYEE' 'T2' WHERE_CLAUSE
WHERE_CLAUSE -> 'WHERE' 'T2.EMPLOYEEID' '=' 'T1.EMPLOYEEID' 'AND' 'T2.TITLE' '=' 'string_value'
SELECT_STATEMENT -> 'SELECT' 'T1.EMPLOYEEID' ',' 'T1.STARTDATE' 'FROM' 'RESOURCES.EMPLOYEE_DEPARTMENT' 'T1' 'WHERE' EXISTS_PREDICATE
```"
4.3.6 多列表子查询 ,"```  
S -> SELECT_QUERY  
SELECT_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'WHERE' CONDITION  
COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_NAME  
COLUMN_NAME -> 'VENDORID' | 'NAME' | 'NOWPRICE' | 'ORDERDATE' | 'STATUS' | 'TOTAL'  
TABLE_NAME -> 'PURCHASING.VENDOR' | 'PRODUCTION.PRODUCT' | 'PURCHASING.PURCHASEORDER_HEADER'  
CONDITION -> '(' COLUMN_NAME ',' COLUMN_NAME ')' 'IN' VALUE_LIST  
VALUE_LIST -> '(' VALUE_ITEM ')' | '(' VALUE_ITEM ',' VALUE_ITEM ')'  
VALUE_ITEM -> '(' VALUE ',' VALUE ')'  
VALUE -> '1' | '2' | '海明威' | '上海出版社' | '王树增' | '人民文学出版社' | '采购代表' | '清华大学出版社'  
SUBQUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'WHERE' SUBQUERY_CONDITION  
SUBQUERY_CONDITION -> COLUMN_NAME '=' '采购代表' 'AND' COLUMN_NAME '=' '清华大学出版社'  
```"
4.4 WITH 子句 ,"```plaintext
WITH_CLAUSE -> WITH_FUNCTION_CLAUSE WITH_CTE_CLAUSE | WITH_FUNCTION_CLAUSE | WITH_CTE_CLAUSE
WITH_FUNCTION_CLAUSE -> 'WITH FUNCTION' 'function_name_1'
WITH_CTE_CLAUSE -> 'WITH CTE' 'cte_name_1'
```"
4.4.1 WITH FUNCTION子句 ,"```plaintext
WITH_FUNCTION_CLAUSE -> 'WITH' FUNCTION_DEFINITION
FUNCTION_DEFINITION -> FUNCTION_NAME '(' PARAMETER_LIST ')' 'RETURN' RETURN_TYPE 'AS' FUNCTION_BODY
FUNCTION_NAME -> 'function_name_1'
PARAMETER_LIST -> PARAMETER | PARAMETER ',' PARAMETER
PARAMETER -> PARAMETER_TYPE 'parameter_name_1'
PARAMETER_TYPE -> 'int_value' | 'string_value' | 'unknown_type'
RETURN_TYPE -> 'int_value' | 'string_value' | 'unknown_type'
FUNCTION_BODY -> 'BEGIN' FUNCTION_LOGIC 'END'
FUNCTION_LOGIC -> 'RETURN' EXPRESSION
EXPRESSION -> 'expression_value'

SELECT_STATEMENT -> 'SELECT' FUNCTION_CALL 'FROM' 'dual'
FUNCTION_CALL -> FUNCTION_NAME '(' ARGUMENT ')'
ARGUMENT -> 'int_value' | 'string_value' | 'unknown_value'

WITH_CTE -> 'WITH' CTE_DEFINITION
CTE_DEFINITION -> CTE_NAME '(' COLUMN_LIST ')' 'AS' '(' SELECT_STATEMENT ')'
CTE_NAME -> 'cte_name_1'
COLUMN_LIST -> 'column_name_1' | 'column_name_1' ',' 'column_name_2'

COMPLEX_EXAMPLE -> WITH_FUNCTION_CLAUSE SELECT_STATEMENT 'WHERE' CONDITION
CONDITION -> 'int_value' 'IN' '(' WITH_FUNCTION_CLAUSE SELECT_STATEMENT ')'
```"
4.4.2 WITH CTE子句 ,"```plaintext
WITH_CTE -> NON_RECURSIVE_WITH | RECURSIVE_WITH
NON_RECURSIVE_WITH -> 'WITH' NON_RECURSIVE_CTE_CLAUSE ',' CTE_QUERY_STATEMENT
NON_RECURSIVE_CTE_CLAUSE -> CTE_NAME COLUMN_LIST 'AS' '(' CTE_SUBQUERY ')'
CTE_NAME -> 'cte_name_1'
COLUMN_LIST -> 'column_name_1' | 'column_name_1' ',' 'column_name_2'
CTE_SUBQUERY -> 'cte_subquery_1'
CTE_QUERY_STATEMENT -> 'cte_query_statement_1'

RECURSIVE_WITH -> 'WITH' RECURSIVE_CTE_CLAUSE ',' CTE_QUERY_STATEMENT
RECURSIVE_CTE_CLAUSE -> CTE_NAME '(' COLUMN_LIST ')' 'AS' '(' ANCHOR_MEMBER 'UNION ALL' RECURSIVE_MEMBER ')'
ANCHOR_MEMBER -> 'anchor_member_1'
RECURSIVE_MEMBER -> 'recursive_member_1'
```"
4.5合并查询结果 ,"```plaintext
QUERY_EXPRESSION -> SELECT_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME
COLUMN_LIST -> 'column_name_1' | 'column_name_1' ',' 'column_name_2'
TABLE_NAME -> 'table_name_1' | 'table_name_2'

UNION_STATEMENT -> QUERY_EXPRESSION 'UNION' UNION_OPTION QUERY_EXPRESSION
UNION_OPTION -> 'ALL' | 'DISTINCT' | ''

ORDER_BY_CLAUSE -> 'ORDER' 'BY' ORDER_COLUMN
ORDER_COLUMN -> 'column_name_1' | '1'
```"
4.6 GROUP BY和 HAVING子句 ,"```plaintext
GROUP_BY_CLAUSE -> 'GROUP' 'BY' 'column_name_1'
HAVING_CLAUSE -> 'HAVING' 'condition_value'
```"
4.6.1 GROUP BY子句的使用 ,"```plaintext
GROUP_BY_CLAUSE -> 'GROUP' 'BY' GROUP_BY_ITEM | 'GROUP' 'BY' GROUP_BY_ITEM ',' GROUP_BY_ITEM
GROUP_BY_ITEM -> GROUPING_ITEM | ROLLUP_ITEM | CUBE_ITEM | GROUPING_SETS_ITEM
GROUPING_ITEM -> VALUE_EXPRESSION
ROLLUP_ITEM -> 'ROLLUP' '(' GROUPING_ITEM ')'
CUBE_ITEM -> 'CUBE' '(' GROUPING_ITEM ')'
GROUPING_SETS_ITEM -> 'GROUPING' 'SETS' '(' GROUP_ITEM | 'GROUPING' 'SETS' '(' GROUP_ITEM ',' GROUP_ITEM ')'
GROUP_ITEM -> GROUPING_ITEM | '(' GROUPING_ITEM | '(' GROUPING_ITEM ',' GROUPING_ITEM ')' | '()'
VALUE_EXPRESSION -> 'value_expression_unknown'
```"
4.6.2 ROLLUP的使用 ,"```plaintext
S -> GROUP_BY_ROLLUP | SELECT_STATEMENT
GROUP_BY_ROLLUP -> 'GROUP' 'BY' 'ROLLUP' '(' GROUPING_ITEMS ')'
GROUPING_ITEMS -> GROUPING_ITEM | GROUPING_ITEM ',' GROUPING_ITEM
GROUPING_ITEM -> COLUMN_NAME | VALUE_EXPRESSION
COLUMN_NAME -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_1'

SELECT_STATEMENT -> 'SELECT' SELECT_LIST 'FROM' TABLE_NAME 'GROUP' 'BY' GROUP_BY_CLAUSE
SELECT_LIST -> SELECT_ITEM | SELECT_ITEM ',' SELECT_ITEM
SELECT_ITEM -> COLUMN_NAME | 'COUNT' '(' '*' ')' 'AS' 'NUMS'
TABLE_NAME -> 'PERSON.ADDRESS'
GROUP_BY_CLAUSE -> GROUP_BY_ROLLUP | GROUP_BY_COLUMNS
GROUP_BY_COLUMNS -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_NAME

UNION_ALL -> 'UNION' 'ALL' SELECT_STATEMENT
```"
4.6.3 CUBE的使用 ,"```plaintext
S -> GROUP_BY_CUBE
GROUP_BY_CUBE -> 'GROUP' 'BY' 'CUBE' '(' GROUPING_ITEMS ')'
GROUPING_ITEMS -> GROUPING_ITEM | GROUPING_ITEM ',' GROUPING_ITEM
GROUPING_ITEM -> COLUMN_NAME | VALUE_EXPRESSION
COLUMN_NAME -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_1'

SELECT_STATEMENT -> 'SELECT' SELECT_LIST 'FROM' TABLE_NAME 'GROUP' 'BY' GROUP_BY_CUBE
SELECT_LIST -> SELECT_ITEM | SELECT_ITEM ',' SELECT_ITEM
SELECT_ITEM -> COLUMN_NAME | 'COUNT' '(' '*' ')' 'AS' 'NUMS'
TABLE_NAME -> 'PERSON.ADDRESS'

UNION_ALL_STATEMENT -> SELECT_STATEMENT 'UNION' 'ALL' SELECT_STATEMENT 'UNION' 'ALL' SELECT_STATEMENT 'UNION' 'ALL' SELECT_STATEMENT
```"
4.6.4 GROUPING的使用 ,"```plaintext
GROUPING_ITEM -> 'GROUPING' '(' GROUPING_COLUMN ')'
GROUPING_COLUMN -> 'column_name_1' | 'value_expression_1'

SELECT_STATEMENT -> 'SELECT' GROUPING_ITEM 'AS' 'G_CITY' ',' GROUPING_ITEM 'AS' 'G_ADD' ',' 'CITY' ',' 'ADDRESS1' ',' 'COUNT' '(' '*' ')' 'AS' 'NUMS' 'FROM' 'PERSON.ADDRESS' 'GROUP' 'BY' 'ROLLUP' '(' 'CITY' ',' 'ADDRESS1' ')'
```"
4.6.5 GROUPING SETS的使用 ,"```plaintext
GROUP_BY_GROUPING_SETS -> 'GROUP' 'BY' 'GROUPING' 'SETS' '(' GROUPING_SETS_ITEMS ')'
GROUPING_SETS_ITEMS -> GROUPING_SETS_ITEM | GROUPING_SETS_ITEM ',' GROUPING_SETS_ITEM
GROUPING_SETS_ITEM -> EXPRESSION | '(' ')' | '(' EXPRESSION_LIST ')'
EXPRESSION_LIST -> EXPRESSION | EXPRESSION ',' EXPRESSION
EXPRESSION -> COLUMN_NAME | VALUE_EXPRESSION
COLUMN_NAME -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_1'
```"
4.6.6 GROUPING_ID的使用 ,"```plaintext
GROUPING_ID_ITEM -> 'GROUPING_ID' '(' GROUPING_ITEM_LIST ')'
GROUPING_ITEM_LIST -> GROUPING_ITEM | GROUPING_ITEM ',' GROUPING_ITEM
GROUPING_ITEM -> COLUMN_NAME | VALUE_EXPRESSION
COLUMN_NAME -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_1'
```"
4.6.7 GROUP_ID的使用 ,"```
GROUP_ID_ITEM -> 'GROUP_ID()'
SELECT_STATEMENT -> 'SELECT' SELECT_LIST 'FROM' TABLE_NAME 'GROUP BY' GROUP_BY_CLAUSE
SELECT_LIST -> GROUPING_FUNCTION 'AS' ALIAS ',' GROUPING_FUNCTION 'AS' ALIAS ',' GROUP_ID_ITEM 'AS' ALIAS ',' COLUMN_NAME ',' COLUMN_NAME ',' COUNT_FUNCTION
GROUPING_FUNCTION -> 'GROUPING' '(' COLUMN_NAME ')'
COUNT_FUNCTION -> 'COUNT' '(' '*' ')'
TABLE_NAME -> 'PERSON.ADDRESS'
GROUP_BY_CLAUSE -> 'ROLLUP' '(' COLUMN_NAME ',' COLUMN_NAME ')' ',' COLUMN_NAME
COLUMN_NAME -> 'CITY' | 'ADDRESS1'
ALIAS -> 'G_CITY' | 'G_ADD' | 'GID' | 'NUMS'
```"
4.6.8 HAVING子句的使用 ,"```plaintext
HAVING_CLAUSE -> 'HAVING' SEARCH_CONDITION
SEARCH_CONDITION -> EXPRESSION
EXPRESSION -> 'expression_value'

SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_LIST WHERE_CLAUSE GROUP_BY_CLAUSE HAVING_CLAUSE ORDER_BY_CLAUSE
COLUMN_LIST -> COLUMN | COLUMN ',' COLUMN
COLUMN -> COLUMN_NAME 'AS' ALIAS_NAME
COLUMN_NAME -> 'column_name_1'
ALIAS_NAME -> 'alias_name_1'

TABLE_LIST -> TABLE_NAME | TABLE_NAME ',' TABLE_NAME
TABLE_NAME -> 'table_name_1'

WHERE_CLAUSE -> 'WHERE' CONDITION
CONDITION -> 'condition_value'

GROUP_BY_CLAUSE -> 'GROUP BY' GROUP_BY_COLUMN
GROUP_BY_COLUMN -> 'group_by_column_1'

ORDER_BY_CLAUSE -> 'ORDER BY' ORDER_BY_COLUMN
ORDER_BY_COLUMN -> 'order_by_column_1'
```"
4.7 ORDER BY子句 ,"```plaintext
ORDER_BY_CLAUSE -> 'ORDER' SIBLINGS_OPTION 'BY' ORDER_BY_LIST
SIBLINGS_OPTION -> 'SIBLINGS' | ''
ORDER_BY_LIST -> ORDER_BY_ITEM | ORDER_BY_ITEM ',' ORDER_BY_ITEM
ORDER_BY_ITEM -> EXP SORT_OPTION NULLS_OPTION
EXP -> UNSIGNED_INTEGER | COLUMN_SPEC | VALUE_EXPRESSION
SORT_OPTION -> 'ASC' | 'DESC' | ''
NULLS_OPTION -> 'NULLS FIRST' | 'NULLS LAST' | ''
UNSIGNED_INTEGER -> 'unsigned_integer_value'
COLUMN_SPEC -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_unknown'
```"
4.8 FOR UPDATE子句 ,"```plaintext
FOR_UPDATE_CLAUSE -> FOR_READ_ONLY | FOR_UPDATE_OPTION
FOR_READ_ONLY -> 'FOR READ ONLY'
FOR_UPDATE_OPTION -> 'FOR UPDATE' OF_OPTION LOCK_OPTION
OF_OPTION -> 'OF' SELECTION_LIST | ''
SELECTION_LIST -> TABLE_COLUMN | TABLE_COLUMN ',' TABLE_COLUMN
TABLE_COLUMN -> SCHEMA_NAME '.' TABLE_NAME '.' COLUMN_NAME
SCHEMA_NAME -> 'schema_name_1'
TABLE_NAME -> 'table_name_1'
COLUMN_NAME -> 'column_name_1'
LOCK_OPTION -> NOWAIT | WAIT | SKIP_LOCKED | ''
NOWAIT -> 'NOWAIT'
WAIT -> 'WAIT' 'int_value'
SKIP_LOCKED -> 'SKIP LOCKED' | 'int_value' 'SKIP LOCKED'
```"
4.9 TOP子句 ,"```
TOP_CLAUSE -> TOP_N | TOP_N1_N2 | TOP_N_PERCENT | TOP_N_WITH_TIES | TOP_N_PERCENT_WITH_TIES
TOP_N -> 'TOP' 'int_value'
TOP_N1_N2 -> 'TOP' 'int_value' ',' 'int_value'
TOP_N_PERCENT -> 'TOP' 'int_value' 'PERCENT'
TOP_N_WITH_TIES -> 'TOP' 'int_value' 'WITH' 'TIES'
TOP_N_PERCENT_WITH_TIES -> 'TOP' 'int_value' 'PERCENT' 'WITH' 'TIES'
```"
4.10 LIMIT限定条件 ,"```nltk
LIMIT_CLAUSE -> 'LIMIT' 'limit_value'
ROW_LIMIT_CLAUSE -> 'ROW_LIMIT' 'row_limit_value'
```"
4.10.1 LIMIT子句 ,"```plaintext
LIMIT_CLAUSE -> LIMIT_CLAUSE_1 | LIMIT_CLAUSE_2
LIMIT_CLAUSE_1 -> 'LIMIT' RECORD_COUNT | RECORD_COUNT ',' RECORD_COUNT | RECORD_COUNT 'OFFSET' OFFSET_VALUE
LIMIT_CLAUSE_2 -> 'OFFSET' OFFSET_VALUE 'LIMIT' RECORD_COUNT
RECORD_COUNT -> 'int_value'
OFFSET_VALUE -> 'int_value'
```"
4.10.2 ROW_LIMIT子句 ,"```plaintext
ROW_LIMIT_CLAUSE -> OFFSET_CLAUSE FETCH_CLAUSE | FETCH_CLAUSE
OFFSET_CLAUSE -> 'OFFSET' 'offset_value' 'ROW' | 'OFFSET' 'offset_value' 'ROWS'
FETCH_CLAUSE -> 'FETCH' FETCH_DIRECTION FETCH_SIZE FETCH_PERCENT FETCH_ROW_TYPE FETCH_OPTION
FETCH_DIRECTION -> 'FIRST' | 'NEXT'
FETCH_SIZE -> 'size_value'
FETCH_PERCENT -> 'PERCENT' | ''
FETCH_ROW_TYPE -> 'ROW' | 'ROWS'
FETCH_OPTION -> 'ONLY' | 'WITH TIES'
```"
4.11 全文检索 ,"```plaintext
S -> CONTAINS_QUERY | CREATE_CONTEXT_INDEX | ALTER_CONTEXT_INDEX | DROP_CONTEXT_INDEX | SELECT_QUERY
CONTAINS_QUERY -> 'CONTAINS' '(' COLUMN_NAME ',' SEARCH_CONDITION ')'
SEARCH_CONDITION -> BOOLEAN_TERM | SEARCH_CONDITION LOGICAL_OPERATOR BOOLEAN_TERM
BOOLEAN_TERM -> 'string_value'
LOGICAL_OPERATOR -> 'AND' | 'OR' | 'AND NOT'
COLUMN_NAME -> 'column_name_1'

CREATE_CONTEXT_INDEX -> 'CREATE' 'CONTEXT' 'INDEX' INDEX_NAME 'ON' TABLE_NAME '(' COLUMN_NAME ')' 'LEXER' LEXER_NAME
ALTER_CONTEXT_INDEX -> 'ALTER' 'CONTEXT' 'INDEX' INDEX_NAME 'ON' TABLE_NAME 'REBUILD'
DROP_CONTEXT_INDEX -> 'DROP' 'CONTEXT' 'INDEX' INDEX_NAME 'ON' TABLE_NAME

SELECT_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'WHERE' WHERE_CONDITION
WHERE_CONDITION -> 'CONTAINS' '(' COLUMN_NAME ',' SEARCH_CONDITION ')' | 'NOT' 'CONTAINS' '(' COLUMN_NAME ',' SEARCH_CONDITION ')'
COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_NAME
TABLE_NAME -> 'table_name_1'
INDEX_NAME -> 'index_name_1'
LEXER_NAME -> 'lexer_name_1'
```"
4.12 层次查询子句 ,"```
S -> HIERARCHICAL_QUERY_CLAUSE
HIERARCHICAL_QUERY_CLAUSE -> '层次查询子句' HIERARCHICAL_QUERY_INFO
HIERARCHICAL_QUERY_INFO -> '层次查询相关的伪列' | '层次查询相关的函数' | '层次查询相关的操作符'
```"
4.12.1 层次查询子句 ,"```plaintext
HIERARCHICAL_QUERY_CLAUSE -> CONNECT_BY_START_WITH | START_WITH_CONNECT_BY
CONNECT_BY_START_WITH -> 'CONNECT' 'BY' NOCYCLE_OPTION CONNECT_CONDITION START_WITH_OPTION
START_WITH_CONNECT_BY -> 'START' 'WITH' START_CONDITION 'CONNECT' 'BY' NOCYCLE_OPTION CONNECT_CONDITION
NOCYCLE_OPTION -> 'NOCYCLE' | ''
CONNECT_CONDITION -> LOGICAL_EXPRESSION
START_CONDITION -> LOGICAL_EXPRESSION
START_WITH_OPTION -> 'START' 'WITH' START_CONDITION | ''
LOGICAL_EXPRESSION -> 'logical_expression'
```"
4.12.2 层次查询相关伪列 ,"```text
LEVEL -> 'LEVEL'
CONNECT_BY_ISLEAF -> 'CONNECT_BY_ISLEAF'
CONNECT_BY_ISCYCLE -> 'CONNECT_BY_ISCYCLE'
```"
4.12.3 层次查询相关操作符 ,"```plaintext
S -> PRIOR_QUERY | CONNECT_BY_ROOT_QUERY
PRIOR_QUERY -> 'SELECT' 'HIGH_DEP' ',' 'DEP_NAME' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'NOCYCLE' PRIOR_EXPRESSION
PRIOR_EXPRESSION -> 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' | 'DEP_NAME' '=' 'PRIOR' 'HIGH_DEP'
CONNECT_BY_ROOT_QUERY -> 'SELECT' 'CONNECT_BY_ROOT' 'column_name_1' 'FROM' 'table_name_1'
```"
4.12.4 层次查询相关函数 ,"```plaintext
SYS_CONNECT_BY_PATH -> 'SYS_CONNECT_BY_PATH' '(' 'col_name_1' ',' 'char_value' ')'
```"
4.12.5 层次查询层内排序 ,"```plaintext
ORDER_SIBLINGS_BY -> 'ORDER' 'SIBLINGS' 'BY' ORDER_BY_LIST
ORDER_BY_LIST -> 'order_by_list'
```"
4.12.6 层次查询的限制 ,"```plaintext
S -> HIERARCHICAL_QUERY | HIERARCHICAL_QUERY_WITH_START | HIERARCHICAL_QUERY_WITH_PSEUDO_COLUMNS | HIERARCHICAL_QUERY_WITH_FILTER | HIERARCHICAL_QUERY_WITH_ORDER | HIERARCHICAL_QUERY_WITH_SIBLINGS_ORDER | HIERARCHICAL_QUERY_WITH_ROOT_OPERATOR | HIERARCHICAL_QUERY_WITH_PATH_FUNCTION

HIERARCHICAL_QUERY -> 'SELECT' 'HIGH_DEP' ',' 'DEP_NAME' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP'
HIERARCHICAL_QUERY_WITH_START -> 'SELECT' 'HIGH_DEP' ',' 'DEP_NAME' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' 'START' 'WITH' 'DEP_NAME' '=' 'string_value'
HIERARCHICAL_QUERY_WITH_PSEUDO_COLUMNS -> 'SELECT' 'LEVEL' ',' 'CONNECT_BY_ISLEAF' 'ISLEAF' ',' 'CONNECT_BY_ISCYCLE' 'ISCYCLE' ',' 'HIGH_DEP' ',' 'DEP_NAME' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' 'START' 'WITH' 'DEP_NAME' '=' 'string_value'
HIERARCHICAL_QUERY_WITH_FILTER -> 'SELECT' 'LEVEL' ',' '*' 'FROM' 'OTHER.DEPARTMENT' 'WHERE' 'HIGH_DEP' '=' 'string_value' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP'
HIERARCHICAL_QUERY_WITH_ORDER -> 'SELECT' '*' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' 'START' 'WITH' 'DEP_NAME' '=' 'string_value' 'ORDER' 'BY' 'HIGH_DEP'
HIERARCHICAL_QUERY_WITH_SIBLINGS_ORDER -> 'SELECT' 'HIGH_DEP' ',' 'DEP_NAME' ',' 'LEVEL' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' 'START' 'WITH' 'DEP_NAME' '=' 'string_value' 'ORDER' 'SIBLINGS' 'BY' 'DEP_NAME'
HIERARCHICAL_QUERY_WITH_ROOT_OPERATOR -> 'SELECT' 'CONNECT_BY_ROOT' 'DEP_NAME' ',' '*' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' 'START' 'WITH' 'DEP_NAME' '=' 'string_value'
HIERARCHICAL_QUERY_WITH_PATH_FUNCTION -> 'SELECT' 'SYS_CONNECT_BY_PATH' '(' 'DEP_NAME' ',' 'string_value' ')' 'PATH' ',' '*' 'FROM' 'OTHER.DEPARTMENT' 'CONNECT' 'BY' 'PRIOR' 'DEP_NAME' '=' 'HIGH_DEP' 'START' 'WITH' 'DEP_NAME' '=' 'string_value'
```"
4.13 并行查询 ,"```plaintext
S -> PARALLEL_QUERY_SETUP | PARALLEL_QUERY_EXECUTION
PARALLEL_QUERY_SETUP -> SET_PARAMETERS
SET_PARAMETERS -> SET_MAX_PARALLEL_DEGREE | SET_PARALLEL_POLICY | SET_PARALLEL_THRD_NUM
SET_MAX_PARALLEL_DEGREE -> 'MAX_PARALLEL_DEGREE' 'int_value'
SET_PARALLEL_POLICY -> 'PARALLEL_POLICY' 'int_value'
SET_PARALLEL_THRD_NUM -> 'PARALLEL_THRD_NUM' 'int_value'

PARALLEL_QUERY_EXECUTION -> SQL_STATEMENT | SQL_STATEMENT_WITH_HINT
SQL_STATEMENT -> 'SELECT' '*' 'FROM' 'table_name_1'
SQL_STATEMENT_WITH_HINT -> 'SELECT' '/*+' 'PARALLEL' '(' 'int_value' ')' '*/' '*' 'FROM' 'table_name_1'

PARALLEL_POLICY_VALUE -> '0' | '1' | '2'
MAX_PARALLEL_DEGREE_VALUE -> 'int_value'
PARALLEL_THRD_NUM_VALUE -> 'int_value'
```"
4.14 ROWNUM ,"```plaintext
ROWNUM -> 'ROWNUM'
SELECT_STATEMENT -> 'SELECT' '*' 'FROM' 'RESOURCES.EMPLOYEE' WHERE_CLAUSE
WHERE_CLAUSE -> 'WHERE' ROWNUM_COMPARISON
ROWNUM_COMPARISON -> ROWNUM OP EXPRESSION
OP -> '<' | '<=' | '>' | '>=' | '=' | '<>'
EXPRESSION -> 'immediate_value' | 'parameter_value' | 'variable_value'
ORDER_BY_CLAUSE -> 'ORDER' 'BY' 'EMPLOYEEID'
SUBQUERY -> 'SELECT' '*' 'FROM' 'RESOURCES.EMPLOYEE' ORDER_BY_CLAUSE
TOP_STATEMENT -> 'SELECT' 'TOP' '10' '*' 'FROM' 'RESOURCES.EMPLOYEE' ORDER_BY_CLAUSE
```"
4.15 数组查询 ,"```nltk
S -> SELECT_STATEMENT | DECLARE_STATEMENT
SELECT_STATEMENT -> 'SELECT' '*' 'FROM' 'ARRAY' ARRAY_VALUE
DECLARE_STATEMENT -> 'DECLARE' TYPE_DEFINITION ARRAY_DEFINITION BEGIN_STATEMENT 'END'

TYPE_DEFINITION -> 'TYPE' RECORD_TYPE 'IS' 'RECORD' '(' RECORD_MEMBERS ')'
RECORD_TYPE -> 'rrr'
RECORD_MEMBERS -> 'x' 'INT' ',' 'y' 'INT'

ARRAY_DEFINITION -> 'TYPE' ARRAY_TYPE 'IS' 'ARRAY' RECORD_TYPE '[]'
ARRAY_TYPE -> 'ccc'

BEGIN_STATEMENT -> 'BEGIN' ARRAY_INITIALIZATION LOOP_STATEMENT SELECT_JOIN_STATEMENT
ARRAY_INITIALIZATION -> ARRAY_VARIABLE '=' 'NEW' RECORD_TYPE '[' INT_VALUE ']'
ARRAY_VARIABLE -> 'c'

LOOP_STATEMENT -> 'FOR' LOOP_VARIABLE 'IN' INT_VALUE '..' INT_VALUE 'LOOP' ASSIGNMENT_STATEMENT 'END' 'LOOP'
LOOP_VARIABLE -> 'i'
ASSIGNMENT_STATEMENT -> ARRAY_VARIABLE '[' LOOP_VARIABLE ']' '.' 'x' '=' LOOP_VARIABLE ',' ARRAY_VARIABLE '[' LOOP_VARIABLE ']' '.' 'y' '=' LOOP_VARIABLE '*' INT_VALUE

SELECT_JOIN_STATEMENT -> 'SELECT' ARRAY_VARIABLE '.' 'x' ',' 'o' '.' 'name' 'FROM' 'ARRAY' ARRAY_VARIABLE 'arr' ',' 'SYSOBJECTS' 'o' 'WHERE' 'arr' '.' 'x' '=' 'o' '.' 'id'

ARRAY_VALUE -> 'NEW' 'INT' '[' INT_VALUE ']' '{' INT_VALUE '}'
INT_VALUE -> 'int_value'
```"
4.16 查看执行计划与执行跟踪统计 ,"```plaintext
S -> '查看执行计划与执行跟踪统计'
```"
4.16.1 EXPLAIN ,"```plaintext
EXPLAIN_STATEMENT -> 'EXPLAIN' SQL_STATEMENT
SQL_STATEMENT -> DELETE_STATEMENT | INSERT_STATEMENT | SELECT_STATEMENT | UPDATE_STATEMENT
DELETE_STATEMENT -> 'delete_sql_statement'
INSERT_STATEMENT -> 'insert_sql_statement'
SELECT_STATEMENT -> 'select_sql_statement'
UPDATE_STATEMENT -> 'update_sql_statement'
```"
4.16.2 EXPLAIN FOR ,"```plaintext
EXPLAIN_FOR -> 'EXPLAIN' AS_OPTION 'FOR' SQL_STATEMENT
AS_OPTION -> 'AS' 'plan_name_1' | ''
SQL_STATEMENT -> DELETE_STATEMENT | INSERT_STATEMENT | SELECT_STATEMENT | UPDATE_STATEMENT
DELETE_STATEMENT -> 'delete_sql_statement'
INSERT_STATEMENT -> 'insert_sql_statement'
SELECT_STATEMENT -> 'select_sql_statement'
UPDATE_STATEMENT -> 'update_sql_statement'
```"
4.17 SAMPLE子句 ,"```plaintext
SAMPLE_CLAUSE -> 'SAMPLE' '(' 'expression_value' ')' 
                | 'SAMPLE' '(' 'expression_value' ')' 'SEED' '(' 'expression_value' ')'
                | 'SAMPLE' 'BLOCK' '(' 'expression_value' ')'
                | 'SAMPLE' 'BLOCK' '(' 'expression_value' ')' 'SEED' '(' 'expression_value' ')'
```"
4.18 水平分区表查询 ,"```plaintext
PARTITIONED_TABLE -> SCHEMA_NAME '.' BASE_TABLE_NAME 'PARTITION' '(' FIRST_LEVEL_PARTITION_NAME ')' | SCHEMA_NAME '.' BASE_TABLE_NAME 'PARTITION' 'FOR' '(' EXPRESSION ',' EXPRESSION ')' | SCHEMA_NAME '.' BASE_TABLE_NAME 'SUBPARTITION' '(' SUBPARTITION_NAME ')' | SCHEMA_NAME '.' BASE_TABLE_NAME 'SUBPARTITION' 'FOR' '(' EXPRESSION ',' EXPRESSION ')'
SCHEMA_NAME -> 'schema_name_1'
BASE_TABLE_NAME -> 'base_table_name_1'
FIRST_LEVEL_PARTITION_NAME -> 'first_level_partition_name_1'
SUBPARTITION_NAME -> 'subpartition_name_1'
EXPRESSION -> 'expression_value'

SELECT_STATEMENT -> 'SELECT' '*' 'FROM' BASE_TABLE_NAME | 'SELECT' '*' 'FROM' BASE_TABLE_NAME 'PARTITION' '(' FIRST_LEVEL_PARTITION_NAME ')' | 'SELECT' '*' 'FROM' BASE_TABLE_NAME 'SUBPARTITION' '(' SUBPARTITION_NAME ')'

CREATE_TABLE_STATEMENT -> 'CREATE' 'TABLE' TABLE_NAME '(' COLUMN_DEFINITIONS ')' PARTITION_DEFINITIONS
TABLE_NAME -> 'table_name_1'
COLUMN_DEFINITIONS -> COLUMN_DEFINITION | COLUMN_DEFINITION ',' COLUMN_DEFINITIONS
COLUMN_DEFINITION -> COLUMN_NAME DATA_TYPE COLUMN_CONSTRAINTS
COLUMN_NAME -> 'column_name_1'
DATA_TYPE -> 'VARCHAR' '(' INT_VALUE ')' | 'INT' | 'DATETIME' | 'BLOB'
COLUMN_CONSTRAINTS -> 'CHECK' '(' CHECK_CONDITION ')' | ''
CHECK_CONDITION -> COLUMN_NAME 'IN' '(' VALUE_LIST ')'
VALUE_LIST -> VALUE | VALUE ',' VALUE_LIST
VALUE -> 'value_1'

PARTITION_DEFINITIONS -> 'PARTITION' 'BY' PARTITION_TYPE '(' COLUMN_NAME ')' SUBPARTITION_DEFINITIONS
PARTITION_TYPE -> 'LIST' | 'HASH'
SUBPARTITION_DEFINITIONS -> 'SUBPARTITION' 'BY' PARTITION_TYPE '(' COLUMN_NAME ')' 'SUBPARTITION' 'TEMPLATE' '(' SUBPARTITION_TEMPLATES ')' | 'PARTITIONS' INT_VALUE 'STORE' 'IN' '(' TABLESPACE_LIST ')'
SUBPARTITION_TEMPLATES -> SUBPARTITION_TEMPLATE | SUBPARTITION_TEMPLATE ',' SUBPARTITION_TEMPLATES
SUBPARTITION_TEMPLATE -> 'SUBPARTITION' SUBPARTITION_NAME 'VALUES' '(' VALUE ')' | 'SUBPARTITION' SUBPARTITION_NAME 'VALUES' 'LESS' 'THAN' '(' VALUE ')' | 'SUBPARTITION' SUBPARTITION_NAME 'STORAGE' '(' 'ON' TABLESPACE_NAME ')'
TABLESPACE_NAME -> 'tablespace_name_1'
TABLESPACE_LIST -> TABLESPACE_NAME | TABLESPACE_NAME ',' TABLESPACE_LIST
```"
5.1 数据插入语句 ,"```plaintext
INSERT_EXPR -> '@' 'INSERT' SINGLE_INSERT_STMT | MULTI_INSERT_STMT ';'
SINGLE_INSERT_STMT -> 'INTO' FULL_TV_NAME T_ALIAS INSERT_TAIL RETURN_INTO_OBJ
FULL_TV_NAME -> SINGLE_TABLE_REF | SCHEMA_NAME '.' TABLE_NAME 'INDEX' INDEX_NAME | SCHEMA_NAME '.' TABLE_NAME 'PARTITION' '(' PARTITION_NAME ')' | QUERY_EXP
SINGLE_TABLE_REF -> SCHEMA_NAME '.' TABLE_OR_VIEW_NAME
TABLE_OR_VIEW_NAME -> TABLE_NAME | VIEW_NAME
QUERY_EXP -> '(' QUERY_EXP ')' 'AS' TABLE_ALIAS
T_ALIAS -> 'AS' TABLE_ALIAS
INSERT_TAIL -> '(' COLUMN_NAME ',' COLUMN_NAME ')' INSERT_ACTION
INSERT_ACTION -> 'VALUES' INS_VALUE | QUERY_EXP | '(' QUERY_EXP ')' | 'DEFAULT' 'VALUES' | 'TABLE' FULL_TV_NAME
RETURN_INTO_OBJ -> 'RETURN' EXPR 'INTO' DATA_ITEM | 'RETURNING' 'BULK' 'COLLECT' 'INTO' DATA_ITEM
MULTI_INSERT_STMT -> 'ALL' MULTI_INSERT_INTO_LIST QUERY_EXP | 'ALL' MULTI_INSERT_INTO_CONDITION_LIST MULTI_INSERT_INTO_ELSE QUERY_EXP
MULTI_INSERT_INTO_LIST -> INSERT_INTO_SINGLE INSERT_INTO_SINGLE
INSERT_INTO_SINGLE -> 'INTO' FULL_TV_NAME T_ALIAS '(' COLUMN_NAME ',' COLUMN_NAME ')' 'VALUES' INS_VALUE
INS_VALUE -> '(' EXPR '|' 'DEFAULT' ',' EXPR '|' 'DEFAULT' ')' ',' '(' EXPR '|' 'DEFAULT' ',' EXPR '|' 'DEFAULT' ')'
MULTI_INSERT_INTO_CONDITION_LIST -> INSERT_INTO_SINGLE_CONDITION INSERT_INTO_SINGLE_CONDITION
INSERT_INTO_SINGLE_CONDITION -> 'WHEN' BOOL_EXP 'THEN' MULTI_INSERT_INTO_LIST
MULTI_INSERT_INTO_ELSE -> 'ELSE' MULTI_INSERT_INTO_LIST
```"
5.2 数据修改语句 ,"```plaintext
UPDATE -> 'UPDATE' UPDATE_LIST UPDATE_CLAUSE
UPDATE_LIST -> TABLE_REFERENCE | TABLE_REFERENCE ',' TABLE_REFERENCE
UPDATE_CLAUSE -> SET_SINGLE_COLUMN | SET_MULTI_COLUMN
SET_SINGLE_COLUMN -> 'SET' COLUMN_NAME '=' VALUE_EXPRESSION 'DEFAULT' FROM_CLAUSE WHERE_CLAUSE RETURN_INTO_OBJ
SET_MULTI_COLUMN -> 'SET' COLUMN_NAME ',' COLUMN_NAME '=' SUBQUERY
TABLE_REFERENCE -> 'table_reference_name_1'
COLUMN_NAME -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_1'
FROM_CLAUSE -> 'FROM' TABLE_REFERENCE | ''
WHERE_CLAUSE -> 'WHERE' CONDITION_EXPRESSION | ''
CONDITION_EXPRESSION -> 'condition_expression_1'
RETURN_INTO_OBJ -> RETURN_INTO | RETURNING_BULK_COLLECT_INTO | ''
RETURN_INTO -> 'RETURN' COLUMN_NAME ',' COLUMN_NAME 'INTO' RESULT_OBJECT
RETURNING_BULK_COLLECT_INTO -> 'RETURNING' COLUMN_NAME ',' COLUMN_NAME 'BULK COLLECT INTO' RESULT_OBJECT
RESULT_OBJECT -> 'array_name_1' | 'variable_name_1'
SUBQUERY -> 'subquery_1'
```"
5.3 数据删除语句 ,"```plaintext
DELETE_STATEMENT -> 'DELETE' FROM_OPTION TABLE_REF WHERE_OPTION RETURN_OPTION
FROM_OPTION -> 'FROM' | ''
TABLE_REF -> SCHEMA_NAME '.' TABLE_NAME | TABLE_NAME | QUERY_EXPRESSION
SCHEMA_NAME -> 'schema_name_1'
TABLE_NAME -> 'table_name_1' | 'view_name_1'
QUERY_EXPRESSION -> '(' QUERY_EXPR ')' ALIAS_OPTION
QUERY_EXPR -> 'query_expression_1'
ALIAS_OPTION -> 'AS' 'alias_name_1' NEW_COLUMN_OPTION | ''
NEW_COLUMN_OPTION -> 'new_column_1' | ''
WHERE_OPTION -> 'WHERE' 'condition_expression_1' | ''
RETURN_OPTION -> 'RETURN' COLUMN_LIST 'INTO' RESULT_OBJECT | ''
COLUMN_LIST -> 'column_name_1' | 'column_name_1' ',' 'column_name_2'
RESULT_OBJECT -> 'array_name_1' | 'variable_name_1'
```"
5.4 MERGE INTO语句 ,"```plaintext
MERGE_INTO_STATEMENT -> 'MERGE' 'INTO' MERGE_INTO_OBJ TABLE_ALIAS 'USING' TABLE_REFERENCE 'ON' CONDITION_EXPRESSION MERGE_CLAUSES
MERGE_INTO_OBJ -> SINGLE_TABLE_REFERENCE | SUBQUERY
SINGLE_TABLE_REFERENCE -> SCHEMA_NAME '.' TABLE_OR_VIEW_NAME
SUBQUERY -> '(' QUERY_EXPRESSION ')'
TABLE_REFERENCE -> ORDINARY_TABLE | JOIN_TABLE
MERGE_CLAUSES -> MERGE_UPDATE_CLAUSE | MERGE_INSERT_CLAUSE | MERGE_UPDATE_CLAUSE MERGE_INSERT_CLAUSE
MERGE_UPDATE_CLAUSE -> 'WHEN' 'MATCHED' 'THEN' 'UPDATE' 'SET' SET_VALUE_LIST WHERE_CLAUSE_NULL DELETE_CLAUSE
DELETE_CLAUSE -> 'DELETE' WHERE_CLAUSE_NULL | ''
MERGE_INSERT_CLAUSE -> 'WHEN' 'NOT' 'MATCHED' 'THEN' 'INSERT' FULL_COLUMN_LIST 'VALUES' INS_VALUE_LIST WHERE_CLAUSE_NULL
SET_VALUE_LIST -> COLUMN_NAME '=' VALUE_EXPRESSION | 'DEFAULT' ',' SET_VALUE_LIST | COLUMN_NAME '=' VALUE_EXPRESSION | 'DEFAULT'
WHERE_CLAUSE_NULL -> 'WHERE' CONDITION_EXPRESSION | ''
FULL_COLUMN_LIST -> '(' COLUMN_NAME ',' COLUMN_NAME ')'
INS_VALUE_LIST -> '(' INSERT_VALUE ',' INSERT_VALUE ')'
SCHEMA_NAME -> 'schema_name_1'
TABLE_OR_VIEW_NAME -> 'table_name_1' | 'view_name_1'
QUERY_EXPRESSION -> 'query_expression_1'
ORDINARY_TABLE -> 'ordinary_table_1'
JOIN_TABLE -> 'join_table_1'
COLUMN_NAME -> 'column_name_1'
VALUE_EXPRESSION -> 'value_expression_1'
INSERT_VALUE -> 'insert_value_1'
CONDITION_EXPRESSION -> 'condition_expression_1'
```"
5.5 伪列的使用 ,"```text
PSEUDO_COLUMN -> ROWID | UID | USER | TRXID
```"
5.5.1 ROWID ,"```
S -> SELECT_STATEMENT | UPDATE_STATEMENT
SELECT_STATEMENT -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'WHERE' CONDITION
COLUMN_LIST -> 'ROWID' | 'ROWID' ',' COLUMN_NAME
COLUMN_NAME -> 'VENDORID' | 'NAME' | 'CREDIT'
TABLE_NAME -> 'PURCHASING.VENDOR'
CONDITION -> 'NAME' '=' 'string_value'
UPDATE_STATEMENT -> 'UPDATE' TABLE_NAME 'SET' COLUMN_NAME '=' 'int_value' 'WHERE' 'ROWID' '=' 'rowid_value'
```"
5.5.2 UID和 USER ,"```
UID -> 'uid_value'
USER -> 'user_name_1'
```"
5.5.3 TRXID ,"```plaintext
TRXID -> 'TRXID'
```"
5.5.4 SESSID ,"```plaintext
SESSID -> 'SESSID'
```"
5.5.5 PHYROWID ,"```nltk
PHYROWID -> 'PHYROWID'
PHYROWID_VALUE -> 'file_value' 'page_value' 'slot_value'
PHYROWID_USAGE -> 'CSCN' | 'CSEK' | 'BLKUP' | 'SSEK' | 'SSCN'
PHYROWID_CONTEXT -> 'PHYROWID' 'IN' 'PRIMARY_BTREE' 'WITH' 'PHYROWID_VALUE' | 'PHYROWID' 'IN' 'SECONDARY_BTREE' 'WITH' 'PHYROWID_VALUE'
PRIMARY_BTREE -> 'PRIMARY_BTREE'
SECONDARY_BTREE -> 'SECONDARY_BTREE'
```"
5.6 DM自增列的使用 ,"```
S -> DM_AUTO_INCREMENT_USAGE
DM_AUTO_INCREMENT_USAGE -> '5.6' 'DM' 'AUTO_INCREMENT' 'USAGE'
```"
5.6.1 DM自增列定义 ,"```plaintext
IDENTITY -> 'IDENTITY' '(' SEED ',' INCREMENT ')' | 'IDENTITY'
SEED -> 'seed_value'
INCREMENT -> 'increment_value'

IDENT_SEED -> 'IDENT_SEED' '(' TABLENAME ')'
IDENT_INCR -> 'IDENT_INCR' '(' TABLENAME ')'
TABLENAME -> 'tablename_value'

SELECT -> 'SELECT' IDENT_SEED '(' 'tablename_value' ')' | 'SELECT' IDENT_INCR '(' 'tablename_value' ')'
```"
5.6.2 SET IDENTITY_INSERT 属性 ,"```plaintext
S -> SET_IDENTITY_INSERT_ON | SET_IDENTITY_INSERT_OFF
SET_IDENTITY_INSERT_ON -> 'SET' 'IDENTITY_INSERT' TABLE_NAME 'ON' 'WITH' 'REPLACE' 'NULL'
SET_IDENTITY_INSERT_OFF -> 'SET' 'IDENTITY_INSERT' TABLE_NAME 'OFF'
TABLE_NAME -> SCHEMA_NAME '.' 'table_name_1' | 'table_name_1'
SCHEMA_NAME -> 'schema_name_1'
```"
6.1 视图的作用  ,"```plaintext
VIEW -> '视图' '是' '提供给' '用户' '以' '多种' '角度' '观察' '数据库中' '数据' '的' '重要' '机制' '.' 
        '尽管' '在' '对' '视图' '作' '查询' '和' '更新' '时' '有' '各种' '限制' ',' '但' '只要' '用户' '对' 'DM_SQL' '语言' '熟悉' ',' 
        '合理' '使用' '视图' '对' '用户' '建立' '自己的' '管理' '信息' '系统' '会' '带来' '很多' '的' '好处' '和' '方便' ',' 
        '归纳' '起来' ',' '主要' '有' '以下' '几点' ':' 
        '1' '.' '用户' '能' '通过' '不同' '的' '视图' '以' '多种' '角度' '观察' '同一' '数据' '.' 
        '可' '针对' '不同' '需要' '建立' '相应' '视图' ',' '使' '他们' '从' '不同' '的' '需要' '来' '观察' '同一' '数据库' '中' '的' '数据' '.' 
        '2' '.' '简化' '了' '用户' '操作' '.' 
        '由于' '视图' '是' '从' '用户' '的' '实际' '需要' '中' '抽取' '出来' '的' '虚表' ',' '因而' '从' '用户' '角度' '来' '观察' '这种' '数据库' '结构' '必然' '简单' '清晰' '.' 
        '另外' ',' '由于' '复杂' '的' '条件' '查询' '已' '在' '视图' '定义' '中' '一次' '给定' ',' '用户' '再' '对' '该' '视图' '查询' '时' '也' '简单' '方便' '得' '多' '了' '.' 
        '3' '.' '为' '需要' '隐蔽' '的' '数据' '提供' '了' '自动' '安全' '保护' '.' 
        '所谓' '“隐蔽' '的' '数据”' '是' '指' '通过' '某' '视图' '不可见' '的' '数据' '.' 
        '由于' '对' '不同' '用户' '可' '定义' '不同' '的' '视图' ',' '使' '需要' '隐蔽' '的' '数据' '不' '出现' '在' '不应该' '看到' '这些' '数据' '的' '用户' '视图' '上' ',' 
        '从而' '由' '视图' '机制' '自动' '提供' '了' '对' '机密' '数据' '的' '安全' '保密' '功能' '.' 
        '4' '.' '为' '重构' '数据库' '提供' '了' '一定' '程度' '的' '逻辑' '独立性' '.' 
        '在' '建立' '调试' '和' '维护' '管理' '信息' '系统' '的' '过程' '中' ',' '由于' '用户' '需求' '的' '变化' ',' '信息量' '的' '增长' '等' '原因' ',' 
        '经常' '会' '出现' '数据库' '的' '结构' '发生' '变化' ',' '如' '增加' '新的' '基表' ',' '或' '在' '已' '建好' '的' '基表' '中' '增加' '新的' '列' ',' '或' 
        '需要' '将' '一个' '基表' '分解' '成' '两个' '子表' '等' ',' '这' '称为' '数据库' '重构' '.' 
        '数据' '的' '逻辑' '独立性' '是' '指' '当' '数据库' '重构' '时' ',' '对' '现有' '用户' '和' '用户' '程序' '不' '产生' '任何' '影响' '.' 
        '在' '管理' '信息' '系统' '运行' '过程' '中' ',' '重构' '数据库' '最' '典型' '的' '示例' '是' '将' '一个' '基表' '垂直' '分割' '成' '多个' '表' '.' 
        '将' '经常' '要' '访问' '的' '列' '放在' '速度' '快' '的' '服务器' '上' ',' '而' '不' '经常' '访问' '的' '列' '放在' '较慢' '的' '服务器' '上' '.' 
        '例如' '将' 'PRODUCT' '表' '分解' '成' '两个' '基表' '.' 
        'PRODUCT' '(' 'PRODUCTID' ',' 'NAME' ',' 'AUTHOR' ',' 'PUBLISHER' ',' 'PUBLISHTIME' ',' 'PRODUCT_CATEGORYID' ',' 'PRODUCTNO' ',' 'DESCRIPTION' ',' 'PHOTO' ',' 'SATETYSTOCKLEVEL' ',' 'ORIGINALPRICE' ',' 'NOWPRICE' ',' 'DISCOUNT' ',' 'TYPE' ',' 'PAPERTOTAL' ',' 'WORDTOTAL' ',' 'SELLSTARTTIME' ',' 'SELLENDTIME' ')' ',' 
        '分解' '为' '两个' '基表' ':' 
        'PRODUCT_1' '(' 'PRODUCTID' ',' 'NAME' ',' 'AUTHOR' ',' 'PUBLISHER' ',' 'NOWPRICE' ')' 
        'PRODUCT_2' '(' 'PRODUCTID' ',' 'PUBLISHERTIME' ',' 'PRODUCT_CATEGORYID' ',' 'PRODUCTNO' ',' 'DESCRIPTION' ',' 'PHOTO' ',' 'SATETYSTOCKLEVEL' ',' 'ORIGINALPRICE' ',' 'NOWPRICE' ',' 'DISCOUNT' ',' 'TYPE' ',' 'PAPERTOTAL' ',' 'WORDTOTAL' ',' 'SELLSTARTTIME' ',' 'SELLENDTIME' ')' 
        '并' '将' 'PRODUCT' '表' '中' '的' '数据' '分别' '插入' '这' '两个' '新建' '表' '中' ',' '再' '删去' 'PRODUCT' '表' '.' 
        '这样' '一来' ',' '原有' '用户' '程序' '中' '有' 'PRODUCT' '表' '的' '操作' '就' '均' '无法' '进行' '了' '.' 
        '为了' '减少' '对' '用户' '程序' '影响' ',' '这时' '可' '在' 'PRODUCT_1' '和' 'PRODUCT_2' '两' '基表' '上' '建立' '一个' '名字' '为' 'PRODUCT' '的' '视图' ',' 
        '因为' '新建' '视图' '维护' '了' '用户' '外模式' '的' '原状' ',' '用户' '的' '应用程序' '不用' '修改' '仍' '可' '通过' '视图' '查询' '到' '数据' ',' 
        '从而' '较好' '支持' '了' '数据' '的' '逻辑' '独立性' '.'
```"
6.2 视图的定义 ,"```
S -> CREATE_VIEW | CREATE_OR_REPLACE_VIEW
CREATE_VIEW -> 'CREATE' 'VIEW' VIEW_NAME COLUMN_LIST 'AS' QUERY_SPECIFICATION VIEW_OPTION
CREATE_OR_REPLACE_VIEW -> 'CREATE' 'OR' 'REPLACE' 'VIEW' VIEW_NAME COLUMN_LIST 'AS' QUERY_SPECIFICATION VIEW_OPTION

VIEW_NAME -> SCHEMA_NAME '.' 'view_name_1' | 'view_name_1'
SCHEMA_NAME -> 'schemaname_value'

COLUMN_LIST -> '(' 'column_name_1' ',' 'column_name_2' ')' | ''

QUERY_SPECIFICATION -> TABLE_QUERY | TABLE_CONNECT
TABLE_QUERY -> SUB_SELECT_EXP ORDER_BY_CLAUSE
TABLE_CONNECT -> 'table_connect_value'

SUB_SELECT_EXP -> 'sub_select_exp_value'
ORDER_BY_CLAUSE -> 'ORDER' 'BY' 'order_by_clause_value' | ''

VIEW_OPTION -> WITH_CHECK_OPTION | WITH_READ_ONLY | ''
WITH_CHECK_OPTION -> 'WITH' CHECK_OPTION_TYPE 'CHECK' 'OPTION'
CHECK_OPTION_TYPE -> 'LOCAL' | 'CASCADED'
WITH_READ_ONLY -> 'WITH' 'READ' 'ONLY'
```"
6.3 视图的删除 ,"```plaintext
DROP_VIEW -> 'DROP' 'VIEW' IF_EXISTS SCHEMA_NAME '.' VIEW_NAME DROP_OPTION
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1' | ''
VIEW_NAME -> 'viewname_1'
DROP_OPTION -> 'RESTRICT' | 'CASCADE' | ''
```"
6.4 视图的查询 ,"```
S -> SELECT_QUERY | JOIN_QUERY
SELECT_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME 'WHERE' CONDITION
JOIN_QUERY -> 'SELECT' COLUMN_LIST 'FROM' TABLE_NAME ',' TABLE_NAME ',' TABLE_NAME 'WHERE' JOIN_CONDITION

COLUMN_LIST -> COLUMN | COLUMN ',' COLUMN
COLUMN -> 'VENDORID' | 'NAME' | 'PRODUCTID' | 'STANDARDPRICE'

TABLE_NAME -> 'PURCHASING.VENDOR_EXCELLENT' | 'PRODUCTION.PRODUCT' | 'PRODUCTION.PRODUCT_VENDOR'

CONDITION -> 'ACTIVEFLAG' '=' '1'

JOIN_CONDITION -> 'T1.PRODUCTID' '=' 'T2.PRODUCTID' 'AND' 'T2.VENDORID' '=' 'T3.VENDORID'
```"
6.5 视图的编译 ,"```plaintext
S -> ALTER_VIEW_COMPILE
ALTER_VIEW_COMPILE -> 'ALTER' 'VIEW' VIEW_NAME 'COMPILE'
VIEW_NAME -> SCHEMA_NAME '.' 'view_name_1' | 'view_name_1'
SCHEMA_NAME -> 'schemaname_value'
```"
6.6 视图数据的更新 ,"```plaintext
S -> UPDATE_VIEW | INSERT_VIEW | DELETE_VIEW | UPDATE_UNUPDATABLE_VIEW
UPDATE_VIEW -> 'UPDATE' VIEW_NAME 'SET' COLUMN_NAME '=' VALUE 'WHERE' CONDITION
INSERT_VIEW -> 'INSERT' 'INTO' VIEW_NAME '(' COLUMN_LIST ')' 'VALUES' '(' VALUE_LIST ')'
DELETE_VIEW -> 'DELETE' 'FROM' VIEW_NAME 'WHERE' CONDITION
UPDATE_UNUPDATABLE_VIEW -> 'UPDATE' VIEW_NAME 'SET' COLUMN_NAME '=' VALUE 'WHERE' CONDITION

VIEW_NAME -> 'PURCHASING.VENDOR_EXCELLENT' | 'PRODUCTION.VENDOR_STATIS'
COLUMN_NAME -> 'ACTIVEFLAG' | 'NAME' | 'ACCOUNTNO' | 'WEBURL' | 'CREDIT' | 'PRODUCT_COUNT' | 'VENDORID'
VALUE -> '0' | '1' | '00' | '电子工业出版社' | '人民邮电出版社' | '中华书局' | '3' | '5'
CONDITION -> COLUMN_NAME '=' VALUE | COLUMN_NAME '=' VALUE 'AND' COLUMN_NAME '=' VALUE
COLUMN_LIST -> COLUMN_NAME | COLUMN_NAME ',' COLUMN_LIST
VALUE_LIST -> VALUE | VALUE ',' VALUE_LIST
```"
7.1 物化视图的定义  ,"```plaintext
CREATE_MATERIALIZED_VIEW -> 'CREATE' 'MATERIALIZED' 'VIEW' SCHEMA_NAME '.' VIEW_NAME '(' COLUMN_NAME ',' COLUMN_NAME ')' BUILD_OPTION STORAGE_CLAUSE REFRESH_OPTION QUERY_REWRITE_OPTION 'AS' QUERY_STATEMENT
SCHEMA_NAME -> 'schemaname'
VIEW_NAME -> 'viewname'
COLUMN_NAME -> 'columnname'
BUILD_OPTION -> 'BUILD' 'IMMEDIATE' | 'BUILD' 'DEFERRED'
STORAGE_CLAUSE -> 'storage子句'
REFRESH_OPTION -> 'REFRESH' REFRESH_MODE REFRESH_TIMING REFRESH_TYPE | 'NEVER' 'REFRESH'
REFRESH_MODE -> 'FAST' | 'COMPLETE' | 'FORCE'
REFRESH_TIMING -> 'ON' 'DEMAND' | 'ON' 'COMMIT' | 'START' 'WITH' DATETIME_EXPR 'NEXT' DATETIME_EXPR
REFRESH_TYPE -> 'WITH' 'PRIMARY' 'KEY' | 'WITH' 'ROWID'
DATETIME_EXPR -> 'SYSDATE' '+' 'numeric_value'
QUERY_REWRITE_OPTION -> 'DISABLE' 'QUERY' 'REWRITE' | 'ENABLE' 'QUERY' 'REWRITE'
QUERY_STATEMENT -> TABLE_QUERY | TABLE_JOIN
TABLE_QUERY -> SUBQUERY_EXPRESSION 'ORDER' 'BY' '子句'
TABLE_JOIN -> '表连接'
SUBQUERY_EXPRESSION -> '子查询表达式'
```"
7.2 物化视图的修改  ,"```plaintext
ALTER_MATERIALIZED_VIEW -> 'ALTER' 'MATERIALIZED' 'VIEW' VIEW_NAME SCHEMA_NAME '.' REFRESH_OPTION QUERY_REWRITE_OPTION
VIEW_NAME -> 'viewname_name_1'
SCHEMA_NAME -> 'schemaname_name_1'
REFRESH_OPTION -> 'REFRESH' REFRESH_TYPE | 'NEVER' 'REFRESH' | ''
REFRESH_TYPE -> 'COMPLETE' | 'FORCE' | 'FAST'
QUERY_REWRITE_OPTION -> 'ON' 'QUERY' 'REWRITE' | 'ON' 'DEMAND' | 'COMMIT' | 'NEXT' | 'START' 'WITH' 'datatime_expr_value' | 'DISABLE' | 'ENABLE' | ''
```"
7.3 物化视图的删除  ,"```
DROP_MATERIALIZED_VIEW -> 'DROP' 'MATERIALIZED' 'VIEW' IF_EXISTS SCHEMA_NAME '.' VIEW_NAME ';'
IF_EXISTS -> 'IF' 'EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1' | ''
VIEW_NAME -> 'viewname_1'
```"
7.4 物化视图的 更新 ,"```plaintext
REFRESH_MATERIALIZED_VIEW -> 'REFRESH' 'MATERIALIZED' 'VIEW' SCHEMA_NAME '.' VIEW_NAME REFRESH_MODE
SCHEMA_NAME -> 'schemaname_1'
VIEW_NAME -> 'viewname_1'
REFRESH_MODE -> 'FAST' | 'COMPLETE' | 'FORCE'
```"
7.5 物化视图允许的操作  ,"```text
S -> QUERY_OR_INDEX | REFRESH_ONLY
QUERY_OR_INDEX -> 'QUERY' 'materialized_view_name_1' | 'CREATE' 'INDEX' 'ON' 'materialized_view_name_1'
REFRESH_ONLY -> 'REFRESH' 'materialized_view_name_1'
```"
7.6 物化视图日志的定义  ,"```plaintext
CREATE_MATERIALIZED_VIEW_LOG -> 'CREATE' 'MATERIALIZED' 'VIEW' 'LOG' 'ON' SCHEMA_NAME '.' TABLE_NAME STORAGE_CLAUSE WITH_CLAUSE PURGE_OPTION
SCHEMA_NAME -> 'schemaname_1'
TABLE_NAME -> 'tablename_1'
STORAGE_CLAUSE -> 'storage_option' | ''
WITH_CLAUSE -> 'WITH' WITH_OPTIONS
WITH_OPTIONS -> 'PRIMARY' 'KEY' | 'ROWID' | 'SEQUENCE' | '(' COLUMN_LIST ')'
COLUMN_LIST -> 'columnname_1' | 'columnname_1' ',' 'columnname_2'
PURGE_OPTION -> 'PURGE' 'IMMEDIATE' SYNC_OPTION | 'PURGE' 'START' 'WITH' DATETIME_EXPR NEXT_OPTION REPEAT_OPTION
SYNC_OPTION -> 'SYNCHRONOUS' | 'ASYNCHRONOUS'
DATETIME_EXPR -> 'datetime_expr_value'
NEXT_OPTION -> 'NEXT' DATETIME_EXPR | ''
REPEAT_OPTION -> 'REPEAT' 'INTERVAL' 'interval_expr_value' | ''
```"
7.7 物化视图日志的删除  ,"```
S -> DROP_MATERIALIZED_VIEW_LOG
DROP_MATERIALIZED_VIEW_LOG -> 'DROP' 'MATERIALIZED' 'VIEW' 'LOG' 'ON' SCHEMA_NAME '.' TABLE_NAME
SCHEMA_NAME -> 'schemaname_1'
TABLE_NAME -> 'tablename_1'
```"
7.8 物化视图的限制   ,"```plaintext
S -> '7.8' '物化视图的限制'
```"
7.8.1 物化视图的一般限制 ,"```text
MATERIALIZED_VIEW_RESTRICTIONS -> MATERIALIZED_VIEW_DEFINITION_RESTRICTION MATERIALIZED_VIEW_OPERATION_RESTRICTION MATERIALIZED_VIEW_COUNT_RESTRICTION VIEW_CURSOR_UPDATE_RESTRICTION TRUNCATE_REFRESH_RESTRICTION FAST_LOAD_REFRESH_RESTRICTION PARTITION_EXCHANGE_REFRESH_RESTRICTION
MATERIALIZED_VIEW_DEFINITION_RESTRICTION -> '物化视图定义只能包含用户创建的表、视图和物化视图对象，且不能为外部表'
MATERIALIZED_VIEW_OPERATION_RESTRICTION -> '对物化视图日志、物化视图只能进行查询和建索引，不支持插入、删除、更新、MERGE INTO和TRUNCATE'
MATERIALIZED_VIEW_COUNT_RESTRICTION -> '同一表上最多允许建立127个物化视图'
VIEW_CURSOR_UPDATE_RESTRICTION -> '包含物化视图的普通视图及游标是不能更新的'
TRUNCATE_REFRESH_RESTRICTION -> '如果对某表进行了TRUNCATE操作，那么依赖于它的物化视图必须先进行一次完全刷新后才可以使用快速刷新'
FAST_LOAD_REFRESH_RESTRICTION -> '如果对某表进行了快速装载操作，那么依赖于它的物化视图必须先进行一次完全刷新后才可以使用快速刷新'
PARTITION_EXCHANGE_REFRESH_RESTRICTION -> '如果对某表进行了与分区子表数据交换操作，那么依赖于它的物化视图必须先进行一次完全刷新后才可以使用快速刷新'
```"
7.8.2 物化视图的分类 ,"```plaintext
MATERIALIZED_VIEW_TYPE -> 'SIMPLE' | 'AGGREGATE' | 'JOIN' | 'SUB_QUERY' | 'SETS' | 'COMPLEX'
SIMPLE -> '无GROUP BY，无聚集函数，无连接操作'
AGGREGATE -> '仅包含有GROUP BY和聚集函数'
JOIN -> '仅包含有多表连接'
SUB_QUERY -> '仅包含有子查询'
SETS -> '包含UNION ALL'
COMPLEX -> '除上述五种外的物化视图类型'
```"
7.8.3 快速刷新通用约束 ,"```nltk
FAST_REFRESH_CONSTRAINTS -> CONSTRAINT_1 CONSTRAINT_2 CONSTRAINT_3 CONSTRAINT_4 CONSTRAINT_5 CONSTRAINT_6 CONSTRAINT_7 CONSTRAINT_8 CONSTRAINT_9 CONSTRAINT_10 CONSTRAINT_11 CONSTRAINT_12 CONSTRAINT_13 CONSTRAINT_14 CONSTRAINT_15 CONSTRAINT_16 CONSTRAINT_17 CONSTRAINT_18
CONSTRAINT_1 -> '快速刷新物化视图要求每个基表都包含有物化视图日志，并且物化视图日志的创建时间不得晚于物化视图的最后刷新时间'
CONSTRAINT_2 -> '不能含有不确定性函数，如SYSDATE或ROWNUM'
CONSTRAINT_3 -> '不能含有大字段类型'
CONSTRAINT_4 -> '查询项不能含有分析函数'
CONSTRAINT_5 -> '查询不能含有HAVING子句'
CONSTRAINT_6 -> '不能包含ANY、ALL及NOT EXISTS'
CONSTRAINT_7 -> '不能含有层次查询'
CONSTRAINT_8 -> '不能在多个站点含有相关表'
CONSTRAINT_9 -> '同一张表上最多允许建立127个快速刷新的物化视图'
CONSTRAINT_10 -> '不能含有UNION，UNION ALL，MINUS等集合运算'
CONSTRAINT_11 -> '不能含有子查询'
CONSTRAINT_12 -> '只能基于普通表（视图，外部表，派生表等不支持）'
CONSTRAINT_13 -> 'WITH PRIMAY KEY时物化视图定义里如果是单表，则日志表里有PK，如果是多表，则每张表的日志表里都有PK；WITH ROWID时物化视图里是单表，则日志表里必须有ROWID，如果是多表，则每张日志表里都有ROWID'
CONSTRAINT_14 -> '对于WITH ROWID的快速刷新需要一一选择ROWID并给出别名'
CONSTRAINT_15 -> 'WITH PRIMAY KEY刷新时，物化视图定义中必须包含所有其基于的表的PK列'
CONSTRAINT_16 -> '如果日志定义中没有WITH PRIMARY KEY而扩展列又包含了，那么DM认为这个和建立日志时指定WITH PRIMARY KEY效果相同。也就是说，基于这个日志建立WITH PK的快速刷新物化视图是允许的'
CONSTRAINT_17 -> 'DM8目前仅支持简单类型和部分连接物化视图的快速刷新。连接物化视图不支持的具体类型是外连接和自然连接'
CONSTRAINT_18 -> '连接物化视图不支持GROUP BY和聚集操作'
```"
7.8.4 物化视图信息查看 ,"```plaintext
S -> VIEW_INFO | NUMERIC_FUNCTIONS | STRING_FUNCTIONS | DATE_TIME_FUNCTIONS | NULL_CHECK_FUNCTIONS | TYPE_CONVERSION_FUNCTIONS | MISC_FUNCTIONS

VIEW_INFO -> 'SYS.USER_MVIEWS' COLUMN_INFO
COLUMN_INFO -> 'SCHID' 'INTEGER' | 'MVIEW_NAME' 'VARCHAR(128)' | 'QUERY' 'TEXT' | 'QUERY_LEN' 'INTEGER' | 'REWRITE_ENABLED' 'VARCHAR(128)' | 'REFRESH_MODE' 'VARCHAR(128)' | 'REFRESH_METHOD' 'VARCHAR(128)' | 'MVIEW_TYPE' 'VARCHAR(128)' | 'LAST_REFRESH_TYPE' 'VARCHAR(128)' | 'STALENESS' 'VARCHAR(128)' | 'LAST_REFRESH_DATE' 'DATETIME(6)'

NUMERIC_FUNCTIONS -> 'ABS(n)' | 'ACOS(n)' | 'ASIN(n)' | 'ATAN(n)' | 'ATAN2(n1,n2)' | 'CEIL(n)' | 'CEILING(n)' | 'COS(n)' | 'COSH(n)' | 'COT(n)' | 'DEGREES(n)' | 'EXP(n)' | 'FLOOR(n)' | 'GREATEST(n {,n})' | 'GREAT (n1,n2)' | 'LEAST(n {,n})' | 'LN(n)' | 'LOG(n1[,n2])' | 'LOG10(n)' | 'MOD(m,n)' | 'PI()' | 'POWER(n1,n2)/POWER2(n1,n2)' | 'RADIANS(n)' | 'RAND([n])' | 'ROUND(n[,m])' | 'SIGN(n)' | 'SIN(n)' | 'SINH(n)' | 'SQRT(n)' | 'TAN(n)' | 'TANH(n)' | 'TO_NUMBER (char [,fmt])' | 'TRUNC(n[,m])' | 'TRUNCATE(n[,m])' | 'TO_CHAR(n [, fmt [, 'nls' ] ])' | 'BITAND(n1, n2)'

STRING_FUNCTIONS -> 'ASCII(char)' | 'ASCIISTR(char)' | 'BIT_LENGTH(char)' | 'CHAR(n)' | 'CHAR_LENGTH(char)/ CHARACTER_LENGTH(char)' | 'CHR(n)' | 'CONCAT(char1,char2,char3,…)' | 'DIFFERENCE(char1,char2)' | 'INITCAP(char)' | 'INS(char1,begin,n,char2)' | 'INSERT(char1,n1,n2,char2)/ INSSTR(char1,n1,n2,char2)' | 'INSTR(char1,char2[,n,[m]])' | 'INSTRB(char1,char2[,n,[m]])' | 'LCASE(char)' | 'LEFT(char,n)/ LEFTSTR(char,n)' | 'LEN(char)' | 'LENGTH(clob)' | 'OCTET_LENGTH(char)' | 'LOCATE(char1,char2[,n])' | 'LOWER(char)' | 'LPAD(char1,n,char2)' | 'LTRIM(char1,char2)' | 'POSITION(char1,/ IN char2)' | 'REPEAT(char,n)/ REPEATSTR(char,n)' | 'REPLACE(STR, search [,replace] )' | 'REPLICATE(char,times)' | 'REVERSE(char)' | 'RIGHT / RIGHTSTR(char,n)' | 'RPAD(char1,n,char2)' | 'RTRIM(char1,char2)' | 'SOUNDEX(char)' | 'SPACE(n)' | 'STRPOSDEC(char)' | 'STRPOSDEC(char,pos)' | 'STRPOSINC(char)' | 'STRPOSINC(char,pos)' | 'STUFF(char1,begin,n,char2)' | 'SUBSTR(char,m,n)/ SUBSTRING(char FROM m [FOR n])' | 'SUBSTRB(char,n,m)' | 'TO_CHAR(character)' | 'TRANSLATE(char,from,to)' | 'TRIM([LEADING|TRAILING|BOTH] [exp] [] FROM char2])' | 'UCASE(char)' | 'UPPER(char)' | 'REGEXP' | 'OVERLAY(char1 PLACING char2 FROM int [FOR int])' | 'TEXT_EQUAL' | 'BLOB_EQUAL' | 'NLSSORT(str1 [,nls_sort=str2])' | 'GREATEST(char {,char})' | 'GREAT (char1, char2)' | 'TO_SINGLE_BYTE (char)' | 'TO_MULTI_BYTE (char)' | 'EMPTY_CLOB ()' | 'EMPTY_BLOB ()' | 'UNISTR (char)' | 'ISNULL(char)' | 'CONCAT_WS(delim, char1,char2,char3,…)' | 'SUBSTRING_INDEX(char, delim, count)'

DATE_TIME_FUNCTIONS -> 'ADD_DAYS(date,n)' | 'ADD_MONTHS(date,n)' | 'ADD_WEEKS(date,n)' | 'CURDATE()' | 'CURTIME(n)' | 'CURRENT_DATE()' | 'CURRENT_TIME(n)' | 'CURRENT_TIMESTAMP(n)' | 'DATEADD(datepart,n,date)' | 'DATEDIFF(datepart,date1,date2)' | 'DATEPART(datepart,date)' | 'DAY(date)' | 'DAYNAME(date)' | 'DAYOFMONTH(date)' | 'DAYOFWEEK(date)' | 'DAYOFYEAR(date)' | 'DAYS_BETWEEN(date1,date2)' | 'EXTRACT(时间字段 FROM date)' | 'GETDATE(n)' | 'GREATEST(date {,date})' | 'GREAT (date1,date2)' | 'HOUR(time)' | 'LAST_DAY(date)' | 'LEAST(date {,date})' | 'MINUTE(time)' | 'MONTH(date)' | 'MONTHNAME(date)' | 'MONTHS_BETWEEN(date1,date2)' | 'NEXT_DAY(date1,char2)' | 'NOW(n)' | 'QUARTER(date)' | 'SECOND(time)' | 'ROUND (date1[, fmt])' | 'TIMESTAMPADD(datepart,n,timestamp)' | 'TIMESTAMPDIFF(datepart,timeStamp1,timestamp2)' | 'SYSDATE()' | 'TO_DATE(CHAR[,fmt[,'nls']])/TO_TIMESTAMP(CHAR[,fmt[,'nls']])/ TO_TIMESTAMP_TZ(CHAR[,fmt])' | 'FROM_TZ(timestamp,timezone|tz_name])' | 'TZ_OFFSET(timezone|[tz_name])' | 'TRUNC(date[,fmt])' | 'WEEK(date)' | 'WEEKDAY(date)' | 'WEEKS_BETWEEN(date1,date2)' | 'YEAR(date)' | 'YEARS_BETWEEN(date1,date2)' | 'LOCALTIME(n)' | 'LOCALTIMESTAMP(n)' | 'OVERLAPS' | 'TO_CHAR(date[,fmt[,nls]])' | 'SYSTIMESTAMP(n)' | 'NUMTODSINTERVAL(dec,interval_unit)' | 'NUMTOYMINTERVAL (dec,interval_unit)' | 'WEEK(date, mode)' | 'UNIX_TIMESTAMP (datetime)' | 'FROM_UNIXTIME(unixtime)' | 'FROM_UNIXTIME(unixtime, fmt)' | 'SESSIONTIMEZONE' | 'DBTIMEZONE' | 'DATE_FORMAT(d, format)' | 'TIME_TO_SEC(d)' | 'SEC_TO_TIME(sec)' | 'TO_DAYS(timestamp)' | 'DATE_ADD(datetime, interval)' | 'DATE_SUB(datetime, interval)'

NULL_CHECK_FUNCTIONS -> 'COALESCE(n1,n2,…nx)' | 'IFNULL(n1,n2)' | 'ISNULL(n1,n2)' | 'NULLIF(n1,n2)' | 'NVL(n1,n2)' | 'NULL_EQU'

TYPE_CONVERSION_FUNCTIONS -> 'CAST(value AS 类型说明)' | 'CONVERT(类型说明,value)' | 'HEXTORAW(exp)' | 'RAWTOHEX(exp)' | 'BINTOCHAR(exp)' | 'TO_BLOB(value)' | 'UNHEX(exp)' | 'HEX(exp)'

MISC_FUNCTIONS -> 'DECODE(exp, search1, result1, … searchn, resultn [,default])' | 'ISDATE(exp)' | 'ISNUMERIC(exp)' | 'DM_HASH (exp)' | 'LNNVL(condition)' | 'LENGTHB(value)' | 'FIELD(value, e1, e2, e3, e4...en)' | 'ORA_HASH(exp [,max_bucket [,seed_value]])'
```"
8.1 数值函数 ,"```plaintext
ABS -> 'ABS' '(' NUMERIC_VALUE ')'
ACOS -> 'ACOS' '(' NUMERIC_VALUE ')'
ASIN -> 'ASIN' '(' NUMERIC_VALUE ')'
ATAN -> 'ATAN' '(' NUMERIC_VALUE ')'
ATAN2 -> 'ATAN2' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
CEIL -> 'CEIL' '(' NUMERIC_VALUE ')'
CEILING -> 'CEILING' '(' NUMERIC_VALUE ')'
COS -> 'COS' '(' NUMERIC_VALUE ')'
COSH -> 'COSH' '(' NUMERIC_VALUE ')'
COT -> 'COT' '(' NUMERIC_VALUE ')'
DEGREES -> 'DEGREES' '(' NUMERIC_VALUE ')'
EXP -> 'EXP' '(' NUMERIC_VALUE ')'
FLOOR -> 'FLOOR' '(' NUMERIC_VALUE ')'
GREATEST -> 'GREATEST' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
GREAT -> 'GREAT' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
LEAST -> 'LEAST' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
LN -> 'LN' '(' NUMERIC_VALUE ')'
LOG -> 'LOG' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')' | 'LOG' '(' NUMERIC_VALUE ')'
LOG10 -> 'LOG10' '(' NUMERIC_VALUE ')'
MOD -> 'MOD' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
PI -> 'PI' '(' ')'
POWER -> 'POWER' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
POWER2 -> 'POWER2' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
RADIANS -> 'RADIANS' '(' NUMERIC_VALUE ')'
RAND -> 'RAND' '(' NUMERIC_VALUE ')' | 'RAND' '(' ')'
ROUND -> 'ROUND' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')' | 'ROUND' '(' NUMERIC_VALUE ')'
SIGN -> 'SIGN' '(' NUMERIC_VALUE ')'
SIN -> 'SIN' '(' NUMERIC_VALUE ')'
SINH -> 'SINH' '(' NUMERIC_VALUE ')'
SQRT -> 'SQRT' '(' NUMERIC_VALUE ')'
TAN -> 'TAN' '(' NUMERIC_VALUE ')'
TANH -> 'TANH' '(' NUMERIC_VALUE ')'
TO_NUMBER -> 'TO_NUMBER' '(' CHAR_VALUE ',' FMT_VALUE ')' | 'TO_NUMBER' '(' CHAR_VALUE ')'
TRUNC -> 'TRUNC' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')' | 'TRUNC' '(' NUMERIC_VALUE ')'
TRUNCATE -> 'TRUNCATE' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')' | 'TRUNCATE' '(' NUMERIC_VALUE ')'
TO_CHAR -> 'TO_CHAR' '(' NUMERIC_VALUE ',' FMT_VALUE ',' NLS_VALUE ')' | 'TO_CHAR' '(' NUMERIC_VALUE ',' FMT_VALUE ')' | 'TO_CHAR' '(' NUMERIC_VALUE ')'
BITAND -> 'BITAND' '(' NUMERIC_VALUE ',' NUMERIC_VALUE ')'
```"
8.2 字符串函数 ,"```plaintext
ASCII -> 'ASCII' '(' 'char_value' ')'
ASCIISTR -> 'ASCIISTR' '(' 'char_value' ')'
BIT_LENGTH -> 'BIT_LENGTH' '(' 'char_value' ')'
CHAR -> 'CHAR' '(' 'int_value' ')'
CHAR_LENGTH -> 'CHAR_LENGTH' '(' 'char_value' ')'
CHARACTER_LENGTH -> 'CHARACTER_LENGTH' '(' 'char_value' ')'
CHR -> 'CHR' '(' 'int_value' ')'
CONCAT -> 'CONCAT' '(' 'char_value' ',' 'char_value' ')'
DIFFERENCE -> 'DIFFERENCE' '(' 'char_value' ',' 'char_value' ')'
INITCAP -> 'INITCAP' '(' 'char_value' ')'
INS -> 'INS' '(' 'char_value' ',' 'int_value' ',' 'int_value' ',' 'char_value' ')'
INSERT -> 'INSERT' '(' 'char_value' ',' 'int_value' ',' 'int_value' ',' 'char_value' ')'
INSSTR -> 'INSSTR' '(' 'char_value' ',' 'int_value' ',' 'int_value' ',' 'char_value' ')'
INSTR -> 'INSTR' '(' 'char_value' ',' 'char_value' '[' ',' 'int_value' '[' ',' 'int_value' ']' ']' ')'
INSTRB -> 'INSTRB' '(' 'char_value' ',' 'char_value' '[' ',' 'int_value' '[' ',' 'int_value' ']' ']' ')'
LCASE -> 'LCASE' '(' 'char_value' ')'
LEFT -> 'LEFT' '(' 'char_value' ',' 'int_value' ')'
LEFTSTR -> 'LEFTSTR' '(' 'char_value' ',' 'int_value' ')'
LEN -> 'LEN' '(' 'char_value' ')'
LENGTH -> 'LENGTH' '(' 'char_value' ')'
OCTET_LENGTH -> 'OCTET_LENGTH' '(' 'char_value' ')'
LOCATE -> 'LOCATE' '(' 'char_value' ',' 'char_value' '[' ',' 'int_value' ']' ')'
LOWER -> 'LOWER' '(' 'char_value' ')'
LPAD -> 'LPAD' '(' 'char_value' ',' 'int_value' '[' ',' 'char_value' ']' ')'
LTRIM -> 'LTRIM' '(' 'char_value' '[' ',' 'char_value' ']' ')'
POSITION -> 'POSITION' '(' 'char_value' 'IN' 'char_value' ')' | 'POSITION' '(' 'char_value' ',' 'char_value' ')'
REPEAT -> 'REPEAT' '(' 'char_value' ',' 'int_value' ')'
REPEATSTR -> 'REPEATSTR' '(' 'char_value' ',' 'int_value' ')'
REPLACE -> 'REPLACE' '(' 'char_value' ',' 'char_value' '[' ',' 'char_value' ']' ')'
REPLICATE -> 'REPLICATE' '(' 'char_value' ',' 'int_value' ')'
REVERSE -> 'REVERSE' '(' 'char_value' ')'
RIGHT -> 'RIGHT' '(' 'char_value' ',' 'int_value' ')'
RIGHTSTR -> 'RIGHTSTR' '(' 'char_value' ',' 'int_value' ')'
RPAD -> 'RPAD' '(' 'char_value' ',' 'int_value' '[' ',' 'char_value' ']' ')'
RTRIM -> 'RTRIM' '(' 'char_value' '[' ',' 'char_value' ']' ')'
SOUNDEX -> 'SOUNDEX' '(' 'char_value' ')'
SPACE -> 'SPACE' '(' 'int_value' ')'
STRPOSDEC -> 'STRPOSDEC' '(' 'char_value' ')' | 'STRPOSDEC' '(' 'char_value' ',' 'int_value' ')'
STRPOSINC -> 'STRPOSINC' '(' 'char_value' ')' | 'STRPOSINC' '(' 'char_value' ',' 'int_value' ')'
STUFF -> 'STUFF' '(' 'char_value' ',' 'int_value' ',' 'int_value' ',' 'char_value' ')'
SUBSTR -> 'SUBSTR' '(' 'char_value' '[' ',' 'int_value' '[' ',' 'int_value' ']' ']' ')'
SUBSTRING -> 'SUBSTRING' '(' 'char_value' '[' 'FROM' 'int_value' '[' 'FOR' 'int_value' ']' ']' ')'
SUBSTRB -> 'SUBSTRB' '(' 'char_value' ',' 'int_value' '[' ',' 'int_value' ']' ')'
TO_CHAR -> 'TO_CHAR' '(' 'char_value' ')' | 'TO_CHAR' '(' 'char_value' ',' 'char_value' '[' ',' 'char_value' ']' ')'
TRANSLATE -> 'TRANSLATE' '(' 'char_value' ',' 'char_value' ',' 'char_value' ')'
TRIM -> 'TRIM' '(' '[' 'LEADING' | 'TRAILING' | 'BOTH' ']' '[' 'char_value' ']' 'FROM' 'char_value' ')'
UCASE -> 'UCASE' '(' 'char_value' ')'
UPPER -> 'UPPER' '(' 'char_value' ')'
REGEXP_COUNT -> 'REGEXP_COUNT' '(' 'char_value' ',' 'char_value' '[' ',' 'int_value' '[' ',' 'char_value' ']' ']' ')'
REGEXP_LIKE -> 'REGEXP_LIKE' '(' 'char_value' ',' 'char_value' '[' ',' 'char_value' ']' ')'
REGEXP_INSTR -> 'REGEXP_INSTR' '(' 'char_value' ',' 'char_value' '[' ',' 'int_value' '[' ',' 'int_value' '[' ',' 'int_value' '[' ',' 'char_value' '[' ',' 'int_value' ']' ']' ']' ']' ')'
REGEXP_SUBSTR -> 'REGEXP_SUBSTR' '(' 'char_value' ',' 'char_value' '[' ',' 'int_value' '[' ',' 'int_value' '[' ',' 'char_value' '[' ',' 'int_value' ']' ']' ']' ')'
REGEXP_REPLACE -> 'REGEXP_REPLACE' '(' 'char_value' ',' 'char_value' '[' ',' 'char_value' '[' ',' 'int_value' '[' ',' 'int_value' '[' ',' 'char_value' ']' ']' ']' ')'
OVERLAY -> 'OVERLAY' '(' 'char_value' 'PLACING' 'char_value' 'FROM' 'int_value' '[' 'FOR' 'int_value' ']' ')'
TEXT_EQUAL -> 'TEXT_EQUAL' '(' 'char_value' ',' 'char_value' ')'
BLOB_EQUAL -> 'BLOB_EQUAL' '(' 'char_value' ',' 'char_value' ')'
NLSSORT -> 'NLSSORT' '(' 'char_value' '[' ',' 'char_value' ']' ')'
GREATEST -> 'GREATEST' '(' 'char_value' '{' ',' 'char_value' '}' ')'
GREAT -> 'GREAT' '(' 'char_value' ',' 'char_value' ')'
TO_SINGLE_BYTE -> 'TO_SINGLE_BYTE' '(' 'char_value' ')'
TO_MULTI_BYTE -> 'TO_MULTI_BYTE' '(' 'char_value' ')'
EMPTY_BLOB -> 'EMPTY_BLOB' '(' ')'
EMPTY_CLOB -> 'EMPTY_CLOB' '(' ')'
UNISTR -> 'UNISTR' '(' 'char_value' ')'
ISNULL -> 'ISNULL' '(' 'char_value' ')'
CONCAT_WS -> 'CONCAT_WS' '(' 'char_value' ',' 'char_value' ',' 'char_value' '{' ',' 'char_value' '}' ')'
SUBSTRING_INDEX -> 'SUBSTRING_INDEX' '(' 'char_value' ',' 'char_value' ',' 'int_value' ')'
```"
8.3 日期时间函数 ,"```plaintext
S -> DATE_TIME_FUNCTION
DATE_TIME_FUNCTION -> ADD_DAYS | ADD_MONTHS | ADD_WEEKS | CURDATE | CURTIME | CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP | DATEADD | DATEDIFF | DATEPART | DAY | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | DAYS_BETWEEN | EXTRACT | GETDATE | GREATEST | GREAT | HOUR | LAST_DAY | LEAST | MINUTE | MONTH | MONTHNAME | MONTHS_BETWEEN | NEXT_DAY | NOW | QUARTER | SECOND | ROUND | TIMESTAMPADD | TIMESTAMPDIFF | SYSDATE | TO_DATE | TO_TIMESTAMP | TO_TIMESTAMP_TZ | FROM_TZ | TZ_OFFSET | TRUNC | WEEK | WEEKDAY | WEEKS_BETWEEN | YEAR | YEARS_BETWEEN | LOCALTIME | LOCALTIMESTAMP | OVERLAPS | TO_CHAR | SYSTIMESTAMP | NUMTODSINTERVAL | NUMTOYMINTERVAL | UNIX_TIMESTAMP | FROM_UNIXTIME | SESSIONTIMEZONE | DBTIMEZONE | DATE_FORMAT | TIME_TO_SEC | SEC_TO_TIME | TO_DAYS | DATE_ADD | DATE_SUB

ADD_DAYS -> 'ADD_DAYS' '(' DATE ',' INT_VALUE ')'
ADD_MONTHS -> 'ADD_MONTHS' '(' DATE ',' INT_VALUE ')'
ADD_WEEKS -> 'ADD_WEEKS' '(' DATE ',' INT_VALUE ')'
CURDATE -> 'CURDATE' '(' ')'
CURTIME -> 'CURTIME' '(' INT_VALUE ')'
CURRENT_DATE -> 'CURRENT_DATE'
CURRENT_TIME -> 'CURRENT_TIME' '(' INT_VALUE ')'
CURRENT_TIMESTAMP -> 'CURRENT_TIMESTAMP' '(' INT_VALUE ')'
DATEADD -> 'DATEADD' '(' DATEPART ',' INT_VALUE ',' DATE ')'
DATEDIFF -> 'DATEDIFF' '(' DATEPART ',' DATE ',' DATE ')'
DATEPART -> 'DATEPART' '(' DATEPART ',' DATE ')'
DAY -> 'DAY' '(' DATE ')'
DAYNAME -> 'DAYNAME' '(' DATE ')'
DAYOFMONTH -> 'DAYOFMONTH' '(' DATE ')'
DAYOFWEEK -> 'DAYOFWEEK' '(' DATE ')'
DAYOFYEAR -> 'DAYOFYEAR' '(' DATE ')'
DAYS_BETWEEN -> 'DAYS_BETWEEN' '(' DATE ',' DATE ')'
EXTRACT -> 'EXTRACT' '(' DATEFIELD 'FROM' DATE ')'
GETDATE -> 'GETDATE' '(' INT_VALUE ')'
GREATEST -> 'GREATEST' '(' DATE ',' DATE ')'
GREAT -> 'GREAT' '(' DATE ',' DATE ')'
HOUR -> 'HOUR' '(' TIME ')'
LAST_DAY -> 'LAST_DAY' '(' DATE ')'
LEAST -> 'LEAST' '(' DATE ',' DATE ')'
MINUTE -> 'MINUTE' '(' TIME ')'
MONTH -> 'MONTH' '(' DATE ')'
MONTHNAME -> 'MONTHNAME' '(' DATE ')'
MONTHS_BETWEEN -> 'MONTHS_BETWEEN' '(' DATE ',' DATE ')'
NEXT_DAY -> 'NEXT_DAY' '(' DATE ',' STRING_VALUE ')'
NOW -> 'NOW' '(' INT_VALUE ')'
QUARTER -> 'QUARTER' '(' DATE ')'
SECOND -> 'SECOND' '(' TIME ')'
ROUND -> 'ROUND' '(' DATE ',' FMT ')'
TIMESTAMPADD -> 'TIMESTAMPADD' '(' DATEPART ',' INT_VALUE ',' TIMESTAMP ')'
TIMESTAMPDIFF -> 'TIMESTAMPDIFF' '(' DATEPART ',' TIMESTAMP ',' TIMESTAMP ')'
SYSDATE -> 'SYSDATE' '(' ')'
TO_DATE -> 'TO_DATE' '(' STRING_VALUE ',' FMT ')'
TO_TIMESTAMP -> 'TO_TIMESTAMP' '(' STRING_VALUE ',' FMT ')'
TO_TIMESTAMP_TZ -> 'TO_TIMESTAMP_TZ' '(' STRING_VALUE ',' FMT ')'
FROM_TZ -> 'FROM_TZ' '(' TIMESTAMP ',' TIMEZONE ')'
TZ_OFFSET -> 'TZ_OFFSET' '(' TIMEZONE ')'
TRUNC -> 'TRUNC' '(' DATE ',' FMT ')'
WEEK -> 'WEEK' '(' DATE ')'
WEEKDAY -> 'WEEKDAY' '(' DATE ')'
WEEKS_BETWEEN -> 'WEEKS_BETWEEN' '(' DATE ',' DATE ')'
YEAR -> 'YEAR' '(' DATE ')'
YEARS_BETWEEN -> 'YEARS_BETWEEN' '(' DATE ',' DATE ')'
LOCALTIME -> 'LOCALTIME' '(' INT_VALUE ')'
LOCALTIMESTAMP -> 'LOCALTIMESTAMP' '(' INT_VALUE ')'
OVERLAPS -> 'OVERLAPS' '(' DATE ',' DATE ',' DATE ',' DATE ')'
TO_CHAR -> 'TO_CHAR' '(' DATE ',' FMT ')'
SYSTIMESTAMP -> 'SYSTIMESTAMP' '(' INT_VALUE ')'
NUMTODSINTERVAL -> 'NUMTODSINTERVAL' '(' INT_VALUE ',' INTERVAL_UNIT ')'
NUMTOYMINTERVAL -> 'NUMTOYMINTERVAL' '(' INT_VALUE ',' INTERVAL_UNIT ')'
UNIX_TIMESTAMP -> 'UNIX_TIMESTAMP' '(' DATE ')'
FROM_UNIXTIME -> 'FROM_UNIXTIME' '(' INT_VALUE ',' FMT ')'
SESSIONTIMEZONE -> 'SESSIONTIMEZONE'
DBTIMEZONE -> 'DBTIMEZONE'
DATE_FORMAT -> 'DATE_FORMAT' '(' DATE ',' FORMAT ')'
TIME_TO_SEC -> 'TIME_TO_SEC' '(' TIME ')'
SEC_TO_TIME -> 'SEC_TO_TIME' '(' INT_VALUE ')'
TO_DAYS -> 'TO_DAYS' '(' DATE ')'
DATE_ADD -> 'DATE_ADD' '(' DATE ',' INTERVAL ')'
DATE_SUB -> 'DATE_SUB' '(' DATE ',' INTERVAL ')'

DATE -> 'DATE' STRING_VALUE
TIME -> 'TIME' STRING_VALUE
TIMESTAMP -> 'TIMESTAMP' STRING_VALUE
DATEPART -> 'YEAR' | 'MONTH' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND' | 'MILLISECOND' | 'QUARTER' | 'DAYOFYEAR' | 'WEEK' | 'WEEKDAY'
DATEFIELD -> 'YEAR' | 'MONTH' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND' | 'TIMEZONE_HOUR' | 'TIMEZONE_MINUTE'
FMT -> 'YYYY-MM-DD' | 'YYYY/MM/DD' | 'HH:MI:SS' | 'HH24:MI:SS' | 'YYYYMMDD' | 'YYYYMMDD HH:MI:SS'
FORMAT -> '%Y-%m-%d %H:%i:%s' | '%Y/%m/%d %H:%i:%s' | '%H:%i:%s' | '%Y-%m-%d' | '%Y/%m/%d' | '%H:%i' | '%Y%m%d' | '%Y%m%d %H:%i:%s'
INTERVAL_UNIT -> 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND' | 'YEAR' | 'MONTH'
TIMEZONE -> 'ASIA/HONG_KONG' | 'US/EASTERN' | 'ASIA/CHONGQING' | 'ETC/GMT-8' | 'ASIA/URUMQI' | 'ASIA/TAIPEI' | 'ASIA/MACAO' | 'ASIA/KASHGAR' | 'ASIA/HARBIN' | 'SINGAPORE' | 'PRC'
STRING_VALUE -> 'string_value'
INT_VALUE -> 'int_value'
```"
8.4 空值判断函数 ,"```plaintext
COALESCE_FUNC -> 'COALESCE' '(' EXPRESSION_LIST ')'
IFNULL_FUNC -> 'IFNULL' '(' EXPRESSION ',' EXPRESSION ')'
ISNULL_FUNC -> 'ISNULL' '(' EXPRESSION ',' EXPRESSION ')'
NULLIF_FUNC -> 'NULLIF' '(' EXPRESSION ',' EXPRESSION ')'
NVL_FUNC -> 'NVL' '(' EXPRESSION ',' EXPRESSION ')'
NULL_EQU_FUNC -> 'NULL_EQU' '(' EXPRESSION ',' EXPRESSION ')'

EXPRESSION_LIST -> EXPRESSION | EXPRESSION ',' EXPRESSION
EXPRESSION -> 'expression_value' | 'NULL'
```"
8.5 类型转换函数 ,"```
S -> CAST_FUNCTION | CONVERT_FUNCTION | HEXTORAW_FUNCTION | RAWTOHEX_FUNCTION | BINTOCHAR_FUNCTION | TO_BLOB_FUNCTION | UNHEX_FUNCTION | HEX_FUNCTION

CAST_FUNCTION -> 'CAST' '(' 'value' 'AS' TYPE ')'
CONVERT_FUNCTION -> 'CONVERT' '(' TYPE ',' 'value' ')'
HEXTORAW_FUNCTION -> 'HEXTORAW' '(' 'string_value' ')'
RAWTOHEX_FUNCTION -> 'RAWTOHEX' '(' 'binary_value' ')'
BINTOCHAR_FUNCTION -> 'BINTOCHAR' '(' 'binary_value' ')'
TO_BLOB_FUNCTION -> 'TO_BLOB' '(' 'varbinary_value' ')'
UNHEX_FUNCTION -> 'UNHEX' '(' 'char1_value' ')'
HEX_FUNCTION -> 'HEX' '(' 'char1_value' ')'

TYPE -> NUMERIC_TYPE | DECIMAL_TYPE | BYTE_TYPE | INTEGER_TYPE | SMALLINT_TYPE | FLOAT_TYPE | REAL_TYPE | DOUBLE_PRECISION_TYPE | VARCHAR_TYPE | VARCHAR2_TYPE | CHAR_TYPE | CHARACTER_TYPE | CLOB_TYPE | TEXT_TYPE | BINARY_TYPE | VARBINARY_TYPE | BLOB_TYPE | IMAGE_TYPE | DATE_TYPE | TIME_TYPE | TIMESTAMP_TYPE | TIME_WITH_TIME_ZONE_TYPE | TIMESTAMP_WITH_TIME_ZONE_TYPE | INTERVAL_YEAR_TO_MONTH_TYPE | INTERVAL_YEAR_TYPE | INTERVAL_MONTH_TYPE | INTERVAL_DAY_TYPE | INTERVAL_DAY_TO_HOUR_TYPE | INTERVAL_DAY_TO_MINUTE_TYPE | INTERVAL_DAY_TO_SECOND_TYPE | INTERVAL_HOUR_TYPE | INTERVAL_HOUR_TO_MINUTE_TYPE | INTERVAL_HOUR_TO_SECOND_TYPE | INTERVAL_MINUTE_TYPE | INTERVAL_MINUTE_TO_SECOND_TYPE | INTERVAL_SECOND_TYPE

NUMERIC_TYPE -> 'NUMERIC' '(' 'numeric_value' ')'
DECIMAL_TYPE -> 'DECIMAL' '(' 'decimal_value' ')'
BYTE_TYPE -> 'BYTE'
INTEGER_TYPE -> 'INTEGER'
SMALLINT_TYPE -> 'SMALLINT'
FLOAT_TYPE -> 'FLOAT'
REAL_TYPE -> 'REAL'
DOUBLE_PRECISION_TYPE -> 'DOUBLE PRECISION'
VARCHAR_TYPE -> 'VARCHAR' '(' 'varchar_value' ')'
VARCHAR2_TYPE -> 'VARCHAR2' '(' 'varchar2_value' ')'
CHAR_TYPE -> 'CHAR' '(' 'char_value' ')'
CHARACTER_TYPE -> 'CHARACTER' '(' 'character_value' ')'
CLOB_TYPE -> 'CLOB'
TEXT_TYPE -> 'TEXT'
BINARY_TYPE -> 'BINARY'
VARBINARY_TYPE -> 'VARBINARY'
BLOB_TYPE -> 'BLOB'
IMAGE_TYPE -> 'IMAGE'
DATE_TYPE -> 'DATE'
TIME_TYPE -> 'TIME'
TIMESTAMP_TYPE -> 'TIMESTAMP'
TIME_WITH_TIME_ZONE_TYPE -> 'TIME WITH TIME ZONE'
TIMESTAMP_WITH_TIME_ZONE_TYPE -> 'TIMESTAMP WITH TIME ZONE'
INTERVAL_YEAR_TO_MONTH_TYPE -> 'INTERVAL YEAR TO MONTH'
INTERVAL_YEAR_TYPE -> 'INTERVAL YEAR'
INTERVAL_MONTH_TYPE -> 'INTERVAL MONTH'
INTERVAL_DAY_TYPE -> 'INTERVAL DAY'
INTERVAL_DAY_TO_HOUR_TYPE -> 'INTERVAL DAY TO HOUR'
INTERVAL_DAY_TO_MINUTE_TYPE -> 'INTERVAL DAY TO MINUTE'
INTERVAL_DAY_TO_SECOND_TYPE -> 'INTERVAL DAY TO SECOND'
INTERVAL_HOUR_TYPE -> 'INTERVAL HOUR'
INTERVAL_HOUR_TO_MINUTE_TYPE -> 'INTERVAL HOUR TO MINUTE'
INTERVAL_HOUR_TO_SECOND_TYPE -> 'INTERVAL HOUR TO SECOND'
INTERVAL_MINUTE_TYPE -> 'INTERVAL MINUTE'
INTERVAL_MINUTE_TO_SECOND_TYPE -> 'INTERVAL MINUTE TO SECOND'
INTERVAL_SECOND_TYPE -> 'INTERVAL SECOND'
```"
8.6 杂类函数 ,"```plaintext
DECODE -> 'DECODE' '(' exp ',' search1 ',' result1 ',' search2 ',' result2 ',' default ')'
exp -> 'exp_value'
search1 -> 'search_value_1'
result1 -> 'result_value_1'
search2 -> 'search_value_2'
result2 -> 'result_value_2'
default -> 'default_value'

ISDATE -> 'ISDATE' '(' exp ')'

ISNUMERIC -> 'ISNUMERIC' '(' exp ')'

DM_HASH -> 'DM_HASH' '(' exp ')'

LNNVL -> 'LNNVL' '(' condition ')'
condition -> 'condition_value'

LENGTHB -> 'LENGTHB' '(' value ')'
value -> 'value_value'

FIELD -> 'FIELD' '(' value ',' e1 ',' e2 ',' e3 ',' e4 ')'
e1 -> 'e1_value'
e2 -> 'e2_value'
e3 -> 'e3_value'
e4 -> 'e4_value'

ORA_HASH -> 'ORA_HASH' '(' exp ',' max_bucket ',' seed_value ')'
max_bucket -> 'max_bucket_value'
seed_value -> 'seed_value_value'
```"
9.1 DM事务相关语句 ,"```text
DM_TRANSACTION -> 'DM' '中' '事务' '是' '一个' '逻辑' '工作' '单元' '，' '由' '一系列' 'SQL' '语句' '组成' '。' 'DM' '把' '一个' '事务' '的' '所有' 'SQL' '语句' '作为' '一个' '整体' '，' '即' '事务' '中' '的' '操作' '，' '要么' '全部' '执行' '，' '要么' '一个' '也' '不' '执行' '。'
```"
9.1.1 事务的开始 ,"```plaintext
TRANSACTION_START -> SQL_STATEMENT
SQL_STATEMENT -> 'executable_sql_statement'
```"
9.1.2 事务的结束 ,"```plaintext
S -> COMMIT_STATEMENT | ROLLBACK_STATEMENT | IMPLICIT_COMMIT
COMMIT_STATEMENT -> 'COMMIT' WORK_OPTION IMMEDIATE_OPTION BATCH_OPTION WAIT_OPTION
WORK_OPTION -> 'WORK' | ''
IMMEDIATE_OPTION -> 'IMMEDIATE' | ''
BATCH_OPTION -> 'BATCH' | ''
WAIT_OPTION -> 'WAIT' | 'NOWAIT'

ROLLBACK_STATEMENT -> 'ROLLBACK' WORK_OPTION

IMPLICIT_COMMIT -> 'CREATE' | 'ALTER' | 'TRUNCATE' | 'DROP' | 'GRANT' | 'REVOKE' | 'AUDIT_SETTING'
```"
9.1.3 保存点相关语句 ,"```plaintext
S -> SAVEPOINT_STMT | ROLLBACK_TO_SAVEPOINT_STMT
SAVEPOINT_STMT -> 'SAVEPOINT' 'savepoint_name_1'
ROLLBACK_TO_SAVEPOINT_STMT -> 'ROLLBACK' 'WORK' 'TO' 'SAVEPOINT' 'savepoint_name_1' | 'ROLLBACK' 'TO' 'SAVEPOINT' 'savepoint_name_1'
```"
9.1.4 设置事务隔离级及读写特性 ,"```
S -> SET_TRANSACTION_ISOLATION | SET_TRANSACTION_READ_WRITE | SELECT_WITH_UR
SET_TRANSACTION_ISOLATION -> 'SET' 'TRANSACTION' 'ISOLATION' 'LEVEL' ISOLATION_LEVEL
ISOLATION_LEVEL -> 'READ' 'COMMITTED' | 'READ' 'UNCOMMITTED' | 'SERIALIZABLE'
SET_TRANSACTION_READ_WRITE -> 'SET' 'TRANSACTION' READ_WRITE_ATTRIBUTE
READ_WRITE_ATTRIBUTE -> 'READ' 'ONLY' | 'READ' 'WRITE'
SELECT_WITH_UR -> 'SELECT' 'FROM' 'table_name_1' 'WITH' 'UR'
```"
9.2 DM手动上锁语句 ,"```plaintext
LOCK_TABLE -> 'LOCK' 'TABLE' TABLE_NAME 'IN' LOCK_MODE 'MODE' NOWAIT_OPTION
TABLE_NAME -> SCHEMA_NAME '.' 'table_name_1' | 'table_name_1'
SCHEMA_NAME -> 'schemaname_1'
LOCK_MODE -> 'INTENT' 'SHARE' | 'ROW' 'SHARE' | 'SHARE' 'UPDATE' | 'INTENT' 'EXCLUSIVE' | 'ROW' 'EXCLUSIVE' | 'SHARE' | 'EXCLUSIVE' | 'SHARE' 'INTENT' 'EXCLUSIVE' | 'SHARE' 'ROW' 'EXCLUSIVE'
NOWAIT_OPTION -> 'NOWAIT' | ''
```"
10.1 C外部函数 ,"```plaintext
C_EXTERNAL_FUNCTION -> 'C' 'EXTERNAL' 'FUNCTION'
C_EXTERNAL_FUNCTION_DEFINITION -> 'C_EXTERNAL_FUNCTION' 'IS' 'USING' 'C' 'OR' 'C++' 'LANGUAGE' 'WRITTEN' 'IN' 'DATABASE' 'EXTERNAL' 'COMPILED' 'AND' 'SAVED' 'IN' 'DLL' 'OR' 'SO' 'SHARED' 'LIBRARY' 'FILE' 'CALLED' 'BY' 'USER' 'THROUGH' 'DMSQL' 'PROGRAM'
DMAP_SERVICE -> 'DMAP' 'SERVICE' 'IS' 'STARTED' 'TO' 'EXECUTE' 'C_EXTERNAL_FUNCTION'
DMAP_EXECUTION -> 'DMAP' 'EXECUTION' 'PROGRAM' 'IS' 'IN' 'DM8' 'INSTALLATION' 'DIRECTORY' 'BIN' 'SUBDIRECTORY' 'DIRECTLY' 'EXECUTED' 'TO' 'START' 'DMAP' 'SERVICE'
C_EXTERNAL_FUNCTION_CALL -> 'WHEN' 'USER' 'CALLS' 'C_EXTERNAL_FUNCTION' 'SERVER' 'OPERATION' 'STEPS' 'ARE' 'FIRST' 'DETERMINE' 'CALLED' 'SHARED' 'LIBRARY' 'AND' 'FUNCTION' 'THEN' 'NOTIFY' 'AGENT' 'PROCESS' 'TO' 'WORK' 'AGENT' 'PROCESS' 'LOADS' 'SPECIFIED' 'SHARED' 'LIBRARY' 'AND' 'RETURNS' 'RESULT' 'TO' 'SERVER' 'AFTER' 'FUNCTION' 'EXECUTION'
```"
10.1.1 生成动态库 ,"```plaintext
S -> DM_STRUCTURED_PARAM | SCALAR_TYPE_PARAM
DM_STRUCTURED_PARAM -> 'de_data' 'function_name_1' '(' 'de_args' '*' 'args' ')' '{' 'C_LANGUAGE_FUNCTION_BODY' '}'
C_LANGUAGE_FUNCTION_BODY -> 'C_LANGUAGE_FUNCTION_IMPLEMENTATION'

de_data -> 'struct' 'de_data' '{' 'int' 'null_flag' ';' 'union' '{' 'int' 'v_int' ';' 'double' 'v_double' ';' 'char' 'v_str' '[]' ';' '}' 'data' ';' '}'
de_args -> 'struct' 'de_args' '{' 'int' 'n_args' ';' 'de_data' '*' 'args' ';' '}'

SCALAR_TYPE_PARAM -> 'RETURN_TYPE' 'function_name_2' '(' 'PARAMETER_LIST' ')' '{' 'C_LANGUAGE_FUNCTION_BODY' '}'
RETURN_TYPE -> 'int' | 'double' | 'char' '*'
PARAMETER_LIST -> 'int' | 'double' | 'char' '*' | 'int' ',' 'double' | 'int' ',' 'char' '*' | 'double' ',' 'char' '*' | 'int' ',' 'double' ',' 'char' '*'

GET_FUNCTIONS -> 'int' 'de_get_int' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ')' ';' | 'double' 'de_get_double' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ')' ';' | 'char' '*' 'de_get_str' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ')' ';' | 'char' '*' 'de_get_str_with_len' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ',' 'int' '*' 'len' ')' ';'
SET_FUNCTIONS -> 'void' 'de_set_int' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ',' 'int' 'ret' ')' ';' | 'void' 'de_set_double' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ',' 'double' 'ret' ')' ';' | 'void' 'de_set_str' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ',' 'char' '*' 'ret' ')' ';' | 'void' 'de_set_str_with_len' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ',' 'char' '*' 'ret' ',' 'int' 'len' ')' ';' | 'void' 'de_set_null' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ')' ';'
RETURN_FUNCTIONS -> 'de_data' 'de_return_int' '(' 'int' 'ret' ')' ';' | 'de_data' 'de_return_double' '(' 'double' 'ret' ')' ';' | 'de_data' 'de_return_str' '(' 'char' '*' 'ret' ')' ';' | 'de_data' 'de_return_str_with_len' '(' 'char' '*' 'ret' ',' 'int' 'len' ')' ';' | 'de_data' 'de_return_null' '(' ')' ';'
DE_STR_FREE -> 'void' 'de_str_free' '(' 'char' '*' 'str' ')' ';'
DE_IS_NULL -> 'int' 'de_is_null' '(' 'de_args' '*' 'args' ',' 'int' 'arg_id' ')' ';'
```"
10.1.2 C外部函数创建 ,"```plaintext
CREATE_FUNCTION -> 'CREATE' 'OR' 'REPLACE' 'FUNCTION' SCHEMA_NAME '.' FUNCTION_NAME '(' PARAMETER_LIST ')' 'RETURN' DATATYPE 'EXTERNAL' DLL_PATH ALIAS 'USING' FUNCTION_TYPE ';'
SCHEMA_NAME -> 'schemaname_1'
FUNCTION_NAME -> 'functionname_1'
PARAMETER_LIST -> 'parameter_column_1'
DATATYPE -> 'datatype_1'
DLL_PATH -> 'dllpath_value'
ALIAS -> 'alias_value' | ''
FUNCTION_TYPE -> 'C' | 'CS'
```"
10.1.3 举例说明 ,"```plaintext
S -> EXAMPLE | CREATE_FUNCTION | CALL_FUNCTION | VIEW_RESULT
EXAMPLE -> '编写' 'C语言' '外部函数' 'C_CONCAT' '用于将两个字符串连接'
CREATE_FUNCTION -> 'CREATE' 'OR' 'REPLACE' 'FUNCTION' 'MY_CONCAT' '(' 'A' 'VARCHAR' ',' 'B' 'VARCHAR' ')' 'RETURN' 'VARCHAR' 'EXTERNAL' 'external_lib_value' 'C_CONCAT' 'USING' 'C'
CALL_FUNCTION -> 'SELECT' 'MY_CONCAT' '(' 'string_value' ',' 'string_value' ')'
VIEW_RESULT -> '查看结果' 'string_value'

external_lib_value -> 'd:\xx\tt\newp.dll' | '/mnt/libtest.so'
string_value -> 'hello ' | 'world!'
```"
10.2 JAVA外部函数 ,"```plaintext
JAVA_EXTERNAL_FUNCTION -> 'JAVA' 'EXTERNAL' 'FUNCTION'
JAVA_EXTERNAL_FUNCTION_DESCRIPTION -> 'JAVA' 'EXTERNAL' 'FUNCTION' 'IS' 'USED' 'TO' 'WRITE' 'JAVA' 'LANGUAGE' 'CODE' 'COMPILED' 'INTO' 'JAR' 'PACKAGE' 'OUTSIDE' 'DATABASE' 'AND' 'CALLED' 'BY' 'USER' 'THROUGH' 'DMSQL' 'PROGRAM'
DMAAGENT -> 'DMAAGENT' 'TOOL'
DMAAGENT_DESCRIPTION -> 'DMAAGENT' 'TOOL' 'IS' 'USED' 'TO' 'EXECUTE' 'JAVA' 'EXTERNAL' 'FUNCTION' 'AND' 'MUST' 'BE' 'STARTED' 'BEFORE' 'EXECUTION'
DMAAGENT_LOCATION -> 'DMAAGENT' 'EXECUTABLE' 'IS' 'LOCATED' 'IN' 'DM8' 'INSTALLATION' 'DIRECTORY' 'UNDER' 'TOOL/DMAAGENT' 'SUB_DIRECTORY'
DMAAGENT_DOCUMENTATION -> 'DMAAGENT' 'USAGE' 'DOCUMENTATION' 'CAN' 'BE' 'FOUND' 'IN' 'README' 'DOCUMENT' 'IN' 'THE' 'SAME' 'DIRECTORY'
JAVA_EXTERNAL_FUNCTION_CALL_PROCESS -> 'WHEN' 'USER' 'CALLS' 'JAVA' 'EXTERNAL' 'FUNCTION' 'SERVER' 'OPERATION' 'STEPS' 'ARE' 'FIRST' 'DETERMINE' 'CALL' 'JAR' 'PACKAGE' 'AND' 'FUNCTION' 'THEN' 'NOTIFY' 'AGENT' 'PROCESS' 'TO' 'WORK'
AGENT_PROCESS -> 'AGENT' 'PROCESS' 'LOADS' 'SPECIFIED' 'JAR' 'PACKAGE' 'AND' 'RETURNS' 'RESULT' 'TO' 'SERVER' 'AFTER' 'FUNCTION' 'EXECUTION'
JAVA_COMMAND_REQUIREMENT -> 'NOTE' 'THAT' 'CURRENT' 'USER' 'MUST' 'BE' 'ABLE' 'TO' 'RUN' 'JAVA' 'COMMAND' 'FOR' 'JAVA' 'EXTERNAL' 'FUNCTION' 'CALL' 'OTHERWISE' 'IT' 'WILL' 'LEAD' 'TO' 'CALL' 'FAILURE'
```"
10.2.1 生成 jar包 ,"```plaintext
S -> '用户' '必须' '严格按照' 'JAVA' '语言' '的' '格式' '书写' '代码' '，' '完成后' '生成' 'jar' '包'
```"
10.2.2 JAVA外部函数创建 ,"```plaintext
CREATE_JAVA_FUNCTION -> 'CREATE' 'OR' 'REPLACE' 'FUNCTION' SCHEMA_NAME '.' FUNCTION_NAME '(' PARAMETER_LIST ')' 'RETURN' RETURN_TYPE 'EXTERNAL' JAR_PATH ALIAS 'USING' 'JAVA'
SCHEMA_NAME -> 'schemaname_1'
FUNCTION_NAME -> 'functionname_1'
PARAMETER_LIST -> PARAMETER | PARAMETER ',' PARAMETER
PARAMETER -> PARAMETER_MODE PARAMETER_TYPE
PARAMETER_MODE -> 'IN' | 'OUT' | 'IN OUT' | 'OUT IN'
PARAMETER_TYPE -> 'int_value' | 'string_value' | 'bigint_value' | 'double_value'
RETURN_TYPE -> 'datatype_1'
JAR_PATH -> 'jarpath_value'
ALIAS -> 'alias_value' | ''
```"
10.2.3 举例说明 ,"```plaintext
S -> EXAMPLE | CREATE_FUNCTION | CALL_FUNCTION
EXAMPLE -> '编写（JAVA 语言）外部函数：testAdd 用于求两个数之和，testStr 用于在一个字符串后面加上hello。'
CREATE_FUNCTION -> CREATE_FUNCTION_INT | CREATE_FUNCTION_CHR
CREATE_FUNCTION_INT -> 'CREATE OR REPLACE FUNCTION MY_INT(a int_value, b int_value) RETURN int_value EXTERNAL \'..\\dmdbms\\bin\\external_jar\\test.jar\' ""com.test.package1.test.testAdd"" USING java;'
CREATE_FUNCTION_CHR -> 'CREATE OR REPLACE FUNCTION MY_chr(s string_value) RETURN string_value EXTERNAL \'..\\dmdbms\\bin\\external_jar\\test.jar\' ""com.test.package1.test.testStr"" USING java;'
CALL_FUNCTION -> CALL_FUNCTION_INT | CALL_FUNCTION_CHR
CALL_FUNCTION_INT -> 'select MY_INT(1,2);'
CALL_FUNCTION_CHR -> 'select MY_chr(\'abc\');'
```"
10.3 DMAP使用说明 ,"```plaintext
TEXT -> '10.3' 'DMAP' '使用说明'
DMAP -> 'DMAP' '(' 'DM' 'Assit' 'progress' ')' '作为' '数据库' '管理' '系统' '的' '辅助' '进程' '，' '提供' '外部' '函数' '、' '备份' '还原' '等' '功能' '的' '执行'。
```"
10.3.1 启动 DMAP ,"```plaintext
S -> START_DMAP | START_DMAP_WITH_CONFIG
START_DMAP -> 'DMAP'
START_DMAP_WITH_CONFIG -> 'DMAP' 'dmap_ini' '=' 'dmap_ini_value'

dmap_ini_value -> 'dmap_ini_path_1'
```"
10.3.2 使用 DMAP执行外部函数 ,"```plaintext
CREATE_FUNCTION -> 'CREATE' 'OR' 'REPLACE' 'FUNCTION' 'function_name_1' '(' 'A' 'VARCHAR' ',' 'B' 'VARCHAR' ')' 'RETURN' 'VARCHAR' 'EXTERNAL' 'external_path_value' 'C_CAT' 'USING' 'C'
SELECT_FUNCTION -> 'SELECT' 'function_name_1' '(' 'string_value_1' ',' 'string_value_2' ')'
LOG_CHECK -> '可在log目录下查看dmap.log日志文件，其中记录了执行外部函数时消息收发的日志'
PACKAGE_DESCRIPTION -> 'DM支持DMSQL程序包来扩展数据库功能，用户可以通过包来创建应用程序或者使用包来管理过程和函数'
```"
11.1 创建包 ,"```nltk
S -> CREATE_PACKAGE
CREATE_PACKAGE -> 'CREATE' 'PACKAGE' 'package_name_1' 'INCLUDES' 'PACKAGE_SPECIFICATION' 'AND' 'PACKAGE_BODY'
```"
11.1.1 创建包规范 ,"```plaintext
CREATE_PACKAGE -> 'CREATE' OR_REPLACE 'PACKAGE' SCHEMA_NAME '.' PACKAGE_NAME WITH_ENCRYPTION AUTHID AS_IS PACKAGE_DECLARATION_LIST 'END' PACKAGE_NAME
OR_REPLACE -> 'OR' 'REPLACE' | ''
SCHEMA_NAME -> 'schemaname_1'
PACKAGE_NAME -> 'packagename_1'
WITH_ENCRYPTION -> 'WITH' 'ENCRYPTION' | ''
AUTHID -> 'AUTHID' 'DEFINER' | 'AUTHID' 'CURRENT_USER' | ''
AS_IS -> 'AS' | 'IS'
PACKAGE_DECLARATION_LIST -> PACKAGE_DECLARATION ';' | PACKAGE_DECLARATION ';' PACKAGE_DECLARATION_LIST
PACKAGE_DECLARATION -> VARIABLE_DEFINITION | CURSOR_DEFINITION | EXCEPTION_DEFINITION | PROCEDURE_DEFINITION | FUNCTION_DEFINITION | TYPE_DEFINITION
VARIABLE_DEFINITION -> VARIABLE_NAME VARIABLE_TYPE DEFAULT_ASSIGN_EXPRESSION
VARIABLE_NAME -> 'variable_name_1'
VARIABLE_TYPE -> DMSQL_PROGRAM_TYPE | SCHEMA_NAME '.' TABLE_NAME '.' COLUMN_NAME '%TYPE' | SCHEMA_NAME '.' TABLE_NAME '%ROWTYPE' | RECORD_TYPE
DMSQL_PROGRAM_TYPE -> 'dmsql_program_type_1'
TABLE_NAME -> 'table_name_1'
COLUMN_NAME -> 'column_name_1'
RECORD_TYPE -> 'RECORD' '(' VARIABLE_NAME DMSQL_PROGRAM_TYPE ';' VARIABLE_NAME DMSQL_PROGRAM_TYPE ';' ')'
DEFAULT_ASSIGN_EXPRESSION -> 'DEFAULT' EXPRESSION | 'ASSIGN' EXPRESSION | ':=' EXPRESSION | ''
EXPRESSION -> 'expression_1'
CURSOR_DEFINITION -> 'CURSOR' CURSOR_NAME FOR_QUERY
CURSOR_NAME -> 'cursor_name_1'
FOR_QUERY -> 'FOR' QUERY_STATEMENT | ''
QUERY_STATEMENT -> 'query_statement_1'
EXCEPTION_DEFINITION -> EXCEPTION_NAME 'EXCEPTION' FOR_EXCEPTION_CODE
EXCEPTION_NAME -> 'exception_name_1'
FOR_EXCEPTION_CODE -> 'FOR' EXCEPTION_CODE | ''
EXCEPTION_CODE -> 'exception_code_1'
PROCEDURE_DEFINITION -> 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST
PROCEDURE_NAME -> 'procedure_name_1'
PARAMETER_LIST -> 'parameter_list_1'
FUNCTION_DEFINITION -> 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE RESULT_CACHE DETERMINISTIC PIPELINED
FUNCTION_NAME -> 'function_name_1'
RETURN_DATA_TYPE -> 'return_data_type_1'
RESULT_CACHE -> 'RESULT_CACHE' | ''
DETERMINISTIC -> 'DETERMINISTIC' | ''
PIPELINED -> 'PIPELINED' | ''
TYPE_DEFINITION -> 'TYPE' TYPE_NAME 'IS' DATA_TYPE
TYPE_NAME -> 'type_name_1'
DATA_TYPE -> 'data_type_1'
```"
11.1.2 创建包主体 ,"```plaintext
CREATE_PACKAGE_BODY -> 'CREATE' OR_REPLACE 'PACKAGE' 'BODY' SCHEMA_NAME '.' PACKAGE_NAME WITH_ENCRYPTION AS_IS PACKAGE_BODY_PART 'END' PACKAGE_NAME
OR_REPLACE -> 'OR' 'REPLACE' | ''
SCHEMA_NAME -> 'schema_name_1'
PACKAGE_NAME -> 'package_name_1'
WITH_ENCRYPTION -> 'WITH' 'ENCRYPTION' | ''
AS_IS -> 'AS' | 'IS'
PACKAGE_BODY_PART -> BODY_DECLARATION_LIST INITIALIZATION_CODE
BODY_DECLARATION_LIST -> BODY_DECLARATION | BODY_DECLARATION ',' BODY_DECLARATION
BODY_DECLARATION -> VARIABLE_DEFINITION | CURSOR_DEFINITION | EXCEPTION_DEFINITION | PROCEDURE_DEFINITION | FUNCTION_DEFINITION | TYPE_DECLARATION | PROCEDURE_IMPLEMENTATION | FUNCTION_IMPLEMENTATION
VARIABLE_DEFINITION -> VARIABLE_NAME_LIST DATA_TYPE DEFAULT_VALUE_DEFINITION
VARIABLE_NAME_LIST -> 'variable_name_1' | 'variable_name_1' ',' 'variable_name_2'
DATA_TYPE -> 'data_type_1'
DEFAULT_VALUE_DEFINITION -> 'DEFAULT' 'default_value' | ''
CURSOR_DEFINITION -> 'CURSOR' CURSOR_NAME FOR_QUERY
CURSOR_NAME -> 'cursor_name_1'
FOR_QUERY -> 'FOR' 'query_statement' | ''
EXCEPTION_DEFINITION -> EXCEPTION_NAME 'EXCEPTION' FOR_EXCEPTION_CODE
EXCEPTION_NAME -> 'exception_name_1'
FOR_EXCEPTION_CODE -> 'FOR' 'exception_code_value' | ''
PROCEDURE_DEFINITION -> 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST
PROCEDURE_NAME -> 'procedure_name_1'
PARAMETER_LIST -> '(' 'parameter_list_1' ')' | ''
FUNCTION_DEFINITION -> 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE
FUNCTION_NAME -> 'function_name_1'
RETURN_DATA_TYPE -> 'return_data_type_1'
TYPE_DECLARATION -> 'TYPE' TYPE_NAME 'IS' DATA_TYPE
TYPE_NAME -> 'type_name_1'
PROCEDURE_IMPLEMENTATION -> 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' PROCEDURE_NAME
IMPLEMENTATION_BODY -> 'implementation_body_1'
FUNCTION_IMPLEMENTATION -> 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE DETERMINISTIC PIPELINED AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' FUNCTION_NAME
DETERMINISTIC -> 'DETERMINISTIC' | ''
PIPELINED -> 'PIPELINED' | ''
INITIALIZATION_CODE -> DECLARATION_PART 'BEGIN' EXECUTION_PART EXCEPTION_HANDLING_PART
DECLARATION_PART -> 'DECLARE' DECLARATION_DEFINITION | ''
DECLARATION_DEFINITION -> VARIABLE_LIST_DECLARATION | EXCEPTION_VARIABLE_DECLARATION | CURSOR_DEFINITION | SUBPROCEDURE_DEFINITION | SUBFUNCTION_DEFINITION
VARIABLE_LIST_DECLARATION -> VARIABLE_INITIALIZATION | VARIABLE_INITIALIZATION VARIABLE_INITIALIZATION
VARIABLE_INITIALIZATION -> 'variable_initialization_1'
EXCEPTION_VARIABLE_DECLARATION -> EXCEPTION_VARIABLE_NAME 'EXCEPTION' FOR_ERROR_CODE
EXCEPTION_VARIABLE_NAME -> 'exception_variable_name_1'
FOR_ERROR_CODE -> 'FOR' 'error_code_value' | ''
SUBPROCEDURE_DEFINITION -> 'PROCEDURE' SUBPROCEDURE_NAME '(' PARAMETER_LIST ')' AS_IS MODULE_BODY
SUBPROCEDURE_NAME -> 'subprocedure_name_1'
MODULE_BODY -> 'module_body_1'
SUBFUNCTION_DEFINITION -> 'FUNCTION' SUBFUNCTION_NAME '(' PARAMETER_LIST ')' 'RETURN' RETURN_DATA_TYPE AS_IS MODULE_BODY
SUBFUNCTION_NAME -> 'subfunction_name_1'
EXECUTION_PART -> SQL_PROCEDURE_STATEMENT_SEQUENCE | SQL_PROCEDURE_STATEMENT_SEQUENCE SQL_PROCEDURE_STATEMENT_SEQUENCE
SQL_PROCEDURE_STATEMENT_SEQUENCE -> LABEL_DECLARATION SQL_PROCEDURE_STATEMENT
LABEL_DECLARATION -> '<<' LABEL_NAME '>>' | ''
LABEL_NAME -> 'label_name_1'
SQL_PROCEDURE_STATEMENT -> SQL_STATEMENT | SQL_CONTROL_STATEMENT
SQL_STATEMENT -> 'sql_statement_1'
SQL_CONTROL_STATEMENT -> 'sql_control_statement_1'
EXCEPTION_HANDLING_PART -> 'EXCEPTION' EXCEPTION_HANDLING_STATEMENT | EXCEPTION_HANDLING_STATEMENT EXCEPTION_HANDLING_STATEMENT
EXCEPTION_HANDLING_STATEMENT -> 'WHEN' EXCEPTION_NAME 'THEN' SQL_PROCEDURE_STATEMENT_SEQUENCE
```"
11.2 重编译包 ,"```nltk
S -> ALTER_PACKAGE
ALTER_PACKAGE -> 'ALTER' 'PACKAGE' SCHEMA_NAME '.' PACKAGE_NAME 'COMPILE' DEBUG_OPTION
SCHEMA_NAME -> 'schemaname_1'
PACKAGE_NAME -> 'package_name_1'
DEBUG_OPTION -> 'DEBUG' | ''
```"
11.3 删除包 ,"```plaintext
S -> DELETE_PACKAGE
DELETE_PACKAGE -> DELETE_PACKAGE_SPEC | DELETE_PACKAGE_BODY
DELETE_PACKAGE_SPEC -> 'DELETE' 'PACKAGE' 'SPEC' 'package_spec_name_1'
DELETE_PACKAGE_BODY -> 'DELETE' 'PACKAGE' 'BODY' 'package_body_name_1'
```"
11.3.1 删除包规范 ,"```plaintext
DROP_PACKAGE -> 'DROP' 'PACKAGE' IF_EXISTS SCHEMA_NAME '.' PACKAGE_NAME ';'
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1'
PACKAGE_NAME -> 'packagename_1'
```"
11.3.2 删除包主体 ,"```plaintext
S -> DROP_PACKAGE_BODY
DROP_PACKAGE_BODY -> 'DROP' 'PACKAGE' 'BODY' IF_EXISTS SCHEMA_NAME '.' PACKAGE_NAME ';'
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1' | ''
PACKAGE_NAME -> 'packagename_1'
```"
11.4 应用实例 ,"```plaintext
CREATE_TABLE -> 'CREATE' 'TABLE' 'Person_name_1' '(' 'Id' 'INT' 'IDENTITY' ',' 'Name' 'VARCHAR' '(' '100' ')' ',' 'City' 'VARCHAR' '(' '100' ')' ')'
INSERT_INTO -> 'INSERT' 'INTO' 'Person_name_1' '(' 'Name' ',' 'City' ')' 'VALUES' '(' 'string_value' ',' 'string_value' ')'
CREATE_PACKAGE -> 'CREATE' 'OR' 'REPLACE' 'PACKAGE' 'PersonPackage_name_1' 'AS' 'E_NoPerson' 'EXCEPTION' ';' 'PersonCount' 'INT' ';' 'Pcur' 'CURSOR' ';' 'PROCEDURE' 'AddPerson' '(' 'Pname' 'VARCHAR' '(' '100' ')' ',' 'Pcity' 'varchar' '(' '100' ')' ')' ';' 'PROCEDURE' 'RemovePerson' '(' 'Pname' 'VARCHAR' '(' '100' ')' ',' 'Pcity' 'varchar' '(' '100' ')' ')' ';' 'PROCEDURE' 'RemovePerson' '(' 'Pid' 'INT' ')' ';' 'FUNCTION' 'GetPersonCount' 'RETURN' 'INT' ';' 'PROCEDURE' 'PersonList' ';' 'END' 'PersonPackage_name_1'
CREATE_PACKAGE_BODY -> 'CREATE' 'OR' 'REPLACE' 'PACKAGE' 'BODY' 'PersonPackage_name_1' 'AS' 'PROCEDURE' 'AddPerson' '(' 'Pname' 'VARCHAR' '(' '100' ')' ',' 'Pcity' 'varchar' '(' '100' ')' ')' 'AS' 'BEGIN' 'INSERT' 'INTO' 'Person_name_1' '(' 'Name' ',' 'City' ')' 'VALUES' '(' 'Pname' ',' 'Pcity' ')' ';' 'PersonCount' '=' 'PersonCount' '+' 'SQL%ROWCOUNT' ';' 'END' 'AddPerson' ';' 'PROCEDURE' 'RemovePerson' '(' 'Pname' 'VARCHAR' '(' '100' ')' ',' 'Pcity' 'varchar' '(' '100' ')' ')' 'AS' 'BEGIN' 'DELETE' 'FROM' 'Person_name_1' 'WHERE' 'NAME' 'LIKE' 'Pname' 'AND' 'City' 'like' 'Pcity' ';' 'PersonCount' '=' 'PersonCount' '-' 'SQL%ROWCOUNT' ';' 'END' 'RemovePerson' ';' 'PROCEDURE' 'RemovePerson' '(' 'Pid' 'INT' ')' 'AS' 'BEGIN' 'DELETE' 'FROM' 'Person_name_1' 'WHERE' 'Id' '=' 'Pid' ';' 'PersonCount' '=' 'PersonCount' '-' 'SQL%ROWCOUNT' ';' 'END' 'RemovePerson' ';' 'FUNCTION' 'GetPersonCount' 'RETURN' 'INT' 'AS' 'BEGIN' 'RETURN' 'PersonCount' ';' 'END' 'GetPersonCount' ';' 'PROCEDURE' 'PersonList' 'AS' 'DECLARE' 'V_id' 'INT' ';' 'V_name' 'VARCHAR' '(' '100' ')' ';' 'V_city' 'VARCHAR' '(' '100' ')' ';' 'BEGIN' 'IF' 'PersonCount' '=' '0' 'THEN' 'RAISE' 'E_NoPerson' ';' 'END' 'IF' ';' 'OPEN' 'Pcur' 'FOR' 'SELECT' 'Id' ',' 'Name' ',' 'City' 'FROM' 'Person_name_1' ';' 'LOOP' 'FETCH' 'Pcur' 'INTO' 'V_id' ',' 'V_name' ',' 'V_city' ';' 'EXIT' 'WHEN' 'Pcur%NOTFOUND' ';' 'PRINT' '(' 'string_value' ')' ';' 'END' 'LOOP' ';' 'CLOSE' 'Pcur' ';' 'END' 'PersonList' ';' 'BEGIN' 'SELECT' 'COUNT' '(' '*' ')' 'INTO' 'PersonCount' 'FROM' 'Person_name_1' ';' 'END' 'PersonPackage_name_1'
ALTER_PACKAGE -> 'ALTER' 'PACKAGE' 'PersonPackage_name_1' 'COMPILE'
CALL_PROCEDURE -> 'CALL' 'PersonPackage_name_1' '.' 'AddPerson' '(' 'string_value' ',' 'string_value' ')'
CALL_PROCEDURE -> 'CALL' 'PersonPackage_name_1' '.' 'RemovePerson' '(' 'string_value' ',' 'string_value' ')'
CALL_PROCEDURE -> 'CALL' 'PersonPackage_name_1' '.' 'RemovePerson' '(' 'int_value' ')'
SELECT_VARIABLE -> 'SELECT' 'PersonPackage_name_1' '.' 'PersonCount'
SELECT_FUNCTION -> 'SELECT' 'PersonPackage_name_1' '.' 'GetPersonCount'
CALL_PROCEDURE -> 'CALL' 'PersonPackage_name_1' '.' 'PersonList'
```"
12.1普通 CLASS类型 ,"```plaintext
CLASS_TYPE -> CLASS_HEAD CLASS_BODY
CLASS_HEAD -> CLASS_DECLARATION
CLASS_BODY -> CLASS_IMPLEMENTATION

CLASS_DECLARATION -> TYPE_DEFINITION ATTRIBUTES MEMBER_METHODS CONSTRUCTORS
TYPE_DEFINITION -> CURSOR_DEFINITION | EXCEPTION_DEFINITION | RECORD_TYPE_DEFINITION | ARRAY_TYPE_DEFINITION | MEMORY_INDEX_TABLE_DEFINITION
CURSOR_DEFINITION -> 'cursor_definition'
EXCEPTION_DEFINITION -> 'exception_definition'
RECORD_TYPE_DEFINITION -> 'record_type_definition'
ARRAY_TYPE_DEFINITION -> 'array_type_definition'
MEMORY_INDEX_TABLE_DEFINITION -> 'memory_index_table_definition'

ATTRIBUTES -> ATTRIBUTE | ATTRIBUTE ATTRIBUTES
ATTRIBUTE -> 'attribute_name_1' 'data_type'

MEMBER_METHODS -> MEMBER_METHOD | MEMBER_METHOD MEMBER_METHODS
MEMBER_METHOD -> 'member_method_name_1' PARAMETERS 'return_type'
PARAMETERS -> '(' 'parameter_list' ')' | ''
RETURN_TYPE -> 'return_type_value'

CONSTRUCTORS -> CONSTRUCTOR | CONSTRUCTOR CONSTRUCTORS
CONSTRUCTOR -> 'constructor_name_1' PARAMETERS 'return_type'
CONSTRUCTOR_NAME_1 -> 'class_name_1'
RETURN_TYPE -> 'class_name_1'

CLASS_IMPLEMENTATION -> TYPE_DEFINITION_IMPLEMENTATION MEMBER_METHOD_IMPLEMENTATION CONSTRUCTOR_IMPLEMENTATION
TYPE_DEFINITION_IMPLEMENTATION -> CURSOR_DEFINITION | EXCEPTION_DEFINITION | RECORD_TYPE_DEFINITION | ARRAY_TYPE_DEFINITION | MEMORY_INDEX_TABLE_DEFINITION
MEMBER_METHOD_IMPLEMENTATION -> 'member_method_name_1' PARAMETERS 'return_type' 'method_body'
CONSTRUCTOR_IMPLEMENTATION -> 'constructor_name_1' PARAMETERS 'return_type' 'constructor_body'

CLASS_DELETION -> 'DELETE' 'CLASS' 'class_name_1'
CLASS_BODY_DELETION -> 'DELETE' 'CLASS_BODY' 'class_name_1'
CLASS_USAGE -> 'USE' 'CLASS' 'class_name_1'
```"
12.1.1 声明类 ,"```plaintext
CREATE_CLASS -> CREATE OR_REPLACE CLASS CLASS_HEADER CLASS_BODY END CLASS_NAME
OR_REPLACE -> 'OR REPLACE' | ''
CLASS_HEADER -> SCHEMA_NAME '.' CLASS_NAME WITH_ENCRYPTION UNDER_PARENT FINAL_OPTION INSTANTIABLE_OPTION AUTHID_OPTION
SCHEMA_NAME -> 'schemaname_1'
CLASS_NAME -> 'classname_1'
WITH_ENCRYPTION -> 'WITH ENCRYPTION' | ''
UNDER_PARENT -> 'UNDER' SCHEMA_NAME '.' SUPERCLASS_NAME | ''
SUPERCLASS_NAME -> 'superclassname_1'
FINAL_OPTION -> 'FINAL' | 'NOT FINAL'
INSTANTIABLE_OPTION -> 'INSTANTIABLE' | 'NOT INSTANTIABLE'
AUTHID_OPTION -> 'AUTHID DEFINER' | 'AUTHID CURRENT_USER' | ''
CLASS_BODY -> 'AS' CLASS_DECLARATION_LIST | 'IS' CLASS_DECLARATION_LIST
CLASS_DECLARATION_LIST -> CLASS_DECLARATION ';' | CLASS_DECLARATION ';' CLASS_DECLARATION_LIST
CLASS_DECLARATION -> VARIABLE_DEFINITION | PROCEDURE_DEFINITION | FUNCTION_DEFINITION | TYPE_DECLARATION
VARIABLE_DEFINITION -> VARIABLE_NAME_LIST DATA_TYPE DEFAULT_VALUE
VARIABLE_NAME_LIST -> 'variable_name_1' | 'variable_name_1' ',' 'variable_name_2'
DATA_TYPE -> 'datatype_1'
DEFAULT_VALUE -> 'DEFAULT' 'default_value' | ''
PROCEDURE_DEFINITION -> METHOD_INHERITANCE_ATTRIBUTE STATIC_OR_MEMBER 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST
METHOD_INHERITANCE_ATTRIBUTE -> OVERRIDE_ATTRIBUTE | FINAL_ATTRIBUTE | OVERRIDE_ATTRIBUTE FINAL_ATTRIBUTE
OVERRIDE_ATTRIBUTE -> 'NOT OVERRIDING' | 'OVERRIDING'
FINAL_ATTRIBUTE -> 'FINAL' | 'NOT FINAL' | 'INSTANTIABLE' | 'NOT INSTANTIABLE'
STATIC_OR_MEMBER -> 'STATIC' | 'MEMBER' | ''
PROCEDURE_NAME -> 'procedure_name_1'
PARAMETER_LIST -> '(' 'parameter_list_1' ')' | ''
FUNCTION_DEFINITION -> METHOD_INHERITANCE_ATTRIBUTE MAP_OPTION STATIC_OR_MEMBER 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE DETERMINISTIC_OPTION PIPELINED_OPTION
MAP_OPTION -> 'MAP' | ''
FUNCTION_NAME -> 'function_name_1'
RETURN_DATA_TYPE -> 'returndatatype_1'
DETERMINISTIC_OPTION -> 'DETERMINISTIC' | ''
PIPELINED_OPTION -> 'PIPELINED' | ''
TYPE_DECLARATION -> 'TYPE' TYPE_NAME 'IS' DATA_TYPE
TYPE_NAME -> 'typename_1'
```"
12.1.2 实现类 ,"```plaintext
CREATE_CLASS_BODY -> 'CREATE' OR_REPLACE 'CLASS' 'BODY' SCHEMA_NAME '.' CLASS_NAME WITH_ENCRYPTION AS_IS CLASS_BODY 'END' CLASS_NAME
OR_REPLACE -> 'OR' 'REPLACE' | ''
WITH_ENCRYPTION -> 'WITH' 'ENCRYPTION' | ''
AS_IS -> 'AS' | 'IS'
CLASS_BODY -> PROCEDURE_FUNCTION_LIST INITIALIZATION_CODE
PROCEDURE_FUNCTION_LIST -> PROCEDURE_IMPLEMENTATION | FUNCTION_IMPLEMENTATION | PROCEDURE_IMPLEMENTATION ',' FUNCTION_IMPLEMENTATION
PROCEDURE_IMPLEMENTATION -> METHOD_INHERITANCE_ATTRIBUTE STATIC_MEMBER 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' PROCEDURE_NAME
FUNCTION_IMPLEMENTATION -> METHOD_INHERITANCE_ATTRIBUTE MAP STATIC_MEMBER 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE DETERMINISTIC PIPELINED AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' FUNCTION_NAME
METHOD_INHERITANCE_ATTRIBUTE -> OVERRIDE_ATTRIBUTE | FINAL_ATTRIBUTE | OVERRIDE_ATTRIBUTE FINAL_ATTRIBUTE
OVERRIDE_ATTRIBUTE -> 'NOT' 'OVERRIDING' | 'OVERRIDING'
FINAL_ATTRIBUTE -> 'FINAL' | 'NOT' 'FINAL' | 'INSTANTIABLE' | 'NOT' 'INSTANTIABLE'
STATIC_MEMBER -> 'STATIC' | 'MEMBER'
MAP -> 'MAP' | ''
DETERMINISTIC -> 'DETERMINISTIC' | ''
PIPELINED -> 'PIPELINED' | ''
INITIALIZATION_CODE -> DECLARE_PART 'BEGIN' EXECUTION_PART EXCEPTION_HANDLING_PART | ''
DECLARE_PART -> 'DECLARE' DECLARE_DEFINITION | ''
DECLARE_DEFINITION -> VARIABLE_DECLARATION | EXCEPTION_VARIABLE_DECLARATION | CURSOR_DEFINITION | SUBPROCEDURE_DEFINITION | SUBFUNCTION_DEFINITION
VARIABLE_DECLARATION -> VARIABLE_NAME ',' VARIABLE_NAME VARIABLE_TYPE DEFAULT_ASSIGN_EXPRESSION ';'
VARIABLE_TYPE -> DMSQL_PROGRAM_TYPE | SCHEMA_NAME '.' TABLE_NAME '.' COLUMN_NAME '%TYPE' | SCHEMA_NAME '.' TABLE_NAME '%ROWTYPE' | RECORD_TYPE
RECORD_TYPE -> 'RECORD' '(' VARIABLE_NAME DMSQL_PROGRAM_TYPE ',' VARIABLE_NAME DMSQL_PROGRAM_TYPE ')'
EXCEPTION_VARIABLE_DECLARATION -> EXCEPTION_VARIABLE_NAME 'EXCEPTION' 'FOR' ERROR_NUMBER | ''
CURSOR_DEFINITION -> 'CURSOR' CURSOR_NAME 'FOR' QUERY_EXPRESSION | TABLE_JOIN | ''
SUBPROCEDURE_DEFINITION -> 'PROCEDURE' PROCEDURE_NAME '(' PARAMETER_LIST ')' AS_IS MODULE_BODY
SUBFUNCTION_DEFINITION -> 'FUNCTION' FUNCTION_NAME '(' PARAMETER_LIST ')' 'RETURN' RETURN_DATA_TYPE PIPELINED AS_IS MODULE_BODY
EXECUTION_PART -> SQL_PROCEDURE_STATEMENT_SEQUENCE ';' SQL_PROCEDURE_STATEMENT_SEQUENCE | ''
SQL_PROCEDURE_STATEMENT_SEQUENCE -> LABEL_DECLARATION SQL_PROCEDURE_STATEMENT ';'
LABEL_DECLARATION -> '<<' LABEL_NAME '>>' | ''
SQL_PROCEDURE_STATEMENT -> SQL_STATEMENT | SQL_CONTROL_STATEMENT
EXCEPTION_HANDLING_PART -> 'EXCEPTION' EXCEPTION_HANDLING_STATEMENT ';' EXCEPTION_HANDLING_STATEMENT | ''
EXCEPTION_HANDLING_STATEMENT -> 'WHEN' EXCEPTION_NAME 'THEN' SQL_PROCEDURE_STATEMENT_SEQUENCE
```"
12.1.3 重编译类 ,"```plaintext
S -> ALTER_CLASS
ALTER_CLASS -> 'ALTER' 'CLASS' SCHEMA_NAME '.' CLASS_NAME 'COMPILE' DEBUG_OPTION
SCHEMA_NAME -> 'schemaname_1'
CLASS_NAME -> 'class_name_1'
DEBUG_OPTION -> 'DEBUG' | ''
```"
12.1.4 删除类 ,"```plaintext
S -> DROP_CLASS_HEAD | DROP_CLASS_BODY
DROP_CLASS_HEAD -> 'DROP' 'CLASS' IF_EXISTS_OPTION SCHEMA_NAME_OPTION CLASS_NAME_1 RESTRICT_CASCADE_OPTION
DROP_CLASS_BODY -> 'DROP' 'CLASS' 'BODY' IF_EXISTS_OPTION SCHEMA_NAME_OPTION CLASS_NAME_2 RESTRICT_CASCADE_OPTION

IF_EXISTS_OPTION -> 'IF' 'EXISTS' | ''
SCHEMA_NAME_OPTION -> SCHEMA_NAME '.' CLASS_NAME_1 | CLASS_NAME_1
SCHEMA_NAME -> 'schema_name_1'
CLASS_NAME_1 -> 'class_name_1'
CLASS_NAME_2 -> 'class_name_2'
RESTRICT_CASCADE_OPTION -> 'RESTRICT' | 'CASCADE' | ''
```"
12.1.5 类的使用 ,"```plaintext
S -> CLASS_USAGE | VARIABLE_OBJECT | COLUMN_OBJECT | CLASS_INHERITANCE
CLASS_USAGE -> '类类型同普通的数据类型一样，可以作为表中列的数据类型，DMSQL 程序语句块中变量的数据类型或过程及函数参数的数据类型。'
VARIABLE_OBJECT -> '变量对象指的是在 DMSQL程序语句块中声明的类类型的变量'
COLUMN_OBJECT -> '列对象指的是在表中类类型的列'
CLASS_INHERITANCE -> 'CREATE OR REPLACE CLASS cls01 NOT FINAL IS name VARCHAR2(10); MEMBER FUNCTION get_info RETURN VARCHAR2; END; CREATE OR REPLACE CLASS cls02 UNDER cls01 IS ID INT; OVERRIDING MEMBER FUNCTION get_info RETURN VARCHAR2; END;'

VARIABLE_OBJECT_INSTANTIATION -> '类的实例化通过NEW 表达式调用构造函数完成。'
VARIABLE_OBJECT_REFERENCE -> '通过‗=‘进行的类类型变量之间的赋值所进行的是对象的引用， 并没有复制一个新的对象。'
VARIABLE_OBJECT_ATTRIBUTE_ACCESS -> '<对象名>.<属性名>'
VARIABLE_OBJECT_METHOD_CALL -> '<对象名>.<成员方法名>(<参数>{,<参数>})'
COLUMN_OBJECT_INSERTION -> '列对象的创建是通过INSERT语句向表中插入数据完成，插入语句中的值是变量对象，插入后存储在表中的数据即为列对象。'
COLUMN_OBJECT_COPY -> '存储在表中的对象不允许对对象中成员变量的修改，通过into查询或‘=‘进行的列到变量的赋值所进行的是对象的赋值， 生成了一个与列对象数据一样的副本， 在该副本上进行的修改不会影响表中列对象的值。'
COLUMN_OBJECT_ATTRIBUTE_ACCESS -> '<列名>.<属性名>'
COLUMN_OBJECT_METHOD_CALL -> '<列名>.<成员方法名>(<参数>{,<参数>})'

APPLICATION_EXAMPLE_VARIABLE_OBJECT -> 'declare type ex_rec_t is record (a int, b int); rec ex_rec_t; o1 mycls; o2 mycls; begin o1 = new mycls(1,2,3); o2 = o1; rec = o2.r; print rec.a; print rec.b; rec = o1.f1(4,5); print rec.a; print rec.b; print o1.id; end;'
APPLICATION_EXAMPLE_COLUMN_OBJECT -> 'Create table tt1(c1 int, c2 mycls); Insert into tt1 values(1, mycls(1,2,3)); Declare o mycls; id int; begin select top 1 c2 into o from tt1; select top 1 c2.id into id from tt1; end;'
```"
12.2 JAVA CLASS类型 ,"```plaintext
JAVA_CLASS -> JAVA_CLASS_DEFINITION JAVA_CLASS_CONTENT
JAVA_CLASS_DEFINITION -> 'JAVA' 'CLASS' 'TYPE'
JAVA_CLASS_CONTENT -> TYPE_DEFINITION | ATTRIBUTE | MEMBER_METHOD | CONSTRUCTOR
TYPE_DEFINITION -> 'TYPE' 'DEFINITION' CURSOR_DEFINITION EXCEPTION_DEFINITION RECORD_TYPE_DEFINITION ARRAY_TYPE_DEFINITION STRUCT_TYPE_DEFINITION MEMORY_INDEX_TABLE_DEFINITION
CURSOR_DEFINITION -> 'CURSOR' 'cursor_name_1'
EXCEPTION_DEFINITION -> 'EXCEPTION' 'exception_name_1'
RECORD_TYPE_DEFINITION -> 'RECORD' 'TYPE' 'record_type_name_1'
ARRAY_TYPE_DEFINITION -> 'ARRAY' 'TYPE' 'array_type_name_1'
STRUCT_TYPE_DEFINITION -> 'STRUCT' 'TYPE' 'struct_type_name_1'
MEMORY_INDEX_TABLE_DEFINITION -> 'MEMORY' 'INDEX' 'TABLE' 'memory_index_table_name_1'
ATTRIBUTE -> 'ATTRIBUTE' ATTRIBUTE_DEFINITION
ATTRIBUTE_DEFINITION -> 'MEMBER' 'VARIABLE' DATA_TYPE
DATA_TYPE -> 'STANDARD' 'DATA' 'TYPE' | 'CUSTOM' 'DATA' 'TYPE'
MEMBER_METHOD -> 'MEMBER' 'METHOD' METHOD_DEFINITION
METHOD_DEFINITION -> 'METHOD' 'method_name_1' 'THIS' 'SELF' 'OBJECT' 'ACCESS'
CONSTRUCTOR -> 'CONSTRUCTOR' CONSTRUCTOR_DEFINITION
CONSTRUCTOR_DEFINITION -> 'FUNCTION' 'NAME' 'CLASS' 'NAME' 'SAME' 'NO' 'RETURN' 'TYPE' 'DEFAULT' 'CONSTRUCTOR' 'CUSTOM' 'CONSTRUCTOR'
DEFAULT_CONSTRUCTOR -> 'ZERO' 'PARAMETER' 'CONSTRUCTOR' | 'FULL' 'PARAMETER' 'CONSTRUCTOR'
CUSTOM_CONSTRUCTOR -> 'USER' 'DEFINED' 'CONSTRUCTOR' 'PARAMETER' 'COUNT' 'DIFFERENT'
```"
12.2.1 定义 JAVA类 ,"```plaintext
S -> CREATE_JAVA_CLASS
CREATE_JAVA_CLASS -> 'CREATE' OR_REPLACE 'JAVA' CLASS_ATTRIBUTES 'CLASS' CLASS_NAME EXTENDS_CLAUSE CLASS_BODY
OR_REPLACE -> 'OR REPLACE' | ''
CLASS_ATTRIBUTES -> PUBLIC ABSTRACT FINAL | PUBLIC ABSTRACT | PUBLIC FINAL | ABSTRACT FINAL | PUBLIC | ABSTRACT | FINAL | ''
CLASS_NAME -> 'class_name_1'
EXTENDS_CLAUSE -> 'EXTENDS' PARENT_CLASS | ''
PARENT_CLASS -> 'schemaname_1' '.' 'parent_class_name_1'
CLASS_BODY -> '{' CLASS_DEFINITIONS '}'
CLASS_DEFINITIONS -> CLASS_DEFINITION | CLASS_DEFINITION ';' CLASS_DEFINITION
CLASS_DEFINITION -> VARIABLE_DEFINITION | METHOD_DEFINITION
VARIABLE_DEFINITION -> VARIABLE_ATTRIBUTES DATA_TYPE VARIABLE_NAME_LIST DEFAULT_VALUE
VARIABLE_ATTRIBUTES -> STATIC FINAL_ATTRIBUTE | STATIC | FINAL_ATTRIBUTE | ''
FINAL_ATTRIBUTE -> 'FINAL'
DATA_TYPE -> 'data_type_1'
VARIABLE_NAME_LIST -> 'variable_name_1' | 'variable_name_1' ',' 'variable_name_2'
DEFAULT_VALUE -> 'default_value_1' | ''
METHOD_DEFINITION -> METHOD_ATTRIBUTES METHOD_INHERITANCE_ATTRIBUTES STATIC RETURN_TYPE FUNCTION_NAME PARAMETER_LIST METHOD_BODY
METHOD_ATTRIBUTES -> 'PUBLIC' | 'PRIVATE'
METHOD_INHERITANCE_ATTRIBUTES -> OVERRIDE_ATTRIBUTE | FINAL_ATTRIBUTE | ABSTRACT_ATTRIBUTE | ''
OVERRIDE_ATTRIBUTE -> 'OVERRIDE'
ABSTRACT_ATTRIBUTE -> 'ABSTRACT'
STATIC -> 'STATIC' | ''
RETURN_TYPE -> 'return_type_1'
FUNCTION_NAME -> 'function_name_1'
PARAMETER_LIST -> 'parameter_list_1'
METHOD_BODY -> '{' 'implementation_body_1' '}'
```"
12.2.2 重编译 JAVA类 ,"```plaintext
ALTER_JAVA_CLASS -> 'ALTER' 'JAVA' 'CLASS' SCHEMA_NAME '.' JAVA_CLASS_NAME 'COMPILE' DEBUG_OPTION
SCHEMA_NAME -> 'schemaname_1'
JAVA_CLASS_NAME -> 'javaclass_name_1'
DEBUG_OPTION -> 'DEBUG' | ''
```"
12.2.3 删除 JAVA类 ,"```plaintext
S -> DROP_CLASS
DROP_CLASS -> 'DROP' 'CLASS' IF_EXISTS CLASS_NAME RESTRICT_CASCADE
IF_EXISTS -> 'IF EXISTS' | ''
CLASS_NAME -> 'class_name_1'
RESTRICT_CASCADE -> 'RESTRICT' | 'CASCADE' | ''
```"
12.2.4 类的使用 ,"```plaintext
CREATE_JAVA_CLASS -> 'CREATE' 'OR' 'REPLACE' 'JAVA' 'CLASS' 'jcls_name_1' JAVA_CLASS_BODY
JAVA_CLASS_BODY -> '{' JAVA_CLASS_MEMBERS '}'
JAVA_CLASS_MEMBERS -> JAVA_CLASS_FIELD JAVA_CLASS_METHODS
JAVA_CLASS_FIELD -> 'int' 'a_value'
JAVA_CLASS_METHODS -> JAVA_STATIC_METHOD JAVA_MEMBER_METHOD
JAVA_STATIC_METHOD -> 'public' 'static' 'int' 'testAdd2' '(' 'int' 'a_value' ',' 'int' 'b_value' ')' '{' 'return' 'a_value' '+' 'b_value' ';' '}'
JAVA_MEMBER_METHOD -> 'public' 'int' 'testAdd3' '(' 'int' 'a_value' ',' 'int' 'b_value' ',' 'int' 'c_value' ')' '{' 'return' 'a_value' '+' 'b_value' '+' 'c_value' ';' '}'

CREATE_TABLE -> 'CREATE' 'TABLE' 'tt2_name_1' '(' 'c1_value' 'int' ',' 'c2_value' 'jcls_name_1' ')'
INSERT_STATIC_METHOD -> 'INSERT' 'INTO' 'tt2_name_1' 'VALUES' '(' 'jcls_name_1' '.' 'testadd2' '(' '1_value' ',' '2_value' ')' ',' 'jcls_name_1' '(' '1_value' ')' ')'
INSERT_MEMBER_METHOD -> 'INSERT' 'INTO' 'tt2_name_1' 'VALUES' '(' 'jcls_name_1' '(' ')' '.' 'testadd3' '(' '1_value' ',' '2_value' ',' '3_value' ')' ',' 'jcls_name_1' '(' '2_value' ')' ')'

CREATE_TYPE -> 'CREATE' 'TYPE' TYPE_BODY
TYPE_BODY -> 'CREATE' 'TYPE' 'BODY' 'FOR' 'TYPE_NAME' '{' PROCEDURES_OR_METHODS '}'
PROCEDURES_OR_METHODS -> PROCEDURE | METHOD
PROCEDURE -> 'PROCEDURE' 'procedure_name_1' '(' PARAMETERS ')' 'IS' 'BEGIN' 'END' ';'
METHOD -> 'METHOD' 'method_name_1' '(' PARAMETERS ')' 'RETURN' 'RETURN_TYPE' 'IS' 'BEGIN' 'END' ';'
PARAMETERS -> PARAMETER | PARAMETER ',' PARAMETER
PARAMETER -> 'parameter_name_1' 'parameter_type_1'
```"
13.1 创建类型 ,"```plaintext
CREATE_TYPE -> 'CREATE' OR_REPLACE 'TYPE' SCHEMA_NAME '.' TYPE_NAME WITH_ENCRYPTION AUTHID_CLAUSE AS_IS TYPE_DEFINITION
OR_REPLACE -> 'OR REPLACE' | ''
SCHEMA_NAME -> 'schemaname_1'
TYPE_NAME -> 'typename_1'
WITH_ENCRYPTION -> 'WITH ENCRYPTION' | ''
AUTHID_CLAUSE -> 'AUTHID DEFINER' | 'AUTHID CURRENT_USER' | ''
AS_IS -> 'AS' | 'IS'
TYPE_DEFINITION -> RECORD_TYPE_DEFINE_CLAUSE | OBJECT_TYPE_DEFINE_CLAUSE | ARRAY_TYPE_DEFINE_CLAUSE | ASSEMBLE_TYPE_DEFINE_CLAUSE
RECORD_TYPE_DEFINE_CLAUSE -> 'RECORD' '(' VARIABLE_LIST_DEFINE ')'
OBJECT_TYPE_DEFINE_CLAUSE -> 'OBJECT' UNDER_PARENT_TYPE '(' OBJECT_DEFINE ',' OBJECT_DEFINE ')' FINAL_INSTANTIABLE
UNDER_PARENT_TYPE -> 'UNDER' SCHEMA_NAME '.' PARENT_TYPE_NAME | ''
PARENT_TYPE_NAME -> 'parent_type_name_1'
FINAL_INSTANTIABLE -> 'FINAL' | 'NOT FINAL' | 'INSTANTIABLE' | 'NOT INSTANTIABLE' | ''
OBJECT_DEFINE -> VARIABLE_LIST_DEFINE | PROCEDURE_DECLARE | FUNCTION_DECLARE | CONSTRUCTOR_DECLARE
VARIABLE_LIST_DEFINE -> 'variable_list_define_1'
PROCEDURE_DECLARE -> METHOD_INHERIT_ATTRIBUTE STATIC_MEMBER 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST
METHOD_INHERIT_ATTRIBUTE -> OVERRIDE_ATTRIBUTE | FINAL_ATTRIBUTE | OVERRIDE_ATTRIBUTE FINAL_ATTRIBUTE
OVERRIDE_ATTRIBUTE -> 'NOT OVERRIDING' | 'OVERRIDING' | ''
FINAL_ATTRIBUTE -> 'FINAL' | 'NOT FINAL' | 'INSTANTIABLE' | 'NOT INSTANTIABLE' | ''
STATIC_MEMBER -> 'STATIC' | 'MEMBER' | ''
PROCEDURE_NAME -> 'procedure_name_1'
PARAMETER_LIST -> 'parameter_list_1'
FUNCTION_DECLARE -> METHOD_INHERIT_ATTRIBUTE MAP STATIC_MEMBER 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE DETERMINISTIC PIPELINED
MAP -> 'MAP' | ''
FUNCTION_NAME -> 'function_name_1'
RETURN_DATA_TYPE -> 'return_data_type_1'
DETERMINISTIC -> 'DETERMINISTIC' | ''
PIPELINED -> 'PIPELINED' | ''
CONSTRUCTOR_DECLARE -> 'CONSTRUCTOR FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN SELF AS RESULT'
ARRAY_TYPE_DEFINE_CLAUSE -> 'ARRAY' DATA_TYPE '[' CONSTANT_EXPRESSION ']'
DATA_TYPE -> 'data_type_1'
CONSTANT_EXPRESSION -> 'constant_expression_1'
ASSEMBLE_TYPE_DEFINE_CLAUSE -> ARRAY_ASSEMBLE_DEFINE_CLAUSE | NESTED_TABLE_DEFINE_CLAUSE | INDEX_TABLE_DEFINE_CLAUSE
ARRAY_ASSEMBLE_DEFINE_CLAUSE -> 'VARRAY' '(' CONSTANT_EXPRESSION ')' 'OF' DATA_TYPE
NESTED_TABLE_DEFINE_CLAUSE -> 'TABLE OF' DATA_TYPE
INDEX_TABLE_DEFINE_CLAUSE -> 'TABLE OF' DATA_TYPE 'INDEX BY' DATA_TYPE
```"
" 
13.2创建类型体 ","```plaintext
CREATE_TYPE_BODY -> 'CREATE' OR_REPLACE 'TYPE' 'BODY' SCHEMA_NAME '.' TYPE_NAME WITH_ENCRYPTION AS_IS OBJECT_TYPE_BODY_DEFINITION 'END'
OR_REPLACE -> 'OR' 'REPLACE' | ''
SCHEMA_NAME -> 'schemaname_name_1'
TYPE_NAME -> 'typename_name_1'
WITH_ENCRYPTION -> 'WITH' 'ENCRYPTION' | ''
AS_IS -> 'AS' | 'IS'
OBJECT_TYPE_BODY_DEFINITION -> OBJECT_TYPE_BODY_DEFINITION_CLAUSE
OBJECT_TYPE_BODY_DEFINITION_CLAUSE -> OBJECT_TYPE_BODY_DEFINITION | OBJECT_TYPE_BODY_DEFINITION ',' OBJECT_TYPE_BODY_DEFINITION
OBJECT_TYPE_BODY_DEFINITION -> PROCEDURE_IMPLEMENTATION | FUNCTION_IMPLEMENTATION | CONSTRUCTOR_FUNCTION_IMPLEMENTATION
PROCEDURE_IMPLEMENTATION -> METHOD_INHERITANCE_ATTRIBUTE STATIC_MEMBER 'PROCEDURE' PROCEDURE_NAME PARAMETER_LIST AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' PROCEDURE_NAME
FUNCTION_IMPLEMENTATION -> METHOD_INHERITANCE_ATTRIBUTE MAP STATIC_MEMBER 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' RETURN_DATA_TYPE DETERMINISTIC PIPELINED AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' FUNCTION_NAME
CONSTRUCTOR_FUNCTION_IMPLEMENTATION -> 'CONSTRUCTOR' 'FUNCTION' FUNCTION_NAME PARAMETER_LIST 'RETURN' 'SELF' 'AS' 'RESULT' AS_IS 'BEGIN' IMPLEMENTATION_BODY 'END' FUNCTION_NAME
METHOD_INHERITANCE_ATTRIBUTE -> OVERRIDING_ATTRIBUTE | FINAL_ATTRIBUTE | OVERRIDING_ATTRIBUTE FINAL_ATTRIBUTE
OVERRIDING_ATTRIBUTE -> 'NOT' 'OVERRIDING' | 'OVERRIDING'
FINAL_ATTRIBUTE -> 'FINAL' | 'NOT' 'FINAL' | 'INSTANTIABLE' | 'NOT' 'INSTANTIABLE'
STATIC_MEMBER -> 'STATIC' | 'MEMBER'
PROCEDURE_NAME -> 'procedure_name_1'
FUNCTION_NAME -> 'function_name_1'
PARAMETER_LIST -> 'parameter_list_1'
RETURN_DATA_TYPE -> 'return_data_type_1'
DETERMINISTIC -> 'DETERMINISTIC' | ''
PIPELINED -> 'PIPELINED' | ''
IMPLEMENTATION_BODY -> 'implementation_body_1'
```"
13.3重编译类型 ,"```plaintext
S -> ALTER_TYPE
ALTER_TYPE -> 'ALTER' 'TYPE' SCHEMA_NAME '.' TYPE_NAME 'COMPILE' DEBUG_OPTION
SCHEMA_NAME -> 'schemaname_1'
TYPE_NAME -> 'type_name_1'
DEBUG_OPTION -> 'DEBUG' | ''
```"
13.4删除类型 ,"```
S -> DELETE_TYPE | DELETE_TYPE_BODY
DELETE_TYPE -> '删除类型'
DELETE_TYPE_BODY -> '删除类型体'
```"
13.4.1删除类型 ,"```
DROP_TYPE -> 'DROP' 'TYPE' IF_EXISTS SCHEMA_NAME '.' TYPE_NAME RESTRICT_CASCADE
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1'
TYPE_NAME -> 'type_name_1'
RESTRICT_CASCADE -> 'RESTRICT' | 'CASCADE' | ''
```"
13.4.2删除类型体 ,"```plaintext
DROP_TYPE_BODY -> 'DROP' 'TYPE' 'BODY' IF_EXISTS SCHEMA_NAME '.' TYPE_NAME RESTRICT_OR_CASCADE
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1'
TYPE_NAME -> 'type_name_1'
RESTRICT_OR_CASCADE -> 'RESTRICT' | 'CASCADE' | ''
```"
13.5自定义类型的使用 ,"```plaintext
CUSTOM_TYPE_USAGE -> '13.5' 'CUSTOM_TYPE_USAGE'
```"
13.5.1 使用规则 ,"```plaintext
OBJECT_TYPE -> CLASS_TYPE | RECORD_TYPE | ARRAY_TYPE | COLLECTION_TYPE
CLASS_TYPE -> '类类型'
RECORD_TYPE -> '记录类型'
ARRAY_TYPE -> '数组类型'
COLLECTION_TYPE -> '集合类型'

USER_DEFINED_TYPE -> '用户自定义数据类型'
ELEMENT_TYPE -> '元素类型'
MEMBER_VARIABLE_TYPE -> '成员变量类型'

TABLE_COLUMN_TYPE -> OBJECT_TYPE
NESTED_TYPE -> '嵌套使用的数据类型'
INDEX_TABLE_TYPE -> '索引表类型'
CURSOR_TYPE -> '游标类型'

OBJECT_TYPE_USAGE -> '对象类型可以直接作为表中列的数据类型'
OTHER_TYPE_USAGE -> '其他类型只能作为对象类型中成员变量的类型或类型中嵌套使用的数据类型'
RESTRICTED_OBJECT_TYPE -> '含有索引表类型和游标类型的对象类型也不能作为表中列的数据类型'

USAGE_RULE_1 -> '对象类型与类等价，类的使用规则可详见第12章《类类型》'
USAGE_RULE_2 -> '创建的记录类型、数组类型和集合类型，可以直接在 DMSQL程序语句块中使用，不必在语句块中声明类型'
USAGE_RULE_3 -> '用户自定义数据类型可以作为其他用户自定义数据类型的元素类型或成员变量类型'
USAGE_RULE_4 -> '只有对象类型可以直接作为表中列的数据类型；其他类型只能作为对象类型中成员变量的类型或类型中嵌套使用的数据类型。但含有索引表类型和游标类型的对象类型也不能作为表中列的数据类型'
```"
13.5.2 应用实例 ,"```plaintext
S -> CREATE_TYPE | CREATE_TYPE_BODY | CREATE_TABLE | INSERT_INTO
CREATE_TYPE -> 'CREATE' 'TYPE' 'COMPLEX' 'AS' 'OBJECT' '(' RPART_DEF ',' IPART_DEF ',' FUNCTION_PLUS ',' FUNCTION_LES ')'
RPART_DEF -> 'RPART' 'REAL'
IPART_DEF -> 'IPART' 'REAL'
FUNCTION_PLUS -> 'FUNCTION' 'PLUS' '(' 'X' 'COMPLEX' ')' 'RETURN' 'COMPLEX'
FUNCTION_LES -> 'FUNCTION' 'LES' '(' 'X' 'COMPLEX' ')' 'RETURN' 'COMPLEX'

CREATE_TYPE_BODY -> 'CREATE' 'TYPE' 'BODY' 'COMPLEX' 'AS' FUNCTION_PLUS_BODY FUNCTION_LES_BODY 'END'
FUNCTION_PLUS_BODY -> 'FUNCTION' 'PLUS' '(' 'X' 'COMPLEX' ')' 'RETURN' 'COMPLEX' 'IS' 'BEGIN' 'RETURN' 'COMPLEX' '(' RPART_PLUS ',' IPART_PLUS ')' 'END'
RPART_PLUS -> 'RPART' '+' 'X.RPART'
IPART_PLUS -> 'IPART' '+' 'X.IPART'
FUNCTION_LES_BODY -> 'FUNCTION' 'LES' '(' 'X' 'COMPLEX' ')' 'RETURN' 'COMPLEX' 'IS' 'BEGIN' 'RETURN' 'COMPLEX' '(' RPART_LES ',' IPART_LES ')' 'END'
RPART_LES -> 'RPART' '-' 'X.RPART'
IPART_LES -> 'IPART' '-' 'X.IPART'

CREATE_TABLE -> 'CREATE' 'TABLE' 'C_TAB' '(' C1_DEF ',' C2_DEF ')'
C1_DEF -> 'C1' 'INT'
C2_DEF -> 'C2' 'COMPLEX'

INSERT_INTO -> INSERT_INTO_1 | INSERT_INTO_2
INSERT_INTO_1 -> 'INSERT' 'INTO' 'C_TAB' 'VALUES' '(' INT_VALUE ',' COMPLEX_VALUE ')'
INSERT_INTO_2 -> 'INSERT' 'INTO' 'C_TAB' 'VALUES' '(' INT_VALUE ',' COMPLEX_VALUE '.PLUS' '(' COMPLEX_VALUE ')' ')'
INT_VALUE -> 'int_value'
COMPLEX_VALUE -> 'COMPLEX' '(' INT_VALUE ',' INT_VALUE ')'
```"
13.5.3 IS OF TYPE的使用 ,"```plaintext
IS_OF_TYPE -> EXPRESSION 'IS' NOT_OPTION 'OF' TYPE_OPTION '(' TYPE_LIST ')'
NOT_OPTION -> 'NOT' | ''
TYPE_OPTION -> 'TYPE' | ''
TYPE_LIST -> 'type_name_1' | 'type_name_1' ',' 'type_name_2'

CREATE_TYPE -> 'CREATE' 'OR' 'REPLACE' 'TYPE' 'type_name_1' 'AS' 'OBJECT' '(' 'NAME' 'VARCHAR2' '(' 'int_value' ')' ')' 'NOT' 'FINAL'
CREATE_TABLE -> 'CREATE' 'TABLE' 'table_name_1' '(' 'column_name_1' 'INT' ',' 'column_name_2' 'type_name_1' ')'
INSERT_INTO -> 'INSERT' 'INTO' 'table_name_1' 'VALUES' '(' 'int_value' ',' 'type_name_1' '(' 'string_value' ')' ')'
COMMIT -> 'COMMIT'
SELECT -> 'SELECT' '*' 'FROM' 'table_name_1' 'WHERE' 'column_name_1' 'IS' 'OF' '(' 'type_name_1' ')'

TRIGGER -> 'TRIGGER' 'trigger_name_1' 'ON' 'table_name_1' 'FOR' 'INSERT' 'DELETE' 'UPDATE' 'AS' 'BEGIN' 'DMSQL' 'END'
TRIGGER_DEFINITION -> 'DEFINE' 'TRIGGER' 'trigger_name_1' 'ON' 'table_name_1' 'FOR' 'INSERT' 'DELETE' 'UPDATE' 'AS' 'BEGIN' 'DMSQL' 'END'
TRIGGER_EXAMPLE -> 'TRIGGER' 'trigger_name_1' 'ON' 'table_name_1' 'FOR' 'INSERT' 'DELETE' 'UPDATE' 'AS' 'BEGIN' 'DMSQL' 'END'
```"
14.1 触发器的定义 ,"```plaintext
S -> TRIGGER_DEFINITION
TRIGGER_DEFINITION -> TABLE_TRIGGER | EVENT_TRIGGER | TIME_TRIGGER
TABLE_TRIGGER -> '表触发器'
EVENT_TRIGGER -> '事件触发器'
TIME_TRIGGER -> '时间触发器'
```"
14.1.1表触发器 ,"```plaintext
S -> CREATE_TRIGGER
CREATE_TRIGGER -> 'CREATE' OR_REPLACE 'TRIGGER' TRIGGER_NAME WITH_ENCRYPTION TRIGGER_LIMIT_DESC REFERENCING_OPTION FOR_EACH_OPTION WHEN_OPTION TRIGGER_BODY
OR_REPLACE -> 'OR' 'REPLACE' | ''
TRIGGER_NAME -> 'trigger_name_1'
WITH_ENCRYPTION -> 'WITH' 'ENCRYPTION' | ''
TRIGGER_LIMIT_DESC -> TRIGGER_LIMIT_DESC_1 | TRIGGER_LIMIT_DESC_2
TRIGGER_LIMIT_DESC_1 -> BEFORE_AFTER TRIGGER_EVENT_LIST LOCAL_OPTION 'ON' TRIGGER_TABLE_NAME
TRIGGER_LIMIT_DESC_2 -> 'INSTEAD' 'OF' TRIGGER_EVENT_LIST LOCAL_OPTION 'ON' TRIGGER_VIEW_NAME
BEFORE_AFTER -> 'BEFORE' | 'AFTER'
TRIGGER_EVENT_LIST -> TRIGGER_EVENT | TRIGGER_EVENT_LIST 'OR' TRIGGER_EVENT
TRIGGER_EVENT -> 'INSERT' | 'DELETE' | 'UPDATE' | 'UPDATE' 'OF' TRIGGER_COLUMN_LIST
TRIGGER_COLUMN_LIST -> 'column_name_1' | 'column_name_1' ',' 'column_name_2'
LOCAL_OPTION -> 'LOCAL' | ''
TRIGGER_TABLE_NAME -> 'table_name_1'
TRIGGER_VIEW_NAME -> 'view_name_1'
REFERENCING_OPTION -> 'REFERENCING' REFERENCING_LIST | ''
REFERENCING_LIST -> REFERENCING_1 | REFERENCING_2
REFERENCING_1 -> 'OLD' ROW_OPTION 'AS' REFERENCE_VAR_NAME NEW_ROW_OPTION
REFERENCING_2 -> 'NEW' ROW_OPTION 'AS' REFERENCE_VAR_NAME
ROW_OPTION -> 'ROW' | ''
REFERENCE_VAR_NAME -> 'reference_var_name_1'
NEW_ROW_OPTION -> 'NEW' ROW_OPTION 'AS' REFERENCE_VAR_NAME | ''
FOR_EACH_OPTION -> 'FOR' 'EACH' ROW_STATEMENT | ''
ROW_STATEMENT -> 'ROW' | 'STATEMENT'
WHEN_OPTION -> 'WHEN' '(' CONDITION_EXPR ')' | ''
CONDITION_EXPR -> 'condition_expr_1'
TRIGGER_BODY -> 'trigger_body_1'
```"
14.1.2事件触发器 ,"```plaintext
CREATE_TRIGGER -> 'CREATE' 'OR' 'REPLACE'? 'TRIGGER' TRIGGER_NAME 'WITH' 'ENCRYPTION'? TRIGGER_TIMING TRIGGER_EVENT 'ON' TRIGGER_OBJECT 'WHEN' CONDITION_EXPRESSION? TRIGGER_BODY
TRIGGER_NAME -> SCHEMA_NAME '.'? 'trigger_name_1'
SCHEMA_NAME -> 'schemaname_value'
TRIGGER_TIMING -> 'BEFORE' | 'AFTER'
TRIGGER_EVENT -> DDL_EVENT_CLAUSE | SYSTEM_EVENT_CLAUSE
DDL_EVENT_CLAUSE -> DDL_EVENT ('OR' DDL_EVENT)?
DDL_EVENT -> 'DDL' | 'CREATE' | 'ALTER' | 'DROP' | 'GRANT' | 'REVOKE' | 'TRUNCATE' | 'COMMENT'
SYSTEM_EVENT_CLAUSE -> SYSTEM_EVENT ('OR' SYSTEM_EVENT)?
SYSTEM_EVENT -> 'LOGIN' | 'LOGOUT' | 'SERERR' | 'BACKUP' 'DATABASE' | 'RESTORE' 'DATABASE' | 'AUDIT' | 'NOAUDIT' | 'TIMER' | 'STARTUP' | 'SHUTDOWN'
TRIGGER_OBJECT -> SCHEMA_NAME '.'? ('SCHEMA' | 'DATABASE')
CONDITION_EXPRESSION -> 'condition_value'
TRIGGER_BODY -> 'triggerbody_value'
```"
14.1.3时间触发器 ,"```plaintext
S -> CREATE_TRIGGER
CREATE_TRIGGER -> 'CREATE' OR_REPLACE 'TRIGGER' TRIGGER_NAME WITH_ENCRYPTION 'AFTER TIMER ON DATABASE' TRIGGER_SCHEDULE WHEN_CONDITION TRIGGER_BODY
OR_REPLACE -> 'OR REPLACE' | ''
TRIGGER_NAME -> '模式名_1.触发器名_1'
WITH_ENCRYPTION -> 'WITH ENCRYPTION' | ''
TRIGGER_SCHEDULE -> FOR_ONCE | RECURRING
FOR_ONCE -> 'FOR ONCE AT DATETIME' TIME_EXPRESSION EXEC_EP_SEQNO
RECURRING -> MONTH_RATE | WEEK_RATE | DAY_RATE
MONTH_RATE -> 'FOR EACH' INT_VALUE 'MONTH' DAY_IN_MONTH
DAY_IN_MONTH -> 'DAY' INT_VALUE | 'DAY' INT_VALUE 'OF WEEK' INT_VALUE | 'DAY' INT_VALUE 'OF WEEK LAST'
WEEK_RATE -> 'FOR EACH' INT_VALUE 'WEEK' DAY_OF_WEEK_LIST
DAY_OF_WEEK_LIST -> INT_VALUE | INT_VALUE ',' INT_VALUE
DAY_RATE -> 'FOR EACH' INT_VALUE 'DAY'
ONCE_IN_DAY -> 'AT TIME' TIME_EXPRESSION
TIMES_IN_DAY -> DURING_TIME 'FOR EACH' INT_VALUE 'MINUTE'
DURING_TIME -> 'NULL' | 'FROM TIME' TIME_EXPRESSION | 'FROM TIME' TIME_EXPRESSION 'TO TIME' TIME_EXPRESSION
DURING_DATE -> 'NULL' | 'FROM DATETIME' DATETIME_EXPRESSION | 'FROM DATETIME' DATETIME_EXPRESSION 'TO DATETIME' DATETIME_EXPRESSION
EXEC_EP_SEQNO -> 'EXECUTE AT' INT_VALUE
WHEN_CONDITION -> 'WHEN' CONDITION_EXPRESSION | ''
TRIGGER_BODY -> 'BEGIN' SQL_STATEMENTS 'END'
```"
14.2 触发器替换 ,"```plaintext
TRIGGER_REPLACE -> 'OR' 'REPLACE' 'TRIGGER' TRIGGER_NAME
TRIGGER_NAME -> 'trigger_name_1'
ERROR_CONDITION -> TABLE_TRIGGER_REPLACE | EVENT_TRIGGER_REPLACE | TABLE_CHANGE | OBJECT_CHANGE | MODE_CHANGE | EVENT_TYPE_CHANGE
TABLE_TRIGGER_REPLACE -> 'TABLE' 'TRIGGER' 'AND' 'EVENT' 'TRIGGER'
EVENT_TRIGGER_REPLACE -> 'EVENT' 'TRIGGER' 'AND' 'TABLE' 'TRIGGER'
TABLE_CHANGE -> 'TABLE' 'OR' 'VIEW' 'CHANGE'
OBJECT_CHANGE -> 'SCHEMA' 'OR' 'DATABASE' 'CHANGE'
MODE_CHANGE -> 'TRIGGER' 'MODE' 'CHANGE'
EVENT_TYPE_CHANGE -> 'DDL' | 'AUDIT' | 'PRIV' | 'LOGIN' | 'SERVER' | 'BACK' | 'TIMER' | 'STARTUP'
DDL -> 'CREATE' | 'ALTER' | 'DROP' | 'GRANT' | 'REVOKE' | 'TRUNCATE'
AUDIT -> 'AUDIT' | 'NOAUDIT'
PRIV -> 'GRANT' | 'REVOKE'
LOGIN -> 'LOGIN' | 'LOGON' | 'LOGOUT' | 'LOGOFF'
SERVER -> 'SERVER'
BACK -> 'BACKUP' 'DATABASE' | 'RESTORE' 'DATABASE'
TIMER -> 'TIMER'
STARTUP -> 'STARTUP' | 'SHUTDOWN'
```"
14.3设计触发器的原则 ,"```
DESIGN_PRINCIPLES -> PRINCIPLE_1 PRINCIPLE_2 PRINCIPLE_3 PRINCIPLE_4
PRINCIPLE_1 -> 'If' 'you' 'want' 'to' 'ensure' 'that' 'an' 'operation' 'can' 'trigger' 'a' 'series' 'of' 'related' 'actions' ',' 'use' 'a' 'trigger' '.'
PRINCIPLE_2 -> 'Do' 'not' 'use' 'triggers' 'to' 'reimplement' 'functionality' 'already' 'available' 'in' 'DM' '.' 'For' 'example' ',' 'if' 'constraints' 'can' 'perform' 'the' 'desired' 'integrity' 'check' ',' 'do' 'not' 'use' 'a' 'trigger' '.'
PRINCIPLE_3 -> 'Avoid' 'recursive' 'triggers' '.' 'Recursive' 'triggers' 'occur' 'when' 'the' 'statements' 'within' 'a' 'trigger' 'body' 'activate' 'the' 'same' 'trigger' ',' 'causing' 'an' 'infinite' 'loop' '.' 'For' 'example' ',' 'creating' 'a' 'BEFORE' 'UPDATE' 'trigger' 'on' 'table' 'T1' 'that' 'contains' 'an' 'UPDATE' 'statement' 'on' 'table' 'T1' '.'
PRINCIPLE_4 -> 'Reasonable' 'control' 'of' 'trigger' 'size' 'and' 'number' '.' 'Remember' ',' 'once' 'a' 'trigger' 'is' 'created' ',' 'any' 'user' 'performing' 'the' 'corresponding' 'operation' 'at' 'any' 'time' 'will' 'cause' 'the' 'trigger' 'to' 'execute' ',' 'which' 'can' 'be' 'a' 'significant' 'overhead' '.'
```"
14.4 触发器的删除 ,"```nltk
DROP_TRIGGER -> 'DROP' 'TRIGGER' IF_EXISTS SCHEMA_NAME '.' TRIGGER_NAME
IF_EXISTS -> 'IF EXISTS' | ''
SCHEMA_NAME -> 'schemaname_1'
TRIGGER_NAME -> 'triggername_1'
```"
14.5 禁止和允许触发器 ,"```nltk
ALTER_TRIGGER -> 'ALTER' 'TRIGGER' TRIGGER_NAME TRIGGER_STATE
TRIGGER_NAME -> 'schemaname_1' '.' 'triggername_1'
TRIGGER_STATE -> 'DISABLE' | 'ENABLE'
```"
" 
14.6 触发器的重编 ","```plaintext
S -> ALTER_TRIGGER
ALTER_TRIGGER -> 'ALTER' 'TRIGGER' TRIGGER_NAME 'COMPILE' DEBUG_OPTION
TRIGGER_NAME -> SCHEMA_NAME '.' 'trigger_name_1' | 'trigger_name_1'
SCHEMA_NAME -> 'schemaname_1'
DEBUG_OPTION -> 'DEBUG' | ''
```"
14.7 触发器应用举例 ,"```text
S -> TRIGGER_APPLICATION_EXAMPLE
TRIGGER_APPLICATION_EXAMPLE -> '触发器应用举例' DESCRIPTION
DESCRIPTION -> '正如我们在本章所介绍的，触发器是DM系统提供的重要机制。我们可以使用该机制来加强比正常的审计机制、完整性约束机制、安全机制等所能提供的功能更复杂的事务规则。为帮助用户更好地使用该机制，我们提供了一些触发器应用的例子供用户参考。'
```"
14.7.1 使用触发器实现审计功能 ,"```plaintext
S -> AUDIT_FUNCTION_USING_TRIGGERS
AUDIT_FUNCTION_USING_TRIGGERS -> '尽管' 'DM' '系统' '本身' '已经' '提供' '了' '审计' '机制' '，' '但是' '在' '许多' '情况' '下' '我们' '还是' '可以' '利用' '触发器' '完成' '条件' '更加' '复杂' '的' '审计' '。' '与' '内置' '的' '审计' '机制' '相比' '，' '采用' '触发器' '实现' '的' '审计' '有' '如下' '优点' '：' '1．' '使用' '触发器' '可' '针对' '更' '复杂' '的' '条件' '进行' '审计' '；' '2．' '使用' '触发器' '不仅' '可以' '记录' '操作' '语句' '本身' '的' '信息' '，' '还' '可以' '记录' '被' '该' '语句' '修改' '的' '数据' '的' '具体' '值' '；' '3．' '内置' '的' '审计' '机制' '将' '所有' '审计' '信息' '集中' '存放' '，' '而' '触发器' '实现' '的' '审计' '可' '针对' '不同' '的' '操作' '对象' '分别' '存放' '审计' '信息' '，' '便于' '分析' '。' '虽然' '如此' '，' '触发器' '并' '不能' '取代' '内置' '的' '审计' '机制' '。' '因为' '内置' '审计' '机制' '的' '某些' '功能' '触发器' '是' '无法' '做到' '的' '。' '例如' '：' '1.' '内置' '审计' '机制' '可' '审计' '的' '类型' '更多' '。' '触发器' '只能' '审计' '表' '上' '的' 'DML' '操作' '，' '而' '内置' '审计' '机制' '可以' '针对' '各种' '操作' '、' '对象' '和' '用户' '进行' '审计' '；' '2.' '触发器' '只能' '审计' '成功' '的' '操作' '，' '而' '内置' '审计' '机制' '能' '审计' '失败' '的' '操作' '；' '3.' '内置' '审计' '机制' '使用' '起来' '更' '简单' '，' '并且' '其' '正确性' '更' '有' '保障' '。' '用于' '审计' '的' '触发器' '通常' '都是' 'AFTER' '类型' '。' '关于' '审计' '的' '实例' '，' '请' '参考' '《' 'DM8' '安全' '管理' '》' '。'
```"
14.7.2 使用触发器维护数据完整性 ,"```plaintext
S -> TRIGGER_DEFINITION | SCHEMA_SETTING
TRIGGER_DEFINITION -> CREATE_TRIGGER | CREATE_OR_REPLACE_TRIGGER
CREATE_TRIGGER -> 'CREATE' 'TRIGGER' TRIGGER_NAME TRIGGER_EVENT TRIGGER_ACTION
CREATE_OR_REPLACE_TRIGGER -> 'CREATE' 'OR' 'REPLACE' 'TRIGGER' TRIGGER_NAME TRIGGER_EVENT TRIGGER_ACTION
TRIGGER_NAME -> 'Dept_del_upd_cascade' | 'Salary_check'
TRIGGER_EVENT -> 'AFTER' 'DELETE' 'OR' 'UPDATE' 'ON' TABLE_NAME 'FOR' 'EACH' 'ROW' | 'BEFORE' 'INSERT' 'OR' 'UPDATE' 'ON' TABLE_NAME 'FOR' 'EACH' 'ROW'
TRIGGER_ACTION -> 'BEGIN' TRIGGER_LOGIC 'END'
TRIGGER_LOGIC -> IF_STATEMENT | DECLARE_STATEMENT
IF_STATEMENT -> 'IF' CONDITION 'THEN' ACTION 'ELSE' ACTION 'END' 'IF'
DECLARE_STATEMENT -> 'DECLARE' VARIABLE_DECLARATION 'BEGIN' TRIGGER_LOGIC 'END'
VARIABLE_DECLARATION -> VARIABLE_NAME 'FLOAT' | VARIABLE_NAME 'EXCEPTION' 'FOR' ERROR_CODE
VARIABLE_NAME -> 'Minsal' | 'Maxsal' | 'Salary_out_of_range'
ERROR_CODE -> '-20002'
CONDITION -> 'DELETING' | 'UPDATING' | SALARY_CONDITION
SALARY_CONDITION -> ':new.Sal' '<' 'Minsal' 'OR' ':new.Sal' '>' 'Maxsal' | '(:new.Sal' '-' ':old.Sal)' '/' ':old.Sal' '>' '0.25'
ACTION -> 'DELETE' 'FROM' TABLE_NAME 'WHERE' COLUMN_NAME '=' ':old.Deptno' | 'UPDATE' TABLE_NAME 'SET' COLUMN_NAME '=' ':new.Deptno' 'WHERE' COLUMN_NAME '=' ':old.Deptno' | 'RAISE' VARIABLE_NAME
TABLE_NAME -> 'OTHER.DEPTTAB' | 'OTHER.EMPTAB' | 'OTHER.SALGRADE'
COLUMN_NAME -> 'Deptno' | 'Sal' | 'Job_classification' | 'Job'
SCHEMA_SETTING -> 'SET' 'SCHEMA' SCHEMA_NAME
SCHEMA_NAME -> 'OTHER' | 'SYSDBA'
```"
14.7.3 使用触发器保障数据安全性 ,"```plaintext
S -> TRIGGER_DEFINITION
TRIGGER_DEFINITION -> 'CREATE' 'OR' 'REPLACE' 'TRIGGER' 'Emp_permit_changes' 'BEFORE' 'INSERT' 'OR' 'DELETE' 'OR' 'UPDATE' 'ON' 'OTHER.EMPTAB' 'DECLARE' DECLARATIONS 'BEGIN' TRIGGER_BODY 'END'
DECLARATIONS -> 'Dummy' 'INTEGER' ';' 'Invalid_Operate_time' 'EXCEPTION' 'FOR' '-20002' ';'
TRIGGER_BODY -> WEEKEND_CHECK HOLIDAY_CHECK WORK_HOURS_CHECK
WEEKEND_CHECK -> 'IF' '(' 'DAYNAME' '(' 'Sysdate' ')' '=' ""'Saturday'"" 'OR' 'DAYNAME' '(' 'Sysdate' ')' '=' ""'Sunday'"" ')' 'THEN' 'RAISE' 'Invalid_Operate_time' ';' 'END' 'IF' ';'
HOLIDAY_CHECK -> 'IF' '(' 'SELECT' 'COUNT' '(' '*' ')' 'INTO' 'Dummy' 'FROM' 'OTHER.COMPANYHOLIDAYS' 'WHERE' 'Holiday' '=' 'Current_date' ')' 'THEN' 'RAISE' 'Invalid_Operate_time' ';' 'END' 'IF' ';'
WORK_HOURS_CHECK -> 'IF' '(' 'EXTRACT' '(' 'HOUR' 'FROM' 'Current_time' ')' '<' '8' 'OR' 'EXTRACT' '(' 'HOUR' 'FROM' 'Current_time' ')' '>=' '18' ')' 'THEN' 'RAISE' 'Invalid_Operate_time' ';' 'END' 'IF' ';'
```"
14.7.4 使用触发器生成字段默认值 ,"```plaintext
S -> SET_SCHEMA | CREATE_TRIGGER | SET_SCHEMA_SYSDBA | SYNONYM_DESCRIPTION
SET_SCHEMA -> 'SET' 'SCHEMA' 'OTHER'
CREATE_TRIGGER -> 'CREATE' 'OR' 'REPLACE' 'TRIGGER' 'Emp_auto_value' 'BEFORE' 'INSERT' 'ON' 'OTHER.EMPTAB' 'FOR' 'EACH' 'ROW' 'BEGIN' ':new.Sal' '=' '999.99' 'END'
SET_SCHEMA_SYSDBA -> 'SET' 'SCHEMA' 'SYSDBA'
SYNONYM_DESCRIPTION -> '同义词(Synonym)让用户能够为数据库的一个模式下的对象提供别名。同义词通过掩盖一个对象真实的名字和拥有者，并且对远程分布式的数据库对象给予了位置透明特性以此来提供了一定的安全性。同时使用同义词可以简化复杂的 SQL 语句。同义词可以替换模式下的表、视图、序列、函数、存储过程等对象。'
```"
15.1 创建同义词 ,"```plaintext
S -> CREATE_SYNONYM
CREATE_SYNONYM -> 'CREATE' OR_REPLACE_OPTION PUBLIC_OPTION 'SYNONYM' SCHEMA_NAME_1 '.' SYNONYM_NAME_1 'FOR' SCHEMA_NAME_2 '.' OBJECT_NAME_1
OR_REPLACE_OPTION -> 'OR REPLACE' | ''
PUBLIC_OPTION -> 'PUBLIC' | ''
SCHEMA_NAME_1 -> 'schemaname_1' | ''
SYNONYM_NAME_1 -> 'synonym_name_1'
SCHEMA_NAME_2 -> 'schemaname_2' | ''
OBJECT_NAME_1 -> 'object_name_1'
```"
15.2 删除同义词 ,"```plaintext
DROP_SYNONYM -> 'DROP' PUBLIC_OPTION 'SYNONYM' IF_EXISTS_OPTION 'synonym_name_1'
PUBLIC_OPTION -> 'PUBLIC' | ''
IF_EXISTS_OPTION -> 'IF EXISTS' | ''
```"
16.1 创建外部链接 ,"```plaintext
S -> CREATE_LINK
CREATE_LINK -> 'CREATE' OR_REPLACE_OPTION PUBLIC_OPTION 'LINK' LINK_NAME 'CONNECT' CONNECT_TYPE 'WITH' LOGIN_NAME 'IDENTIFIED' 'BY' PASSWORD 'USING' EXTERNAL_CONNECTION_STRING
OR_REPLACE_OPTION -> 'OR' 'REPLACE' | ''
PUBLIC_OPTION -> 'PUBLIC' | ''
LINK_NAME -> 'link_name_1'
CONNECT_TYPE -> 'DAMENG' | 'ORACLE' | 'ODBC'
LOGIN_NAME -> 'login_name_1'
PASSWORD -> 'password_value'
EXTERNAL_CONNECTION_STRING -> DAMENG_CONNECTION_STRING | ORACLE_CONNECTION_STRING | ODBC_CONNECTION_STRING
DAMENG_CONNECTION_STRING -> CONNECTION_TYPE_OPTION SERVER_LIST
CONNECTION_TYPE_OPTION -> 'PRIMARY' 'FIRST' | 'STANDBY' 'FIRST' | 'PRIMARY' 'ONLY' | 'STANDBY' 'ONLY' | ''
SERVER_LIST -> SERVER_ADDRESS | SERVER_ADDRESS ',' SERVER_ADDRESS
SERVER_ADDRESS -> INSTANCE_IP '/' INSTANCE_PORT | MAL_IP '/' MAL_PORT | INSTANCE_NAME
INSTANCE_IP -> 'instance_ip_value'
INSTANCE_PORT -> 'instance_port_value'
MAL_IP -> 'mal_ip_value'
MAL_PORT -> 'mal_port_value'
INSTANCE_NAME -> 'instance_name_1'
ORACLE_CONNECTION_STRING -> TSN_NAME | DESCRIPTION | IP_SERVICE
TSN_NAME -> 'tsn_name_1'
DESCRIPTION -> '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' IP_ADDRESS ')(PORT=' PORT_NUMBER ')))(CONNECT_DATA=(SERVICE_NAME=' SERVICE_NAME ')))'
IP_ADDRESS -> 'ip_address_value'
PORT_NUMBER -> 'port_number_value'
SERVICE_NAME -> 'service_name_1'
IP_SERVICE -> IP_ADDRESS '/' SERVICE_NAME
ODBC_CONNECTION_STRING -> 'odbc_dsn_value'
```"
16.2 删除外部链接 ,"```nltk
S -> DROP_LINK
DROP_LINK -> 'DROP' PUBLIC_OPTION 'LINK' IF_EXISTS_OPTION SCHEMA_NAME_OPTION 'link_name_1' ';'
PUBLIC_OPTION -> 'PUBLIC' | ''
IF_EXISTS_OPTION -> 'IF EXISTS' | ''
SCHEMA_NAME_OPTION -> 'schemaname_1' '.' | ''
```"
16.3 使用外部链接 ,"```plaintext
S -> EXTERNAL_LINK_QUERY | EXTERNAL_LINK_INSERT | EXTERNAL_LINK_UPDATE | EXTERNAL_LINK_DELETE | EXTERNAL_LINK_PROCEDURE_CALL
EXTERNAL_LINK_QUERY -> 'SELECT' '*' 'FROM' TABLE_OR_VIEW '@' 'link_name_1'
EXTERNAL_LINK_INSERT -> 'INSERT' 'INTO' 'table_name_1' '@' 'link_name_1' 'VALUES' '(' 'int_value' ',' 'int_value' ',' 'int_value' ')'
EXTERNAL_LINK_UPDATE -> 'UPDATE' 'table_name_1' '@' 'link_name_1' 'SET' 'column_name_1' '=' 'column_name_1' '+' 'int_value' 'WHERE' 'column_name_2' 'NOT' 'IN' '(' 'SELECT' 'column_name_3' 'FROM' 'local_table_name_1' ')'
EXTERNAL_LINK_DELETE -> 'DELETE' 'FROM' 'table_name_1' '@' 'link_name_1' 'WHERE' 'column_name_1' 'IN' '(' 'SELECT' 'column_name_2' 'FROM' 'table_name_2' '@' 'link_name_2' ')'
EXTERNAL_LINK_PROCEDURE_CALL -> 'CALL' 'schema_name_1' '.' 'package_name_1' '.' 'procedure_name_1' '@' 'link_name_1' '(' 'parameter_list' ')'

TABLE_OR_VIEW -> 'table_name_1' | 'view_name_1'
```"
17.1 闪回查询子句 ,"```
FLASHBACK_QUERY_CLAUSE -> 'WHEN' TIMESTAMP_CLAUSE | 'WHEN' TRXID_CLAUSE
TIMESTAMP_CLAUSE -> 'TIMESTAMP' 'timestamp_value'
TRXID_CLAUSE -> 'TRXID' 'trxid_value'
```"
17.2 闪回版本查询 ,"```
FLASHBACK_QUERY -> VERSIONS_BETWEEN
VERSIONS_BETWEEN -> 'VERSIONS' 'BETWEEN' TIMESTAMP_RANGE | 'VERSIONS' 'BETWEEN' TRXID_RANGE
TIMESTAMP_RANGE -> 'TIMESTAMP' 'time_exp1' 'AND' 'time_exp2'
TRXID_RANGE -> 'TRXID' 'trxid1' 'AND' 'trxid2'

time_exp1 -> 'time_value'
time_exp2 -> 'time_value'
trxid1 -> 'int_value'
trxid2 -> 'int_value'

PSEUDO_COLUMN -> 'VERSIONS_STARTTRXID' | 'VERSIONS_STARTTIME' | 'VERSIONS_ENDTRXID' | 'VERSIONS_ENDTIME' | 'VERSIONS_OPERATION'
VERSIONS_OPERATION -> 'I' | 'D' | 'U'

TABLE_NAME -> 'table_name_1'
COLUMN_NAME -> 'column_name_1'
```"
17.3 闪回事务查询 ,"```text
S -> FLASHBACK_TRX_QUERY | JSON_INTRODUCTION | JSON_EXAMPLE
FLASHBACK_TRX_QUERY -> '闪回事务查询提供系统视图' 'V$FLASHBACK_TRX_INFO' '供用户查看在事务级对数据库所做的更改。根据视图信息，可以确定如何还原指定事务或指定时间段内的修改。'
JSON_INTRODUCTION -> 'JSON（JavaScript Object Notation）是完全独立于语言的文本格式，是一种轻量级的数据交换格式。'
JSON_EXAMPLE -> 'DM 数据库支持对 JSON数据进行存储和查询。在 DM 数据库中 JSON数据以字符串形式存储。DM建议用户在插入JSON数据之前，使用IS JSON来验证输入JSON数据的正确性。'

V$FLASHBACK_TRX_INFO -> 'START_TRXID' 'BIGINT' | 'START_TIMESTAMP' 'TIMESTAMP' | 'COMMIT_TRXID' 'BIGINT' | 'COMMIT_TIMESTAMP' 'TIMESTAMP' | 'LOGON_USER' 'VARCHAR(256)' | 'UNDO_CHANGE#' 'INT' | 'OPERATION' 'CHAR(1)' | 'TABLE_NAME' 'VARCHAR(256)' | 'TABLE_OWNER' 'VARCHAR(256)' | 'ROW_ID' 'BIGINT' | 'UNDO_SQL' 'VARCHAR(3900)'
OPERATION -> 'D' | 'U' | 'I' | 'N' | 'C' | 'P' | 'O'
```"
18.1数据类型 ,"```nltk
JSON_DATA_TYPE -> 'string' | 'number' | 'object' | 'array' | 'true' | 'false' | 'null'
```"
" 
18.1.1 string ","```plaintext
STRING -> UNQUOTED_STRING | QUOTED_STRING
UNQUOTED_STRING -> LETTER (LETTER | DIGIT)*
QUOTED_STRING -> SINGLE_QUOTE (CHARACTER | ESCAPE_SEQUENCE)* SINGLE_QUOTE | DOUBLE_QUOTE (CHARACTER | ESCAPE_SEQUENCE)* DOUBLE_QUOTE
LETTER -> 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
DIGIT -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
CHARACTER -> LETTER | DIGIT | ' ' | '!' | '""' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~'
ESCAPE_SEQUENCE -> '\\""' | '\\\\' | '\\/' | '\\b' | '\\f' | '\\n' | '\\r' | '\\t' | '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
HEX_DIGIT -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
SINGLE_QUOTE -> '\''
DOUBLE_QUOTE -> '""'
```"
18.1.2 number ,"```plaintext
NUMBER -> DIGIT | '-' DIGIT | DIGIT '.' DIGIT | DIGIT 'e' SIGN DIGIT | DIGIT 'E' SIGN DIGIT
DIGIT -> '0' | NON_ZERO_DIGIT
NON_ZERO_DIGIT -> '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
SIGN -> '+' | '-'
```"
" 
18.1.3 true、false ","```
S -> DROP_TABLE | CREATE_TABLE | INSERT_VALUES | COMMIT | SELECT_JSON_VALUE

DROP_TABLE -> 'DROP' 'TABLE' 't_json_boolean_1' 'CASCADE'

CREATE_TABLE -> 'CREATE' 'TABLE' 't_json_boolean_1' '(' COLUMN_DEFINITIONS ')'
COLUMN_DEFINITIONS -> COLUMN_DEFINITION | COLUMN_DEFINITION ',' COLUMN_DEFINITION
COLUMN_DEFINITION -> 'c1' 'int' | 'c2' 'varchar2' '(' '100' ')' 'CHECK' '(' 'c2' 'IS' 'JSON' '(' 'STRICT' ')' ')' | 'c3' 'varchar2' '(' '100' ')' 'CHECK' '(' 'c3' 'IS' 'JSON' '(' 'LAX' ')' ')'

INSERT_VALUES -> 'INSERT' 'INTO' 't_json_boolean_1' 'VALUES' '(' VALUE_LIST ')'
VALUE_LIST -> VALUE | VALUE ',' VALUE
VALUE -> '1' | '2' | '3' | '4' | 'NULL' | '{""dameng"":TRUE}' | '{""dameng"":true}' | '{true:1}' | '{TRUE:1}'

COMMIT -> 'COMMIT'

SELECT_JSON_VALUE -> 'SELECT' 'C1' ',' 'json_value' '(' 'c3' ',' JSON_PATH ')' 'FROM' 't_json_boolean_1'
JSON_PATH -> ""'$.dameng'"" | ""'$.dameng' 'returning' 'number'"" | ""'$.true'"" | ""'$.TRUE'""
```"
18.1.4 null ,"```plaintext
NULL_USAGE -> NULL_AS_VALUE | NULL_AS_NAME
NULL_AS_VALUE -> 'null' | 'NULL' | 'nUll' | 'nULL'
NULL_AS_NAME -> 'null'

JSON_INSERTION -> JSON_STRICT | JSON_LAX
JSON_STRICT -> 'IS JSON (STRICT)' 'null'
JSON_LAX -> 'IS JSON (LAX)' NULL_AS_VALUE

JSON_VALUE -> 'json_value' 'null' 'SQL_NULL'
JSON_QUERY -> 'json_query' 'null' 'WITH WRAPPER' '[' 'null' ']'

TABLE_CREATION -> 'drop table' 't_json_null_name_1' ';' 'create table' 't_json_null_name_1' '(' 'c1' 'int' ',' 'c2' 'varchar2(100)' 'CHECK' '(' 'c2' 'is json' ')' ')' ';'

INSERT_STATEMENT -> 'insert into' 't_json_null_name_1' 'values' '(' '1' ',' 'null' ')' ';' | 'insert into' 't_json_null_name_1' 'values' '(' '2' ',' '{""dameng"":null}' ')' ';' | 'insert into' 't_json_null_name_1' 'values' '(' '3' ',' 'NULL' ')' ';' | 'insert into' 't_json_null_name_1' 'values' '(' '4' ',' '{""dameng"":NULL}' ')' ';' 'commit' ';'

SELECT_STATEMENT -> 'select' 'json_value' '(' 'c2' ',' '$.dameng' ')' 'from' 't_json_null_name_1' ';' | 'select' 'json_query' '(' 'c2' ',' '$.dameng' 'WITH WRAPPER' ')' 'from' 't_json_null_name_1' ';'
```"
18.1.5 object ,"```plaintext
JSON_OBJECT -> '{' '}' | '{' PAIR_LIST '}'
PAIR_LIST -> PAIR | PAIR ',' PAIR
PAIR -> STRING ':' VALUE
VALUE -> 'string_value' | 'number_value' | 'object_value' | 'array_value' | 'true_value' | 'false_value' | 'null_value'
```"
18.1.6 array ,"```plaintext
JSON_ARRAY -> '[' VALUE ']'
VALUE -> 'value_1' | 'value_1' ',' 'value_2'
```"
18.2 函数 ,"```plaintext
FUNCTION -> '18.2' 'function_unknown'
```"
18.2.1 json_value ,"```plaintext
JSON_VALUE_FUNCTION -> 'JSON_VALUE' '(' PARAM_1 ',' PARAM_2 RETURNING_OPTION ASCII_OPTION ERROR_OPTION ')'
PARAM_1 -> 'column_name_1' | 'json_data_value'
PARAM_2 -> 'path_expression_value'
RETURNING_OPTION -> 'RETURNING' JSON_DATA_TYPE | ''
JSON_DATA_TYPE -> 'STRING' | 'NUMBER' | 'TRUE' | 'FALSE' | 'NULL'
ERROR_OPTION -> 'NULL' 'ON' 'ERROR' | 'ERROR' 'ON' 'ERROR' | DEFAULT_OPTION 'ON' 'ERROR'
DEFAULT_OPTION -> 'DEFAULT' 'value_value'
ASCII_OPTION -> 'ASCII' | ''
```"
18.2.2 json_query ,"```plaintext
JSON_QUERY_FUNCTION -> 'json_query' '(' PARAM_1 ',' PARAM_2 RETURNING_OPTION PRETTY_OPTION ASCII_OPTION WRAPPER_OPTION ERROR_OPTION ')'
PARAM_1 -> 'column_name_1' | 'json_data_value'
PARAM_2 -> 'path_expression_value'
RETURNING_OPTION -> 'RETURNING' JSON_DATA_TYPE | ''
JSON_DATA_TYPE -> 'STRING' | 'TRUE' | 'FALSE' | 'NULL'
PRETTY_OPTION -> 'PRETTY' | ''
ASCII_OPTION -> 'ASCII' | ''
WRAPPER_OPTION -> 'WITH' CONDITIONAL_OPTION ARRAY_OPTION 'WRAPPER' | 'WITHOUT' ARRAY_OPTION 'WRAPPER' | ''
CONDITIONAL_OPTION -> 'CONDITIONAL' | 'UNCONDITIONAL' | ''
ARRAY_OPTION -> 'ARRAY' | ''
ERROR_OPTION -> 'NULL' 'ON' 'ERROR' | 'ERROR' 'ON' 'ERROR' | 'EMPTY' 'ON' 'ERROR' | ''
```"
18.2.3 jsonb_each ,"```plaintext
JSONB_EACH_FUNCTION -> 'jsonb_each' '(' JSON_EXP1 ')'
JSON_EXP1 -> 'json_exp1_value'
RETURN_TABLE -> '(' 'key' ',' 'value' ')'
KEY -> 'key_value'
VALUE -> 'value_value'
```"
18.2.4 jsonb_each_text ,"```plaintext
JSONB_EACH_TEXT_FUNCTION -> 'jsonb_each_text' '(' JSON_EXP1 ')'
JSON_EXP1 -> 'json_exp1_value'
RETURN_TABLE -> '(' 'key' ',' 'value' ')'
KEY -> 'key_value'
VALUE -> 'value_value'
```"
18.2.5 jsonb_array_elements ,"```plaintext
JSONB_ARRAY_ELEMENTS_FUNCTION -> 'jsonb_array_elements' '(' JSON_EXP1 ')'
JSON_EXP1 -> 'json_exp1_value'
```"
18.2.6 jsonb_array_elements_text ,"```plaintext
JSONB_ARRAY_ELEMENTS_TEXT_FUNCTION -> 'jsonb_array_elements_text' '(' JSON_EXP1 ')'
JSON_EXP1 -> 'json_string_value'
VALUE -> 'value'
```"
18.2.7 jsonb_strip_nulls ,"```plaintext
JSONB_STRIP_NULLS_FUNC -> 'jsonb_strip_nulls' '(' JSON_EXP1 ')'
JSON_EXP1 -> 'json_string_value' | 'clob_value'
```"
18.2.8 jsonb_set ,"```plaintext
JSONB_SET_FUNCTION -> 'jsonb_set' '(' JSON_EXP1 ',' PATH_EXP2 ',' JSON_EXP3 ',' EXP4 ')'
JSON_EXP1 -> 'json_string_value'
PATH_EXP2 -> '{' PATH_IDENTIFIER '}'
PATH_IDENTIFIER -> 'path_identifier_value'
JSON_EXP3 -> 'json_string_value'
EXP4 -> 'TRUE' | 'FALSE'
```"
18.2.9 jsonb_object_agg ,"```plaintext
JSONB_OBJECT_AGG_FUNCTION -> 'jsonb_object_agg' '(' NAME ',' VALUE IS_JSONB_OPTION ')'
NAME -> 'name_value'
VALUE -> 'varchar_value' | 'clob_value' | 'varbinary_value' | 'blob_value' | 'int_value' | 'bigint_value' | 'dec_value' | 'json_value'
IS_JSONB_OPTION -> 'IS_JSONB' | ''
```"
18.2.10 jsonb_concat ,"```plaintext
JSONB_CONCAT_FUNCTION -> 'jsonb_concat' '(' JSONB_EXP1 ',' JSONB_EXP2 ')'
JSONB_EXP1 -> 'jsonb_exp1_value'
JSONB_EXP2 -> 'jsonb_exp2_value'
```"
18.2.11 to_jsonb ,"```plaintext
TO_JSONB_FUNCTION -> 'to_jsonb' '(' JSON_EXP1 ')'
JSON_EXP1 -> 'json_string_value' | 'clob_value'
```"
18.2.12 函数参数详解 ,"```plaintext
PATH_EXPRESSION -> '$' OBJECT | '$' ARRAY
OBJECT -> '.' NAME | '*' NAME
ARRAY -> '[' INDEX ']' | '[' '*' ']'
INDEX -> '0' | '1' | '2' | RANGE
RANGE -> NUMBER 'to' NUMBER | NUMBER ',' RANGE
NAME -> 'name_value'
NUMBER -> 'number_value'

PRETTY_ASCII -> 'PRETTY' | 'ASCII'
PRETTY_ASCII_RULE -> 'PRETTY' 'ASCII' | 'ASCII'

WRAPPER -> 'WITH' 'WRAPPER' | 'WITHOUT' 'WRAPPER' | 'WITH' 'CONDITIONAL' 'WRAPPER' | 'WITH' 'UNCONDITIONAL' 'WRAPPER'
WRAPPER_RULE -> 'WITH' 'WRAPPER' | 'WITHOUT' 'WRAPPER' | 'WITH' 'CONDITIONAL' 'WRAPPER'

ERROR -> 'ERROR' 'ON' 'ERROR' | 'NULL' 'ON' 'ERROR' | 'EMPTY' 'ON' 'ERROR' | 'DEFAULT' 'value_value' 'ON' 'ERROR'
ERROR_RULE -> 'ERROR' 'ON' 'ERROR' | 'NULL' 'ON' 'ERROR' | 'EMPTY' 'ON' 'ERROR' | 'DEFAULT' 'value_value' 'ON' 'ERROR'

JSON_QUERY -> 'json_query' '(' 'po_document_value' ',' PATH_EXPRESSION PRETTY_ASCII_RULE WRAPPER_RULE ERROR_RULE ')'
JSON_VALUE -> 'json_value' '(' 'po_document_value' ',' PATH_EXPRESSION ERROR_RULE ')'
```"
18.2.13 <JSON_expr1> ->> <expr2> ,"```
JSON_EXPR -> JSON_EXPR1 '->>' EXPR2
JSON_EXPR1 -> 'json_expr1_value'
EXPR2 -> 'expr2_value'
```"
18.2.14 <JSON_expr1> @> <JSON_expr2> ,"```nltk
JSON_EXPR -> JSON_EXPR1 '@>' JSON_EXPR2
JSON_EXPR1 -> 'json_expr1_value'
JSON_EXPR2 -> 'json_expr2_value'
```"
18.3 使用 IS JSON/IS NOT JSON条件 ,"```plaintext
IS_JSON_CLAUSE -> IS JSON_OPTION UNIQUE_CLAUSE
IS_JSON_CLAUSE -> IS NOT JSON_OPTION UNIQUE_CLAUSE
JSON_OPTION -> STRICT | LAX | ''
UNIQUE_CLAUSE -> WITH UNIQUE KEYS | WITHOUT UNIQUE KEYS | ''

CREATE_TABLE -> 'CREATE' 'TABLE' TABLE_NAME COLUMN_DEFINITION CONSTRAINT
TABLE_NAME -> 'json_is_json' | 'j_purchaseorder_insert' | 't_json_s' | 't_json_l' | 'json_unique'
COLUMN_DEFINITION -> COLUMN_NAME DATA_TYPE
COLUMN_NAME -> 'id' | 'po_document' | 'c1' | 'c2' | 'date_loaded'
DATA_TYPE -> 'int' 'NOT' 'NULL' | 'CLOB' | 'TIMESTAMP' '(' '6' ')' 'WITH' 'TIME' 'ZONE' | 'VARCHAR'
CONSTRAINT -> 'CONSTRAINT' CONSTRAINT_NAME CHECK_CLAUSE
CONSTRAINT_NAME -> 'ensure_json_unique' | 'c2_json' | 'l_c2_json'
CHECK_CLAUSE -> 'CHECK' '(' CHECK_EXPRESSION ')'
CHECK_EXPRESSION -> COLUMN_NAME IS_JSON_CLAUSE

INSERT_STATEMENT -> 'INSERT' 'INTO' TABLE_NAME 'VALUES' VALUE_LIST
VALUE_LIST -> '(' VALUE ',' VALUE ')'
VALUE -> '1' | '2' | '3' | 'NULL' | 'SYSTIMESTAMP' | STRING_VALUE
STRING_VALUE -> '{""PONumber"" : 1600, ""PONumber"" : 1800}' | '""OK""' | '{""dmdatabase"":29}' | '{""2dmdatabase"":29}' | '{""dmdatabase"":.29}' | '{""dmdatabase"":NULL}' | '{""dmdatabase"":False}' | '{""dmdatabase"":29,""dmdatabase"":30}' | '{""dm data base"":29}' | '{dmdatabase: ""dmdatabase""}' | '{""dmdatabase"":''2s''}' | '{dmdatabase:29 }'

SELECT_STATEMENT -> 'SELECT' '*' 'FROM' TABLE_NAME 'ORDER' 'BY' COLUMN_NAME
```"
18.4视图 ,"```
VIEW -> 'DBA_JSON_COLUMNS' | 'USER_JSON_COLUMNS' | 'ALL_JSON_COLUMNS'
```"
18.4.1视图使用说明 ,"```
S -> VIEW_USAGE
VIEW_USAGE -> JSON_COLUMN_DISPLAY | MULTI_COLUMN_DISPLAY | AND_CONSTRAINT_DISPLAY | OR_CONSTRAINT_DISPLAY | IS_NOT_JSON_DISPLAY | NOT_IS_JSON_DISPLAY | VIRTUAL_COLUMN_DISPLAY

JSON_COLUMN_DISPLAY -> '当JSON列的IS JSON约束被失效后，该列仍然在视图中显示。'
MULTI_COLUMN_DISPLAY -> '当 IS JSON 涉及多列时，则所有涉及的列均在视图中显示。例如：c1||c2 is json，则c1和 c2列均在视图中显示。'
AND_CONSTRAINT_DISPLAY -> '如果IS JSON与其他约束进行‖与‖(AND)运算时，则所有涉及的列均在视图中显示。例如：c1 = \'1\' and c2 is json。'
OR_CONSTRAINT_DISPLAY -> '如果 IS JSON 与其他约束进行‖或‖(OR)运算时，则所有列均不在视图中显示。例如：c1 is json OR c2 < 1000，即使是c1 is json OR c2 is json也不行。'
IS_NOT_JSON_DISPLAY -> '如果IS NOT JSON作为CHECK约束时，则该列不在视图中显示。例如：C1 is not json。同理:c1||c2 is not json，则c1和c2均不能在下列视图中显示。'
NOT_IS_JSON_DISPLAY -> '如果NOT  IS JSON作为CHECK约束时， 则该列也不能在下列视图中显示。例如：not( c2 is json )。'
VIRTUAL_COLUMN_DISPLAY -> '当虚拟列相关的实际列使用 IS JSON 作为 CHECK 约束时，该虚拟列不在视图中显示；当虚拟列使用 IS JSON 作为 CHECK 约束时，仅该虚拟列在视图中显示，实际列则不在视图中显示。'
```"
18.4.2 DBA_JSON_COLUMNS ,"```plaintext
DBA_JSON_COLUMNS -> OWNER TABLE_NAME COLUMN_NAME FORMAT DATA_TYPE
OWNER -> 'owner_name_1'
TABLE_NAME -> 'table_name_1'
COLUMN_NAME -> 'column_name_1'
FORMAT -> 'TEXT'
DATA_TYPE -> 'VARCHAR2' | 'CLOB' | 'LONGVARCHAR' | 'TEXT' | 'UNDEFINED'
```"
18.4.3 USER_JSON_COLUMNS ,"```
USER_JSON_COLUMNS -> '显示' '当前' '用户' '所' '拥有' '的' 'JSON' '数据' '信息'
DBA_JSON_COLUMNS -> USER_JSON_COLUMNS '少' '了' '一' '列' 'OWNER'
```"
18.4.4 ALL_JSON_COLUMNS ,"```
ALL_JSON_COLUMNS -> '显示当前用户有权访问的JSON数据信息。该视图列与DBA_JSON_COLUMNS完全相同。'
```"
