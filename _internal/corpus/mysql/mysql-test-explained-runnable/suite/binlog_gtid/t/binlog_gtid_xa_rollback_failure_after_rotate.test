# ==== Purpose ====
#
# This script tests server behavior when a crash occurs during the
# execution of `XA ROLLBACK`, after binary log has been rotated (`XA
# PREPARED` is no longer in the latest binary log file).
#
# ==== Requirements ====
#
# After server restart:
# R1. The `XA PREPARE` statement shouldn't be found in the binlog.
# R2. The `XA ROLLBACK` statement shouldn't be found in the binlog.
# R3. There shouldn't be any changes to GTID_EXECUTED.
# R4. There should be one pending XA transactions visible with `XA
#     RECOVER`.
# R5. There should still be one pending XA transaction visible with `XA
#     RECOVER` if server is restarted after the crash-recovery.
#
# ==== Implementation ====
#
# 1. Setup scenario: create table and insert some records.
# 2. Start and execute an XA transaction containing an insert until before
#    `XA ROLLBACK`.
# 3. Take the `GTID_EXECUTED` state.
# 4. Rotate and purge binary logs.
# 5. Crash the server during `XA ROLLBACK` execution, before rolling back
#    in the TC.
# 6. Restart server and check:
#    a. Error log for messages stating that recovery process found one
#       transaction needing recovery.
#    b. The `XA PREPARE` and `XA ROLLBACK` aren't found in the binary log.
#    c. The GTID_EXECUTED variable wasn't updated.
#    d. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
#    e. There aren't changes to the table.
# 7. Restart the server and check that the transaction is still in preared
#    state, meaning, the recovery process moved the transaction to
#    `PERSISTED_IN_TC` and that state was persisted.
# 8. Rollback the transaction.
# 9. Check the table hasn't changed.
#
# ==== References ====
#
# WL#11300: Crash-safe XA + binary log
#
# Related tests